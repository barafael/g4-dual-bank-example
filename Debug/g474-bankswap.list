
g474-bankswap.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b38  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08004d10  08004d10  00014d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d38  08004d38  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  08004d38  08004d38  00014d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d40  08004d40  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d40  08004d40  00014d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d44  08004d44  00014d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08004d48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000002c  08004d74  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08004d74  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b151  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c49  00000000  00000000  0002b1ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a60  00000000  00000000  0002cdf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000978  00000000  00000000  0002d858  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023d5d  00000000  00000000  0002e1d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008d50  00000000  00000000  00051f2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e3833  00000000  00000000  0005ac7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013e4b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002998  00000000  00000000  0013e52c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000002c 	.word	0x2000002c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004cf8 	.word	0x08004cf8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000030 	.word	0x20000030
 8000214:	08004cf8 	.word	0x08004cf8

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <toggleBankAndReset>:
#include "main.h"
#include "stdbool.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
void toggleBankAndReset() {
 8000518:	b580      	push	{r7, lr}
 800051a:	b08e      	sub	sp, #56	; 0x38
 800051c:	af00      	add	r7, sp, #0
    FLASH_OBProgramInitTypeDef OBInit;
    HAL_FLASH_Unlock();
 800051e:	f000 fd41 	bl	8000fa4 <HAL_FLASH_Unlock>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000522:	4b20      	ldr	r3, [pc, #128]	; (80005a4 <toggleBankAndReset+0x8c>)
 8000524:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000528:	611a      	str	r2, [r3, #16]
    HAL_FLASH_OB_Unlock();
 800052a:	f000 fd77 	bl	800101c <HAL_FLASH_OB_Unlock>
    HAL_FLASHEx_OBGetConfig(&OBInit);
 800052e:	1d3b      	adds	r3, r7, #4
 8000530:	4618      	mov	r0, r3
 8000532:	f000 ffa5 	bl	8001480 <HAL_FLASHEx_OBGetConfig>

    OBInit.OptionType = OPTIONBYTE_USER;
 8000536:	2304      	movs	r3, #4
 8000538:	607b      	str	r3, [r7, #4]
    OBInit.USERType = OB_USER_BFB2;
 800053a:	2380      	movs	r3, #128	; 0x80
 800053c:	61bb      	str	r3, [r7, #24]

    if (((OBInit.USERConfig) & (OB_BFB2_ENABLE)) == OB_BFB2_ENABLE) {
 800053e:	69fb      	ldr	r3, [r7, #28]
 8000540:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000544:	2b00      	cmp	r3, #0
 8000546:	d002      	beq.n	800054e <toggleBankAndReset+0x36>
        OBInit.USERConfig = OB_BFB2_DISABLE;
 8000548:	2300      	movs	r3, #0
 800054a:	61fb      	str	r3, [r7, #28]
 800054c:	e002      	b.n	8000554 <toggleBankAndReset+0x3c>
    } else {
        OBInit.USERConfig = OB_BFB2_ENABLE;
 800054e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000552:	61fb      	str	r3, [r7, #28]
    }
    if (HAL_FLASHEx_OBProgram(&OBInit) != HAL_OK) {
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	4618      	mov	r0, r3
 8000558:	f000 ff02 	bl	8001360 <HAL_FLASHEx_OBProgram>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d009      	beq.n	8000576 <toggleBankAndReset+0x5e>
        // uint32_t errorCode = HAL_FLASH_GetError();
        while (1) {
            HAL_Delay(1000);
 8000562:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000566:	f000 fb95 	bl	8000c94 <HAL_Delay>
            HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800056a:	2120      	movs	r1, #32
 800056c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000570:	f001 feae 	bl	80022d0 <HAL_GPIO_TogglePin>
            HAL_Delay(1000);
 8000574:	e7f5      	b.n	8000562 <toggleBankAndReset+0x4a>
        }
    }
    if (HAL_FLASH_OB_Launch() != HAL_OK) {
 8000576:	f000 fd93 	bl	80010a0 <HAL_FLASH_OB_Launch>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d008      	beq.n	8000592 <toggleBankAndReset+0x7a>
        //uint32_t errorCode = HAL_FLASH_GetError();
        while (1) {
            HAL_Delay(100);
 8000580:	2064      	movs	r0, #100	; 0x64
 8000582:	f000 fb87 	bl	8000c94 <HAL_Delay>
            HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000586:	2120      	movs	r1, #32
 8000588:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800058c:	f001 fea0 	bl	80022d0 <HAL_GPIO_TogglePin>
            HAL_Delay(100);
 8000590:	e7f6      	b.n	8000580 <toggleBankAndReset+0x68>
        }
    }
    HAL_FLASH_OB_Lock();
 8000592:	f000 fd69 	bl	8001068 <HAL_FLASH_OB_Lock>
    HAL_FLASH_Lock();
 8000596:	f000 fd27 	bl	8000fe8 <HAL_FLASH_Lock>
}
 800059a:	bf00      	nop
 800059c:	3738      	adds	r7, #56	; 0x38
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40022000 	.word	0x40022000

080005a8 <getActiveBank>:

uint8_t getActiveBank() {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08e      	sub	sp, #56	; 0x38
 80005ac:	af00      	add	r7, sp, #0
    FLASH_OBProgramInitTypeDef OBInit;

    HAL_FLASHEx_OBGetConfig(&OBInit);
 80005ae:	463b      	mov	r3, r7
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 ff65 	bl	8001480 <HAL_FLASHEx_OBGetConfig>

    OBInit.OptionType = OPTIONBYTE_USER;
 80005b6:	2304      	movs	r3, #4
 80005b8:	603b      	str	r3, [r7, #0]
    OBInit.USERType = OB_USER_BFB2;
 80005ba:	2380      	movs	r3, #128	; 0x80
 80005bc:	617b      	str	r3, [r7, #20]

    uint8_t result;
    if (((OBInit.USERConfig) & (OB_BFB2_ENABLE)) == OB_BFB2_ENABLE) {
 80005be:	69bb      	ldr	r3, [r7, #24]
 80005c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d003      	beq.n	80005d0 <getActiveBank+0x28>
    	result = 2;
 80005c8:	2302      	movs	r3, #2
 80005ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80005ce:	e002      	b.n	80005d6 <getActiveBank+0x2e>
    } else {
    	result = 1;
 80005d0:	2301      	movs	r3, #1
 80005d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }
    return result;
 80005d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3738      	adds	r7, #56	; 0x38
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
	...

080005e4 <HAL_GPIO_EXTI_Callback>:

/* Private typedef -----------------------------------------------------------*/
#define NUM_PAGES 100

/* USER CODE BEGIN PTD */
void HAL_GPIO_EXTI_Callback(uint16_t pin) {
 80005e4:	b590      	push	{r4, r7, lr}
 80005e6:	b08f      	sub	sp, #60	; 0x3c
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	80fb      	strh	r3, [r7, #6]
    if (pin == GPIO_PIN_13) {
 80005ee:	88fb      	ldrh	r3, [r7, #6]
 80005f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005f4:	d158      	bne.n	80006a8 <HAL_GPIO_EXTI_Callback+0xc4>

        uint8_t bank = getActiveBank();
 80005f6:	f7ff ffd7 	bl	80005a8 <getActiveBank>
 80005fa:	4603      	mov	r3, r0
 80005fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        FLASH_EraseInitTypeDef erase = { 0 };
 8000600:	f107 0310 	add.w	r3, r7, #16
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
        erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800060e:	2300      	movs	r3, #0
 8000610:	613b      	str	r3, [r7, #16]
        erase.Banks = bank == 1 ? FLASH_BANK_2 : FLASH_BANK_1;
 8000612:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000616:	2b01      	cmp	r3, #1
 8000618:	d101      	bne.n	800061e <HAL_GPIO_EXTI_Callback+0x3a>
 800061a:	2302      	movs	r3, #2
 800061c:	e000      	b.n	8000620 <HAL_GPIO_EXTI_Callback+0x3c>
 800061e:	2301      	movs	r3, #1
 8000620:	617b      	str	r3, [r7, #20]
        erase.NbPages = NUM_PAGES;
 8000622:	2364      	movs	r3, #100	; 0x64
 8000624:	61fb      	str	r3, [r7, #28]
        erase.Page = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	61bb      	str	r3, [r7, #24]

        HAL_FLASH_Unlock();
 800062a:	f000 fcbb 	bl	8000fa4 <HAL_FLASH_Unlock>
        uint32_t error;
        HAL_StatusTypeDef status = HAL_FLASHEx_Erase(&erase, &error);
 800062e:	f107 020c 	add.w	r2, r7, #12
 8000632:	f107 0310 	add.w	r3, r7, #16
 8000636:	4611      	mov	r1, r2
 8000638:	4618      	mov	r0, r3
 800063a:	f000 fdef 	bl	800121c <HAL_FLASHEx_Erase>
 800063e:	4603      	mov	r3, r0
 8000640:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        if (status != HAL_OK) {
 8000644:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000648:	2b00      	cmp	r3, #0
 800064a:	d12c      	bne.n	80006a6 <HAL_GPIO_EXTI_Callback+0xc2>
            return;
        }

        uint8_t *src;
        uint32_t dest;
        if (bank == 1) {
 800064c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000650:	2b01      	cmp	r3, #1
 8000652:	d105      	bne.n	8000660 <HAL_GPIO_EXTI_Callback+0x7c>
            src = (uint8_t*)0x08000000;
 8000654:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000658:	637b      	str	r3, [r7, #52]	; 0x34
            dest = 0x08040000;
 800065a:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <HAL_GPIO_EXTI_Callback+0xcc>)
 800065c:	633b      	str	r3, [r7, #48]	; 0x30
 800065e:	e004      	b.n	800066a <HAL_GPIO_EXTI_Callback+0x86>
        } else {
            src = (uint8_t*)0x08000000;
 8000660:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000664:	637b      	str	r3, [r7, #52]	; 0x34
            dest = 0x08040000;
 8000666:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000668:	633b      	str	r3, [r7, #48]	; 0x30
        }

#define NUM_BYTES       NUM_PAGES * FLASH_PAGE_SIZE
#define NUM_DOUBLEWORDS NUM_BYTES / 8
        for (size_t index = 0; index < NUM_DOUBLEWORDS; index++) {
 800066a:	2300      	movs	r3, #0
 800066c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800066e:	e013      	b.n	8000698 <HAL_GPIO_EXTI_Callback+0xb4>
            uint64_t doubleword = *(uint64_t*)(src + (index * 8));
 8000670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000672:	00db      	lsls	r3, r3, #3
 8000674:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000676:	4413      	add	r3, r2
 8000678:	e9d3 3400 	ldrd	r3, r4, [r3]
 800067c:	e9c7 3408 	strd	r3, r4, [r7, #32]
            HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, dest + index * 8, doubleword);
 8000680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000682:	00da      	lsls	r2, r3, #3
 8000684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000686:	18d1      	adds	r1, r2, r3
 8000688:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800068c:	2000      	movs	r0, #0
 800068e:	f000 fc33 	bl	8000ef8 <HAL_FLASH_Program>
        for (size_t index = 0; index < NUM_DOUBLEWORDS; index++) {
 8000692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000694:	3301      	adds	r3, #1
 8000696:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800069a:	f5b3 4fc8 	cmp.w	r3, #25600	; 0x6400
 800069e:	d3e7      	bcc.n	8000670 <HAL_GPIO_EXTI_Callback+0x8c>
        }
        toggleBankAndReset();
 80006a0:	f7ff ff3a 	bl	8000518 <toggleBankAndReset>
 80006a4:	e000      	b.n	80006a8 <HAL_GPIO_EXTI_Callback+0xc4>
            return;
 80006a6:	bf00      	nop
    }
}
 80006a8:	373c      	adds	r7, #60	; 0x3c
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd90      	pop	{r4, r7, pc}
 80006ae:	bf00      	nop
 80006b0:	08040000 	.word	0x08040000

080006b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ba:	f000 fa7a 	bl	8000bb2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006be:	f000 f819 	bl	80006f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c2:	f000 f8c5 	bl	8000850 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80006c6:	f000 f87d 	bl	80007c4 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t bank = getActiveBank();
 80006ca:	f7ff ff6d 	bl	80005a8 <getActiveBank>
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80006d2:	2120      	movs	r1, #32
 80006d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d8:	f001 fdfa 	bl	80022d0 <HAL_GPIO_TogglePin>
    if (bank == 1) {
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d104      	bne.n	80006ec <main+0x38>
        HAL_Delay(1000);
 80006e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006e6:	f000 fad5 	bl	8000c94 <HAL_Delay>
 80006ea:	e7f2      	b.n	80006d2 <main+0x1e>
    } else {
        HAL_Delay(250);
 80006ec:	20fa      	movs	r0, #250	; 0xfa
 80006ee:	f000 fad1 	bl	8000c94 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80006f2:	e7ee      	b.n	80006d2 <main+0x1e>

080006f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b0a8      	sub	sp, #160	; 0xa0
 80006f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80006fe:	2238      	movs	r2, #56	; 0x38
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f004 faf0 	bl	8004ce8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000708:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000718:	463b      	mov	r3, r7
 800071a:	2254      	movs	r2, #84	; 0x54
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f004 fae2 	bl	8004ce8 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000724:	2000      	movs	r0, #0
 8000726:	f001 fe05 	bl	8002334 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800072a:	2302      	movs	r3, #2
 800072c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800072e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000732:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000734:	2340      	movs	r3, #64	; 0x40
 8000736:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000738:	2302      	movs	r3, #2
 800073a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800073e:	2302      	movs	r3, #2
 8000740:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000744:	2304      	movs	r3, #4
 8000746:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800074a:	2355      	movs	r3, #85	; 0x55
 800074c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000750:	2302      	movs	r3, #2
 8000752:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000756:	2302      	movs	r3, #2
 8000758:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800075c:	2302      	movs	r3, #2
 800075e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000762:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000766:	4618      	mov	r0, r3
 8000768:	f001 fe88 	bl	800247c <HAL_RCC_OscConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000772:	f000 f8dd 	bl	8000930 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000776:	230f      	movs	r3, #15
 8000778:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077a:	2303      	movs	r3, #3
 800077c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000786:	2300      	movs	r3, #0
 8000788:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 800078a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800078e:	2108      	movs	r1, #8
 8000790:	4618      	mov	r0, r3
 8000792:	f002 f98b 	bl	8002aac <HAL_RCC_ClockConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800079c:	f000 f8c8 	bl	8000930 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80007a0:	2320      	movs	r3, #32
 80007a2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007a8:	463b      	mov	r3, r7
 80007aa:	4618      	mov	r0, r3
 80007ac:	f002 fb9a 	bl	8002ee4 <HAL_RCCEx_PeriphCLKConfig>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007b6:	f000 f8bb 	bl	8000930 <Error_Handler>
  }
}
 80007ba:	bf00      	nop
 80007bc:	37a0      	adds	r7, #160	; 0xa0
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
	...

080007c4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80007c8:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <MX_LPUART1_UART_Init+0x84>)
 80007ca:	4a20      	ldr	r2, [pc, #128]	; (800084c <MX_LPUART1_UART_Init+0x88>)
 80007cc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80007ce:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <MX_LPUART1_UART_Init+0x84>)
 80007d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007d6:	4b1c      	ldr	r3, [pc, #112]	; (8000848 <MX_LPUART1_UART_Init+0x84>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80007dc:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <MX_LPUART1_UART_Init+0x84>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80007e2:	4b19      	ldr	r3, [pc, #100]	; (8000848 <MX_LPUART1_UART_Init+0x84>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80007e8:	4b17      	ldr	r3, [pc, #92]	; (8000848 <MX_LPUART1_UART_Init+0x84>)
 80007ea:	220c      	movs	r2, #12
 80007ec:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ee:	4b16      	ldr	r3, [pc, #88]	; (8000848 <MX_LPUART1_UART_Init+0x84>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007f4:	4b14      	ldr	r3, [pc, #80]	; (8000848 <MX_LPUART1_UART_Init+0x84>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007fa:	4b13      	ldr	r3, [pc, #76]	; (8000848 <MX_LPUART1_UART_Init+0x84>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000800:	4811      	ldr	r0, [pc, #68]	; (8000848 <MX_LPUART1_UART_Init+0x84>)
 8000802:	f002 fdbb 	bl	800337c <HAL_UART_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 800080c:	f000 f890 	bl	8000930 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000810:	2100      	movs	r1, #0
 8000812:	480d      	ldr	r0, [pc, #52]	; (8000848 <MX_LPUART1_UART_Init+0x84>)
 8000814:	f004 f95f 	bl	8004ad6 <HAL_UARTEx_SetTxFifoThreshold>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_LPUART1_UART_Init+0x5e>
  {
    Error_Handler();
 800081e:	f000 f887 	bl	8000930 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000822:	2100      	movs	r1, #0
 8000824:	4808      	ldr	r0, [pc, #32]	; (8000848 <MX_LPUART1_UART_Init+0x84>)
 8000826:	f004 f994 	bl	8004b52 <HAL_UARTEx_SetRxFifoThreshold>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_LPUART1_UART_Init+0x70>
  {
    Error_Handler();
 8000830:	f000 f87e 	bl	8000930 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000834:	4804      	ldr	r0, [pc, #16]	; (8000848 <MX_LPUART1_UART_Init+0x84>)
 8000836:	f004 f915 	bl	8004a64 <HAL_UARTEx_DisableFifoMode>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_LPUART1_UART_Init+0x80>
  {
    Error_Handler();
 8000840:	f000 f876 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000048 	.word	0x20000048
 800084c:	40008000 	.word	0x40008000

08000850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08a      	sub	sp, #40	; 0x28
 8000854:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000856:	f107 0314 	add.w	r3, r7, #20
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
 8000864:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000866:	4b2f      	ldr	r3, [pc, #188]	; (8000924 <MX_GPIO_Init+0xd4>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	4a2e      	ldr	r2, [pc, #184]	; (8000924 <MX_GPIO_Init+0xd4>)
 800086c:	f043 0304 	orr.w	r3, r3, #4
 8000870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000872:	4b2c      	ldr	r3, [pc, #176]	; (8000924 <MX_GPIO_Init+0xd4>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	f003 0304 	and.w	r3, r3, #4
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800087e:	4b29      	ldr	r3, [pc, #164]	; (8000924 <MX_GPIO_Init+0xd4>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	4a28      	ldr	r2, [pc, #160]	; (8000924 <MX_GPIO_Init+0xd4>)
 8000884:	f043 0320 	orr.w	r3, r3, #32
 8000888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088a:	4b26      	ldr	r3, [pc, #152]	; (8000924 <MX_GPIO_Init+0xd4>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	f003 0320 	and.w	r3, r3, #32
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	4b23      	ldr	r3, [pc, #140]	; (8000924 <MX_GPIO_Init+0xd4>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089a:	4a22      	ldr	r2, [pc, #136]	; (8000924 <MX_GPIO_Init+0xd4>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a2:	4b20      	ldr	r3, [pc, #128]	; (8000924 <MX_GPIO_Init+0xd4>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ae:	4b1d      	ldr	r3, [pc, #116]	; (8000924 <MX_GPIO_Init+0xd4>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b2:	4a1c      	ldr	r2, [pc, #112]	; (8000924 <MX_GPIO_Init+0xd4>)
 80008b4:	f043 0302 	orr.w	r3, r3, #2
 80008b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ba:	4b1a      	ldr	r3, [pc, #104]	; (8000924 <MX_GPIO_Init+0xd4>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008be:	f003 0302 	and.w	r3, r3, #2
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2120      	movs	r1, #32
 80008ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ce:	f001 fce7 	bl	80022a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008d8:	4b13      	ldr	r3, [pc, #76]	; (8000928 <MX_GPIO_Init+0xd8>)
 80008da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	4619      	mov	r1, r3
 80008e6:	4811      	ldr	r0, [pc, #68]	; (800092c <MX_GPIO_Init+0xdc>)
 80008e8:	f001 fb58 	bl	8001f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008ec:	2320      	movs	r3, #32
 80008ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	4619      	mov	r1, r3
 8000902:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000906:	f001 fb49 	bl	8001f9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800090a:	2200      	movs	r2, #0
 800090c:	2100      	movs	r1, #0
 800090e:	2028      	movs	r0, #40	; 0x28
 8000910:	f000 fabd 	bl	8000e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000914:	2028      	movs	r0, #40	; 0x28
 8000916:	f000 fad4 	bl	8000ec2 <HAL_NVIC_EnableIRQ>

}
 800091a:	bf00      	nop
 800091c:	3728      	adds	r7, #40	; 0x28
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40021000 	.word	0x40021000
 8000928:	10110000 	.word	0x10110000
 800092c:	48000800 	.word	0x48000800

08000930 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
	...

08000940 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000944:	4b05      	ldr	r3, [pc, #20]	; (800095c <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8000946:	689b      	ldr	r3, [r3, #8]
 8000948:	4a04      	ldr	r2, [pc, #16]	; (800095c <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800094a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800094e:	6093      	str	r3, [r2, #8]
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	40007000 	.word	0x40007000

08000960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000966:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <HAL_MspInit+0x44>)
 8000968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800096a:	4a0e      	ldr	r2, [pc, #56]	; (80009a4 <HAL_MspInit+0x44>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6613      	str	r3, [r2, #96]	; 0x60
 8000972:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <HAL_MspInit+0x44>)
 8000974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <HAL_MspInit+0x44>)
 8000980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000982:	4a08      	ldr	r2, [pc, #32]	; (80009a4 <HAL_MspInit+0x44>)
 8000984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000988:	6593      	str	r3, [r2, #88]	; 0x58
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <HAL_MspInit+0x44>)
 800098c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800098e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8000996:	f7ff ffd3 	bl	8000940 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40021000 	.word	0x40021000

080009a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	; 0x28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a17      	ldr	r2, [pc, #92]	; (8000a24 <HAL_UART_MspInit+0x7c>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d128      	bne.n	8000a1c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80009ca:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <HAL_UART_MspInit+0x80>)
 80009cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009ce:	4a16      	ldr	r2, [pc, #88]	; (8000a28 <HAL_UART_MspInit+0x80>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	65d3      	str	r3, [r2, #92]	; 0x5c
 80009d6:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <HAL_UART_MspInit+0x80>)
 80009d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e2:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <HAL_UART_MspInit+0x80>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e6:	4a10      	ldr	r2, [pc, #64]	; (8000a28 <HAL_UART_MspInit+0x80>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <HAL_UART_MspInit+0x80>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration    
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80009fa:	230c      	movs	r3, #12
 80009fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fe:	2302      	movs	r3, #2
 8000a00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	2300      	movs	r3, #0
 8000a08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000a0a:	230c      	movs	r3, #12
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	4619      	mov	r1, r3
 8000a14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a18:	f001 fac0 	bl	8001f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000a1c:	bf00      	nop
 8000a1e:	3728      	adds	r7, #40	; 0x28
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40008000 	.word	0x40008000
 8000a28:	40021000 	.word	0x40021000

08000a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
	...

08000a3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000a42:	2120      	movs	r1, #32
 8000a44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a48:	f001 fc42 	bl	80022d0 <HAL_GPIO_TogglePin>
    for (size_t index = 0; index < 400000; index++) {
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	e003      	b.n	8000a5a <HardFault_Handler+0x1e>
        asm("nop");
 8000a52:	bf00      	nop
    for (size_t index = 0; index < 400000; index++) {
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	3301      	adds	r3, #1
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a01      	ldr	r2, [pc, #4]	; (8000a64 <HardFault_Handler+0x28>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d9f7      	bls.n	8000a52 <HardFault_Handler+0x16>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000a62:	e7ee      	b.n	8000a42 <HardFault_Handler+0x6>
 8000a64:	00061a7f 	.word	0x00061a7f

08000a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000a6e:	2120      	movs	r1, #32
 8000a70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a74:	f001 fc2c 	bl	80022d0 <HAL_GPIO_TogglePin>
    for (size_t index = 0; index < 400000; index++) {
 8000a78:	2300      	movs	r3, #0
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	e003      	b.n	8000a86 <MemManage_Handler+0x1e>
        asm("nop");
 8000a7e:	bf00      	nop
    for (size_t index = 0; index < 400000; index++) {
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	3301      	adds	r3, #1
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4a01      	ldr	r2, [pc, #4]	; (8000a90 <MemManage_Handler+0x28>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d9f7      	bls.n	8000a7e <MemManage_Handler+0x16>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000a8e:	e7ee      	b.n	8000a6e <MemManage_Handler+0x6>
 8000a90:	00061a7f 	.word	0x00061a7f

08000a94 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000a9a:	2120      	movs	r1, #32
 8000a9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa0:	f001 fc16 	bl	80022d0 <HAL_GPIO_TogglePin>
    for (size_t index = 0; index < 400000; index++) {
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	e003      	b.n	8000ab2 <BusFault_Handler+0x1e>
        asm("nop");
 8000aaa:	bf00      	nop
    for (size_t index = 0; index < 400000; index++) {
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a01      	ldr	r2, [pc, #4]	; (8000abc <BusFault_Handler+0x28>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d9f7      	bls.n	8000aaa <BusFault_Handler+0x16>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000aba:	e7ee      	b.n	8000a9a <BusFault_Handler+0x6>
 8000abc:	00061a7f 	.word	0x00061a7f

08000ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000ac6:	2120      	movs	r1, #32
 8000ac8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000acc:	f001 fc00 	bl	80022d0 <HAL_GPIO_TogglePin>
    for (size_t index = 0; index < 400000; index++) {
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	e003      	b.n	8000ade <UsageFault_Handler+0x1e>
        asm("nop");
 8000ad6:	bf00      	nop
    for (size_t index = 0; index < 400000; index++) {
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	3301      	adds	r3, #1
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4a01      	ldr	r2, [pc, #4]	; (8000ae8 <UsageFault_Handler+0x28>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d9f7      	bls.n	8000ad6 <UsageFault_Handler+0x16>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000ae6:	e7ee      	b.n	8000ac6 <UsageFault_Handler+0x6>
 8000ae8:	00061a7f 	.word	0x00061a7f

08000aec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr

08000b16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b1a:	f000 f89d 	bl	8000c58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000b26:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b2a:	f001 fbeb 	bl	8002304 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b38:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <SystemInit+0x28>)
 8000b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b3e:	4a07      	ldr	r2, [pc, #28]	; (8000b5c <SystemInit+0x28>)
 8000b40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b48:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <SystemInit+0x28>)
 8000b4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b4e:	609a      	str	r2, [r3, #8]
#endif
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b60:	480d      	ldr	r0, [pc, #52]	; (8000b98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b62:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b64:	480d      	ldr	r0, [pc, #52]	; (8000b9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b66:	490e      	ldr	r1, [pc, #56]	; (8000ba0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b68:	4a0e      	ldr	r2, [pc, #56]	; (8000ba4 <LoopForever+0xe>)
  movs r3, #0
 8000b6a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b6c:	e002      	b.n	8000b74 <LoopCopyDataInit>

08000b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b72:	3304      	adds	r3, #4

08000b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b78:	d3f9      	bcc.n	8000b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ba8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b7c:	4c0b      	ldr	r4, [pc, #44]	; (8000bac <LoopForever+0x16>)
  movs r3, #0
 8000b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b80:	e001      	b.n	8000b86 <LoopFillZerobss>

08000b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b84:	3204      	adds	r2, #4

08000b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b88:	d3fb      	bcc.n	8000b82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b8a:	f7ff ffd3 	bl	8000b34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b8e:	f004 f887 	bl	8004ca0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b92:	f7ff fd8f 	bl	80006b4 <main>

08000b96 <LoopForever>:

LoopForever:
    b LoopForever
 8000b96:	e7fe      	b.n	8000b96 <LoopForever>
  ldr   r0, =_estack
 8000b98:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba0:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000ba4:	08004d48 	.word	0x08004d48
  ldr r2, =_sbss
 8000ba8:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000bac:	200000d8 	.word	0x200000d8

08000bb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bb0:	e7fe      	b.n	8000bb0 <ADC1_2_IRQHandler>

08000bb2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b082      	sub	sp, #8
 8000bb6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bbc:	2003      	movs	r0, #3
 8000bbe:	f000 f95b 	bl	8000e78 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	f000 f80e 	bl	8000be4 <HAL_InitTick>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d002      	beq.n	8000bd4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	71fb      	strb	r3, [r7, #7]
 8000bd2:	e001      	b.n	8000bd8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bd4:	f7ff fec4 	bl	8000960 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bd8:	79fb      	ldrb	r3, [r7, #7]

}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bec:	2300      	movs	r3, #0
 8000bee:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000bf0:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <HAL_InitTick+0x68>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d022      	beq.n	8000c3e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000bf8:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <HAL_InitTick+0x6c>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <HAL_InitTick+0x68>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c04:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f000 f966 	bl	8000ede <HAL_SYSTICK_Config>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d10f      	bne.n	8000c38 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2b0f      	cmp	r3, #15
 8000c1c:	d809      	bhi.n	8000c32 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	6879      	ldr	r1, [r7, #4]
 8000c22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c26:	f000 f932 	bl	8000e8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c2a:	4a0a      	ldr	r2, [pc, #40]	; (8000c54 <HAL_InitTick+0x70>)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6013      	str	r3, [r2, #0]
 8000c30:	e007      	b.n	8000c42 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	73fb      	strb	r3, [r7, #15]
 8000c36:	e004      	b.n	8000c42 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	73fb      	strb	r3, [r7, #15]
 8000c3c:	e001      	b.n	8000c42 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000008 	.word	0x20000008
 8000c50:	20000000 	.word	0x20000000
 8000c54:	20000004 	.word	0x20000004

08000c58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c5c:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <HAL_IncTick+0x1c>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <HAL_IncTick+0x20>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4413      	add	r3, r2
 8000c66:	4a03      	ldr	r2, [pc, #12]	; (8000c74 <HAL_IncTick+0x1c>)
 8000c68:	6013      	str	r3, [r2, #0]
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	200000d4 	.word	0x200000d4
 8000c78:	20000008 	.word	0x20000008

08000c7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c80:	4b03      	ldr	r3, [pc, #12]	; (8000c90 <HAL_GetTick+0x14>)
 8000c82:	681b      	ldr	r3, [r3, #0]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	200000d4 	.word	0x200000d4

08000c94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c9c:	f7ff ffee 	bl	8000c7c <HAL_GetTick>
 8000ca0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000cac:	d004      	beq.n	8000cb8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cae:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <HAL_Delay+0x40>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	68fa      	ldr	r2, [r7, #12]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cb8:	bf00      	nop
 8000cba:	f7ff ffdf 	bl	8000c7c <HAL_GetTick>
 8000cbe:	4602      	mov	r2, r0
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	1ad3      	subs	r3, r2, r3
 8000cc4:	68fa      	ldr	r2, [r7, #12]
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d8f7      	bhi.n	8000cba <HAL_Delay+0x26>
  {
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3710      	adds	r7, #16
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000008 	.word	0x20000008

08000cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f003 0307 	and.w	r3, r3, #7
 8000ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__NVIC_SetPriorityGrouping+0x44>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d0a:	4a04      	ldr	r2, [pc, #16]	; (8000d1c <__NVIC_SetPriorityGrouping+0x44>)
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	60d3      	str	r3, [r2, #12]
}
 8000d10:	bf00      	nop
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d24:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <__NVIC_GetPriorityGrouping+0x18>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	0a1b      	lsrs	r3, r3, #8
 8000d2a:	f003 0307 	and.w	r3, r3, #7
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	db0b      	blt.n	8000d66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	f003 021f 	and.w	r2, r3, #31
 8000d54:	4907      	ldr	r1, [pc, #28]	; (8000d74 <__NVIC_EnableIRQ+0x38>)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	095b      	lsrs	r3, r3, #5
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000e100 	.word	0xe000e100

08000d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	6039      	str	r1, [r7, #0]
 8000d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	db0a      	blt.n	8000da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	490c      	ldr	r1, [pc, #48]	; (8000dc4 <__NVIC_SetPriority+0x4c>)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	0112      	lsls	r2, r2, #4
 8000d98:	b2d2      	uxtb	r2, r2
 8000d9a:	440b      	add	r3, r1
 8000d9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da0:	e00a      	b.n	8000db8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	4908      	ldr	r1, [pc, #32]	; (8000dc8 <__NVIC_SetPriority+0x50>)
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	f003 030f 	and.w	r3, r3, #15
 8000dae:	3b04      	subs	r3, #4
 8000db0:	0112      	lsls	r2, r2, #4
 8000db2:	b2d2      	uxtb	r2, r2
 8000db4:	440b      	add	r3, r1
 8000db6:	761a      	strb	r2, [r3, #24]
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000e100 	.word	0xe000e100
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b089      	sub	sp, #36	; 0x24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f003 0307 	and.w	r3, r3, #7
 8000dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	f1c3 0307 	rsb	r3, r3, #7
 8000de6:	2b04      	cmp	r3, #4
 8000de8:	bf28      	it	cs
 8000dea:	2304      	movcs	r3, #4
 8000dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	3304      	adds	r3, #4
 8000df2:	2b06      	cmp	r3, #6
 8000df4:	d902      	bls.n	8000dfc <NVIC_EncodePriority+0x30>
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	3b03      	subs	r3, #3
 8000dfa:	e000      	b.n	8000dfe <NVIC_EncodePriority+0x32>
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	43da      	mvns	r2, r3
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	401a      	ands	r2, r3
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1e:	43d9      	mvns	r1, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e24:	4313      	orrs	r3, r2
         );
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3724      	adds	r7, #36	; 0x24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
	...

08000e34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e44:	d301      	bcc.n	8000e4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e46:	2301      	movs	r3, #1
 8000e48:	e00f      	b.n	8000e6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e4a:	4a0a      	ldr	r2, [pc, #40]	; (8000e74 <SysTick_Config+0x40>)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e52:	210f      	movs	r1, #15
 8000e54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e58:	f7ff ff8e 	bl	8000d78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e5c:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <SysTick_Config+0x40>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e62:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <SysTick_Config+0x40>)
 8000e64:	2207      	movs	r2, #7
 8000e66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	e000e010 	.word	0xe000e010

08000e78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f7ff ff29 	bl	8000cd8 <__NVIC_SetPriorityGrouping>
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b086      	sub	sp, #24
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	4603      	mov	r3, r0
 8000e96:	60b9      	str	r1, [r7, #8]
 8000e98:	607a      	str	r2, [r7, #4]
 8000e9a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e9c:	f7ff ff40 	bl	8000d20 <__NVIC_GetPriorityGrouping>
 8000ea0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	68b9      	ldr	r1, [r7, #8]
 8000ea6:	6978      	ldr	r0, [r7, #20]
 8000ea8:	f7ff ff90 	bl	8000dcc <NVIC_EncodePriority>
 8000eac:	4602      	mov	r2, r0
 8000eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb2:	4611      	mov	r1, r2
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff5f 	bl	8000d78 <__NVIC_SetPriority>
}
 8000eba:	bf00      	nop
 8000ebc:	3718      	adds	r7, #24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	4603      	mov	r3, r0
 8000eca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff ff33 	bl	8000d3c <__NVIC_EnableIRQ>
}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff ffa4 	bl	8000e34 <SysTick_Config>
 8000eec:	4603      	mov	r3, r0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000f0a:	4b24      	ldr	r3, [pc, #144]	; (8000f9c <HAL_FLASH_Program+0xa4>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d101      	bne.n	8000f16 <HAL_FLASH_Program+0x1e>
 8000f12:	2302      	movs	r3, #2
 8000f14:	e03e      	b.n	8000f94 <HAL_FLASH_Program+0x9c>
 8000f16:	4b21      	ldr	r3, [pc, #132]	; (8000f9c <HAL_FLASH_Program+0xa4>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f20:	f000 f8d0 	bl	80010c4 <FLASH_WaitForLastOperation>
 8000f24:	4603      	mov	r3, r0
 8000f26:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8000f28:	7dfb      	ldrb	r3, [r7, #23]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d12e      	bne.n	8000f8c <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000f2e:	4b1b      	ldr	r3, [pc, #108]	; (8000f9c <HAL_FLASH_Program+0xa4>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d107      	bne.n	8000f4a <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8000f3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f3e:	68b8      	ldr	r0, [r7, #8]
 8000f40:	f000 f914 	bl	800116c <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8000f44:	2301      	movs	r3, #1
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	e010      	b.n	8000f6c <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d002      	beq.n	8000f56 <HAL_FLASH_Program+0x5e>
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d10a      	bne.n	8000f6c <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	68b8      	ldr	r0, [r7, #8]
 8000f5c:	f000 f92a 	bl	80011b4 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d102      	bne.n	8000f6c <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 8000f66:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000f6a:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f70:	f000 f8a8 	bl	80010c4 <FLASH_WaitForLastOperation>
 8000f74:	4603      	mov	r3, r0
 8000f76:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d006      	beq.n	8000f8c <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8000f7e:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <HAL_FLASH_Program+0xa8>)
 8000f80:	695a      	ldr	r2, [r3, #20]
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	43db      	mvns	r3, r3
 8000f86:	4906      	ldr	r1, [pc, #24]	; (8000fa0 <HAL_FLASH_Program+0xa8>)
 8000f88:	4013      	ands	r3, r2
 8000f8a:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000f8c:	4b03      	ldr	r3, [pc, #12]	; (8000f9c <HAL_FLASH_Program+0xa4>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8000f92:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3718      	adds	r7, #24
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	2000000c 	.word	0x2000000c
 8000fa0:	40022000 	.word	0x40022000

08000fa4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000faa:	2300      	movs	r3, #0
 8000fac:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8000fae:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <HAL_FLASH_Unlock+0x38>)
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	da0b      	bge.n	8000fce <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000fb6:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <HAL_FLASH_Unlock+0x38>)
 8000fb8:	4a09      	ldr	r2, [pc, #36]	; (8000fe0 <HAL_FLASH_Unlock+0x3c>)
 8000fba:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000fbc:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <HAL_FLASH_Unlock+0x38>)
 8000fbe:	4a09      	ldr	r2, [pc, #36]	; (8000fe4 <HAL_FLASH_Unlock+0x40>)
 8000fc0:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8000fc2:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <HAL_FLASH_Unlock+0x38>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	da01      	bge.n	8000fce <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8000fce:	79fb      	ldrb	r3, [r7, #7]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	40022000 	.word	0x40022000
 8000fe0:	45670123 	.word	0x45670123
 8000fe4:	cdef89ab 	.word	0xcdef89ab

08000fe8 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000ff2:	4b09      	ldr	r3, [pc, #36]	; (8001018 <HAL_FLASH_Lock+0x30>)
 8000ff4:	695b      	ldr	r3, [r3, #20]
 8000ff6:	4a08      	ldr	r2, [pc, #32]	; (8001018 <HAL_FLASH_Lock+0x30>)
 8000ff8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ffc:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_FLASH_Lock+0x30>)
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	2b00      	cmp	r3, #0
 8001004:	da01      	bge.n	800100a <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8001006:	2300      	movs	r3, #0
 8001008:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800100a:	79fb      	ldrb	r3, [r7, #7]
}
 800100c:	4618      	mov	r0, r3
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	40022000 	.word	0x40022000

0800101c <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001022:	2300      	movs	r3, #0
 8001024:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 8001026:	4b0d      	ldr	r3, [pc, #52]	; (800105c <HAL_FLASH_OB_Unlock+0x40>)
 8001028:	695b      	ldr	r3, [r3, #20]
 800102a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d00d      	beq.n	800104e <HAL_FLASH_OB_Unlock+0x32>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8001032:	4b0a      	ldr	r3, [pc, #40]	; (800105c <HAL_FLASH_OB_Unlock+0x40>)
 8001034:	4a0a      	ldr	r2, [pc, #40]	; (8001060 <HAL_FLASH_OB_Unlock+0x44>)
 8001036:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8001038:	4b08      	ldr	r3, [pc, #32]	; (800105c <HAL_FLASH_OB_Unlock+0x40>)
 800103a:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <HAL_FLASH_OB_Unlock+0x48>)
 800103c:	60da      	str	r2, [r3, #12]

    /* verify option bytes are unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 800103e:	4b07      	ldr	r3, [pc, #28]	; (800105c <HAL_FLASH_OB_Unlock+0x40>)
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <HAL_FLASH_OB_Unlock+0x32>
    {
      status = HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800104e:	79fb      	ldrb	r3, [r7, #7]
}
 8001050:	4618      	mov	r0, r3
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	40022000 	.word	0x40022000
 8001060:	08192a3b 	.word	0x08192a3b
 8001064:	4c5d6e7f 	.word	0x4c5d6e7f

08001068 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Bytes Registers access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	71fb      	strb	r3, [r7, #7]

  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 8001072:	4b0a      	ldr	r3, [pc, #40]	; (800109c <HAL_FLASH_OB_Lock+0x34>)
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	4a09      	ldr	r2, [pc, #36]	; (800109c <HAL_FLASH_OB_Lock+0x34>)
 8001078:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800107c:	6153      	str	r3, [r2, #20]

  /* Verify option bytes are locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 800107e:	4b07      	ldr	r3, [pc, #28]	; (800109c <HAL_FLASH_OB_Lock+0x34>)
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <HAL_FLASH_OB_Lock+0x26>
  {
    status = HAL_OK;
 800108a:	2300      	movs	r3, #0
 800108c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800108e:	79fb      	ldrb	r3, [r7, #7]
}
 8001090:	4618      	mov	r0, r3
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	40022000 	.word	0x40022000

080010a0 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* Set the bit to force the option byte reloading */
  SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <HAL_FLASH_OB_Launch+0x20>)
 80010a6:	695b      	ldr	r3, [r3, #20]
 80010a8:	4a05      	ldr	r2, [pc, #20]	; (80010c0 <HAL_FLASH_OB_Launch+0x20>)
 80010aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80010ae:	6153      	str	r3, [r2, #20]

  /* Wait for last operation to be completed */
  return (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE));
 80010b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010b4:	f000 f806 	bl	80010c4 <FLASH_WaitForLastOperation>
 80010b8:	4603      	mov	r3, r0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40022000 	.word	0x40022000

080010c4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80010cc:	f7ff fdd6 	bl	8000c7c <HAL_GetTick>
 80010d0:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80010d2:	e009      	b.n	80010e8 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 80010d4:	f7ff fdd2 	bl	8000c7c <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d201      	bcs.n	80010e8 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80010e4:	2303      	movs	r3, #3
 80010e6:	e038      	b.n	800115a <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80010e8:	4b1e      	ldr	r3, [pc, #120]	; (8001164 <FLASH_WaitForLastOperation+0xa0>)
 80010ea:	691b      	ldr	r3, [r3, #16]
 80010ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010f4:	d0ee      	beq.n	80010d4 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80010f6:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <FLASH_WaitForLastOperation+0xa0>)
 80010f8:	691a      	ldr	r2, [r3, #16]
 80010fa:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80010fe:	4013      	ands	r3, r2
 8001100:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d01e      	beq.n	8001146 <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8001108:	4b17      	ldr	r3, [pc, #92]	; (8001168 <FLASH_WaitForLastOperation+0xa4>)
 800110a:	685a      	ldr	r2, [r3, #4]
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	4313      	orrs	r3, r2
 8001110:	4a15      	ldr	r2, [pc, #84]	; (8001168 <FLASH_WaitForLastOperation+0xa4>)
 8001112:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d007      	beq.n	800112e <FLASH_WaitForLastOperation+0x6a>
 800111e:	4b11      	ldr	r3, [pc, #68]	; (8001164 <FLASH_WaitForLastOperation+0xa0>)
 8001120:	699a      	ldr	r2, [r3, #24]
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001128:	490e      	ldr	r1, [pc, #56]	; (8001164 <FLASH_WaitForLastOperation+0xa0>)
 800112a:	4313      	orrs	r3, r2
 800112c:	618b      	str	r3, [r1, #24]
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d004      	beq.n	8001142 <FLASH_WaitForLastOperation+0x7e>
 8001138:	4a0a      	ldr	r2, [pc, #40]	; (8001164 <FLASH_WaitForLastOperation+0xa0>)
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001140:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e009      	b.n	800115a <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001146:	4b07      	ldr	r3, [pc, #28]	; (8001164 <FLASH_WaitForLastOperation+0xa0>)
 8001148:	691b      	ldr	r3, [r3, #16]
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	2b01      	cmp	r3, #1
 8001150:	d102      	bne.n	8001158 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001152:	4b04      	ldr	r3, [pc, #16]	; (8001164 <FLASH_WaitForLastOperation+0xa0>)
 8001154:	2201      	movs	r2, #1
 8001156:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40022000 	.word	0x40022000
 8001168:	2000000c 	.word	0x2000000c

0800116c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800116c:	b490      	push	{r4, r7}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001178:	4b0d      	ldr	r3, [pc, #52]	; (80011b0 <FLASH_Program_DoubleWord+0x44>)
 800117a:	695b      	ldr	r3, [r3, #20]
 800117c:	4a0c      	ldr	r2, [pc, #48]	; (80011b0 <FLASH_Program_DoubleWord+0x44>)
 800117e:	f043 0301 	orr.w	r3, r3, #1
 8001182:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	683a      	ldr	r2, [r7, #0]
 8001188:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800118a:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800118e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001192:	f04f 0300 	mov.w	r3, #0
 8001196:	f04f 0400 	mov.w	r4, #0
 800119a:	0013      	movs	r3, r2
 800119c:	2400      	movs	r4, #0
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	3204      	adds	r2, #4
 80011a2:	6013      	str	r3, [r2, #0]
}
 80011a4:	bf00      	nop
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc90      	pop	{r4, r7}
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40022000 	.word	0x40022000

080011b4 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b089      	sub	sp, #36	; 0x24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80011be:	2340      	movs	r3, #64	; 0x40
 80011c0:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80011ca:	4b13      	ldr	r3, [pc, #76]	; (8001218 <FLASH_Program_Fast+0x64>)
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	4a12      	ldr	r2, [pc, #72]	; (8001218 <FLASH_Program_Fast+0x64>)
 80011d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011d4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80011d6:	f3ef 8310 	mrs	r3, PRIMASK
 80011da:	60fb      	str	r3, [r7, #12]
  return(result);
 80011dc:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80011de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80011e0:	b672      	cpsid	i
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	3304      	adds	r3, #4
 80011ee:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	3304      	adds	r3, #4
 80011f4:	617b      	str	r3, [r7, #20]
    row_index--;
 80011f6:	7ffb      	ldrb	r3, [r7, #31]
 80011f8:	3b01      	subs	r3, #1
 80011fa:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 80011fc:	7ffb      	ldrb	r3, [r7, #31]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1ef      	bne.n	80011e2 <FLASH_Program_Fast+0x2e>
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	f383 8810 	msr	PRIMASK, r3

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 800120c:	bf00      	nop
 800120e:	3724      	adds	r7, #36	; 0x24
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	40022000 	.word	0x40022000

0800121c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001226:	4b4c      	ldr	r3, [pc, #304]	; (8001358 <HAL_FLASHEx_Erase+0x13c>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d101      	bne.n	8001232 <HAL_FLASHEx_Erase+0x16>
 800122e:	2302      	movs	r3, #2
 8001230:	e08d      	b.n	800134e <HAL_FLASHEx_Erase+0x132>
 8001232:	4b49      	ldr	r3, [pc, #292]	; (8001358 <HAL_FLASHEx_Erase+0x13c>)
 8001234:	2201      	movs	r2, #1
 8001236:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001238:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800123c:	f7ff ff42 	bl	80010c4 <FLASH_WaitForLastOperation>
 8001240:	4603      	mov	r3, r0
 8001242:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001244:	7bfb      	ldrb	r3, [r7, #15]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d17d      	bne.n	8001346 <HAL_FLASHEx_Erase+0x12a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800124a:	4b43      	ldr	r3, [pc, #268]	; (8001358 <HAL_FLASHEx_Erase+0x13c>)
 800124c:	2200      	movs	r2, #0
 800124e:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8001250:	4b42      	ldr	r3, [pc, #264]	; (800135c <HAL_FLASHEx_Erase+0x140>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001258:	2b00      	cmp	r3, #0
 800125a:	d019      	beq.n	8001290 <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800125c:	4b3f      	ldr	r3, [pc, #252]	; (800135c <HAL_FLASHEx_Erase+0x140>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a3e      	ldr	r2, [pc, #248]	; (800135c <HAL_FLASHEx_Erase+0x140>)
 8001262:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001266:	6013      	str	r3, [r2, #0]

      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001268:	4b3c      	ldr	r3, [pc, #240]	; (800135c <HAL_FLASHEx_Erase+0x140>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001270:	2b00      	cmp	r3, #0
 8001272:	d009      	beq.n	8001288 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8001274:	4b39      	ldr	r3, [pc, #228]	; (800135c <HAL_FLASHEx_Erase+0x140>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a38      	ldr	r2, [pc, #224]	; (800135c <HAL_FLASHEx_Erase+0x140>)
 800127a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800127e:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8001280:	4b35      	ldr	r3, [pc, #212]	; (8001358 <HAL_FLASHEx_Erase+0x13c>)
 8001282:	2203      	movs	r2, #3
 8001284:	771a      	strb	r2, [r3, #28]
 8001286:	e016      	b.n	80012b6 <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8001288:	4b33      	ldr	r3, [pc, #204]	; (8001358 <HAL_FLASHEx_Erase+0x13c>)
 800128a:	2201      	movs	r2, #1
 800128c:	771a      	strb	r2, [r3, #28]
 800128e:	e012      	b.n	80012b6 <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001290:	4b32      	ldr	r3, [pc, #200]	; (800135c <HAL_FLASHEx_Erase+0x140>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001298:	2b00      	cmp	r3, #0
 800129a:	d009      	beq.n	80012b0 <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800129c:	4b2f      	ldr	r3, [pc, #188]	; (800135c <HAL_FLASHEx_Erase+0x140>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a2e      	ldr	r2, [pc, #184]	; (800135c <HAL_FLASHEx_Erase+0x140>)
 80012a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80012a6:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80012a8:	4b2b      	ldr	r3, [pc, #172]	; (8001358 <HAL_FLASHEx_Erase+0x13c>)
 80012aa:	2202      	movs	r2, #2
 80012ac:	771a      	strb	r2, [r3, #28]
 80012ae:	e002      	b.n	80012b6 <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80012b0:	4b29      	ldr	r3, [pc, #164]	; (8001358 <HAL_FLASHEx_Erase+0x13c>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d113      	bne.n	80012e6 <HAL_FLASHEx_Erase+0xca>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f000 f94c 	bl	8001560 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80012c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012cc:	f7ff fefa 	bl	80010c4 <FLASH_WaitForLastOperation>
 80012d0:	4603      	mov	r3, r0
 80012d2:	73fb      	strb	r3, [r7, #15]

#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 80012d4:	4b21      	ldr	r3, [pc, #132]	; (800135c <HAL_FLASHEx_Erase+0x140>)
 80012d6:	695b      	ldr	r3, [r3, #20]
 80012d8:	4a20      	ldr	r2, [pc, #128]	; (800135c <HAL_FLASHEx_Erase+0x140>)
 80012da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80012de:	f023 0304 	bic.w	r3, r3, #4
 80012e2:	6153      	str	r3, [r2, #20]
 80012e4:	e02d      	b.n	8001342 <HAL_FLASHEx_Erase+0x126>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012ec:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	e01d      	b.n	8001332 <HAL_FLASHEx_Erase+0x116>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	4619      	mov	r1, r3
 80012fc:	68b8      	ldr	r0, [r7, #8]
 80012fe:	f000 f967 	bl	80015d0 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001302:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001306:	f7ff fedd 	bl	80010c4 <FLASH_WaitForLastOperation>
 800130a:	4603      	mov	r3, r0
 800130c:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800130e:	4b13      	ldr	r3, [pc, #76]	; (800135c <HAL_FLASHEx_Erase+0x140>)
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	4a12      	ldr	r2, [pc, #72]	; (800135c <HAL_FLASHEx_Erase+0x140>)
 8001314:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8001318:	f023 0302 	bic.w	r3, r3, #2
 800131c:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800131e:	7bfb      	ldrb	r3, [r7, #15]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <HAL_FLASHEx_Erase+0x110>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	68ba      	ldr	r2, [r7, #8]
 8001328:	601a      	str	r2, [r3, #0]
          break;
 800132a:	e00a      	b.n	8001342 <HAL_FLASHEx_Erase+0x126>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	3301      	adds	r3, #1
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	689a      	ldr	r2, [r3, #8]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	4413      	add	r3, r2
 800133c:	68ba      	ldr	r2, [r7, #8]
 800133e:	429a      	cmp	r2, r3
 8001340:	d3d9      	bcc.n	80012f6 <HAL_FLASHEx_Erase+0xda>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001342:	f000 f989 	bl	8001658 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001346:	4b04      	ldr	r3, [pc, #16]	; (8001358 <HAL_FLASHEx_Erase+0x13c>)
 8001348:	2200      	movs	r2, #0
 800134a:	701a      	strb	r2, [r3, #0]

  return status;
 800134c:	7bfb      	ldrb	r3, [r7, #15]
}
 800134e:	4618      	mov	r0, r3
 8001350:	3710      	adds	r7, #16
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	2000000c 	.word	0x2000000c
 800135c:	40022000 	.word	0x40022000

08001360 <HAL_FLASHEx_OBProgram>:
  *         - after an option bytes launch through the call of HAL_FLASH_OB_Launch()
  *         - after a power reset (BOR reset or exit from Standby/Shutdown modes)
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001368:	2300      	movs	r3, #0
 800136a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800136c:	4b43      	ldr	r3, [pc, #268]	; (800147c <HAL_FLASHEx_OBProgram+0x11c>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d101      	bne.n	8001378 <HAL_FLASHEx_OBProgram+0x18>
 8001374:	2302      	movs	r3, #2
 8001376:	e07d      	b.n	8001474 <HAL_FLASHEx_OBProgram+0x114>
 8001378:	4b40      	ldr	r3, [pc, #256]	; (800147c <HAL_FLASHEx_OBProgram+0x11c>)
 800137a:	2201      	movs	r2, #1
 800137c:	701a      	strb	r2, [r3, #0]

  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800137e:	4b3f      	ldr	r3, [pc, #252]	; (800147c <HAL_FLASHEx_OBProgram+0x11c>)
 8001380:	2200      	movs	r2, #0
 8001382:	605a      	str	r2, [r3, #4]

  /* Write protection configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_WRP) != 0U)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	2b00      	cmp	r3, #0
 800138e:	d00d      	beq.n	80013ac <HAL_FLASHEx_OBProgram+0x4c>
  {
    /* Configure of Write protection on the selected area */
    if (FLASH_OB_WRPConfig(pOBInit->WRPArea, pOBInit->WRPStartOffset, pOBInit->WRPEndOffset) != HAL_OK)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6858      	ldr	r0, [r3, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6899      	ldr	r1, [r3, #8]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	461a      	mov	r2, r3
 800139e:	f000 f99f 	bl	80016e0 <FLASH_OB_WRPConfig>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <HAL_FLASHEx_OBProgram+0x4c>
    {
      status = HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Read protection configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d009      	beq.n	80013cc <HAL_FLASHEx_OBProgram+0x6c>
  {
    /* Configure the Read protection level */
    if (FLASH_OB_RDPConfig(pOBInit->RDPLevel) != HAL_OK)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	691b      	ldr	r3, [r3, #16]
 80013bc:	4618      	mov	r0, r3
 80013be:	f000 f9d9 	bl	8001774 <FLASH_OB_RDPConfig>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <HAL_FLASHEx_OBProgram+0x6c>
    {
      status = HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* User Configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0304 	and.w	r3, r3, #4
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d00c      	beq.n	80013f2 <HAL_FLASHEx_OBProgram+0x92>
  {
    /* Configure the user option bytes */
    if (FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig) != HAL_OK)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	695a      	ldr	r2, [r3, #20]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	4619      	mov	r1, r3
 80013e2:	4610      	mov	r0, r2
 80013e4:	f000 f9ee 	bl	80017c4 <FLASH_OB_UserConfig>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <HAL_FLASHEx_OBProgram+0x92>
    {
      status = HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* PCROP Configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0U)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0308 	and.w	r3, r3, #8
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d013      	beq.n	8001426 <HAL_FLASHEx_OBProgram+0xc6>
  {
    if (pOBInit->PCROPStartAddr != pOBInit->PCROPEndAddr)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a1a      	ldr	r2, [r3, #32]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001406:	429a      	cmp	r2, r3
 8001408:	d00d      	beq.n	8001426 <HAL_FLASHEx_OBProgram+0xc6>
    {
      /* Configure the Proprietary code readout protection */
      if (FLASH_OB_PCROPConfig(pOBInit->PCROPConfig, pOBInit->PCROPStartAddr, pOBInit->PCROPEndAddr) != HAL_OK)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69d8      	ldr	r0, [r3, #28]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a19      	ldr	r1, [r3, #32]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001416:	461a      	mov	r2, r3
 8001418:	f000 faf4 	bl	8001a04 <FLASH_OB_PCROPConfig>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <HAL_FLASHEx_OBProgram+0xc6>
      {
        status = HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  /* Securable memory Configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_SEC) != 0U)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0320 	and.w	r3, r3, #32
 800142e:	2b00      	cmp	r3, #0
 8001430:	d00c      	beq.n	800144c <HAL_FLASHEx_OBProgram+0xec>
  {
    /* Configure the securable memory area */
    if (FLASH_OB_SecMemConfig(pOBInit->SecBank, pOBInit->SecSize) != HAL_OK)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4619      	mov	r1, r3
 800143c:	4610      	mov	r0, r2
 800143e:	f000 fbdb 	bl	8001bf8 <FLASH_OB_SecMemConfig>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <HAL_FLASHEx_OBProgram+0xec>
    {
      status = HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Boot Entry Point Configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_BOOT_LOCK) != 0U)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0310 	and.w	r3, r3, #16
 8001454:	2b00      	cmp	r3, #0
 8001456:	d009      	beq.n	800146c <HAL_FLASHEx_OBProgram+0x10c>
  {
    /* Configure the boot unique entry point option */
    if (FLASH_OB_BootLockConfig(pOBInit->BootEntryPoint) != HAL_OK)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145c:	4618      	mov	r0, r3
 800145e:	f000 fc03 	bl	8001c68 <FLASH_OB_BootLockConfig>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <HAL_FLASHEx_OBProgram+0x10c>
    {
      status = HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800146c:	4b03      	ldr	r3, [pc, #12]	; (800147c <HAL_FLASHEx_OBProgram+0x11c>)
 800146e:	2200      	movs	r2, #0
 8001470:	701a      	strb	r2, [r3, #0]

  return status;
 8001472:	7bfb      	ldrb	r3, [r7, #15]
}
 8001474:	4618      	mov	r0, r3
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	2000000c 	.word	0x2000000c

08001480 <HAL_FLASHEx_OBGetConfig>:
  * @note   The fields pOBInit->WRPArea and pOBInit->PCROPConfig should indicate
  *         which area is requested for the WRP and PCROP, else no information will be returned.
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = (OPTIONBYTE_RDP | OPTIONBYTE_USER);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2206      	movs	r2, #6
 800148c:	601a      	str	r2, [r3, #0]

#if defined (FLASH_OPTR_DBANK)
  if ((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d00b      	beq.n	80014ae <HAL_FLASHEx_OBGetConfig+0x2e>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d007      	beq.n	80014ae <HAL_FLASHEx_OBGetConfig+0x2e>
      (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
  if ((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d003      	beq.n	80014ae <HAL_FLASHEx_OBGetConfig+0x2e>
      (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	2b04      	cmp	r3, #4
 80014ac:	d10f      	bne.n	80014ce <HAL_FLASHEx_OBGetConfig+0x4e>
#else
  if ((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB))
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_WRP;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f043 0201 	orr.w	r2, r3, #1
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	601a      	str	r2, [r3, #0]
    /* Get write protection on the selected area */
    FLASH_OB_GetWRP(pOBInit->WRPArea, &(pOBInit->WRPStartOffset), &(pOBInit->WRPEndOffset));
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6858      	ldr	r0, [r3, #4]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f103 0108 	add.w	r1, r3, #8
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	330c      	adds	r3, #12
 80014c8:	461a      	mov	r2, r3
 80014ca:	f000 fc21 	bl	8001d10 <FLASH_OB_GetWRP>
  }

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 80014ce:	f000 fc71 	bl	8001db4 <FLASH_OB_GetRDP>
 80014d2:	4602      	mov	r2, r0
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	611a      	str	r2, [r3, #16]

  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
 80014d8:	f000 fc84 	bl	8001de4 <FLASH_OB_GetUser>
 80014dc:	4602      	mov	r2, r0
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	619a      	str	r2, [r3, #24]

#if defined (FLASH_OPTR_DBANK)
  if ((pOBInit->PCROPConfig == FLASH_BANK_1) || (pOBInit->PCROPConfig == FLASH_BANK_2))
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	69db      	ldr	r3, [r3, #28]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d003      	beq.n	80014f2 <HAL_FLASHEx_OBGetConfig+0x72>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d110      	bne.n	8001514 <HAL_FLASHEx_OBGetConfig+0x94>
#else
  if (pOBInit->PCROPConfig == FLASH_BANK_1)
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_PCROP;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f043 0208 	orr.w	r2, r3, #8
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	601a      	str	r2, [r3, #0]
    /* Get the Proprietary code readout protection */
    FLASH_OB_GetPCROP(&(pOBInit->PCROPConfig), &(pOBInit->PCROPStartAddr), &(pOBInit->PCROPEndAddr));
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f103 001c 	add.w	r0, r3, #28
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f103 0120 	add.w	r1, r3, #32
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	3324      	adds	r3, #36	; 0x24
 800150e:	461a      	mov	r2, r3
 8001510:	f000 fc7c 	bl	8001e0c <FLASH_OB_GetPCROP>
  }

  pOBInit->OptionType |= OPTIONBYTE_BOOT_LOCK;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f043 0210 	orr.w	r2, r3, #16
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	601a      	str	r2, [r3, #0]

  /* Get the boot entry point */
  pOBInit->BootEntryPoint = FLASH_OB_GetBootLock();
 8001520:	f000 fbe8 	bl	8001cf4 <FLASH_OB_GetBootLock>
 8001524:	4602      	mov	r2, r0
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	629a      	str	r2, [r3, #40]	; 0x28

  /* Get the securable memory area configuration */
#if defined (FLASH_OPTR_DBANK)
  if ((pOBInit->SecBank == FLASH_BANK_1) || (pOBInit->SecBank == FLASH_BANK_2))
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800152e:	2b01      	cmp	r3, #1
 8001530:	d003      	beq.n	800153a <HAL_FLASHEx_OBGetConfig+0xba>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001536:	2b02      	cmp	r3, #2
 8001538:	d10d      	bne.n	8001556 <HAL_FLASHEx_OBGetConfig+0xd6>
#else
  if (pOBInit->SecBank == FLASH_BANK_1)
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_SEC;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f043 0220 	orr.w	r2, r3, #32
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	601a      	str	r2, [r3, #0]
    FLASH_OB_GetSecMem(pOBInit->SecBank, &(pOBInit->SecSize));
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	3330      	adds	r3, #48	; 0x30
 800154e:	4619      	mov	r1, r3
 8001550:	4610      	mov	r0, r2
 8001552:	f000 fbb1 	bl	8001cb8 <FLASH_OB_GetSecMem>
  }
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 8001568:	4b18      	ldr	r3, [pc, #96]	; (80015cc <FLASH_MassErase+0x6c>)
 800156a:	6a1b      	ldr	r3, [r3, #32]
 800156c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d016      	beq.n	80015a2 <FLASH_MassErase+0x42>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	2b00      	cmp	r3, #0
 800157c:	d005      	beq.n	800158a <FLASH_MassErase+0x2a>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800157e:	4b13      	ldr	r3, [pc, #76]	; (80015cc <FLASH_MassErase+0x6c>)
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	4a12      	ldr	r2, [pc, #72]	; (80015cc <FLASH_MassErase+0x6c>)
 8001584:	f043 0304 	orr.w	r3, r3, #4
 8001588:	6153      	str	r3, [r2, #20]
    }

#if defined (FLASH_OPTR_DBANK)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if ((Banks & FLASH_BANK_2) != 0U)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d00e      	beq.n	80015b2 <FLASH_MassErase+0x52>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8001594:	4b0d      	ldr	r3, [pc, #52]	; (80015cc <FLASH_MassErase+0x6c>)
 8001596:	695b      	ldr	r3, [r3, #20]
 8001598:	4a0c      	ldr	r2, [pc, #48]	; (80015cc <FLASH_MassErase+0x6c>)
 800159a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800159e:	6153      	str	r3, [r2, #20]
 80015a0:	e007      	b.n	80015b2 <FLASH_MassErase+0x52>
#endif
  }
#if defined (FLASH_OPTR_DBANK)
  else
  {
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 80015a2:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <FLASH_MassErase+0x6c>)
 80015a4:	695b      	ldr	r3, [r3, #20]
 80015a6:	4a09      	ldr	r2, [pc, #36]	; (80015cc <FLASH_MassErase+0x6c>)
 80015a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015ac:	f043 0304 	orr.w	r3, r3, #4
 80015b0:	6153      	str	r3, [r2, #20]
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80015b2:	4b06      	ldr	r3, [pc, #24]	; (80015cc <FLASH_MassErase+0x6c>)
 80015b4:	695b      	ldr	r3, [r3, #20]
 80015b6:	4a05      	ldr	r2, [pc, #20]	; (80015cc <FLASH_MassErase+0x6c>)
 80015b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015bc:	6153      	str	r3, [r2, #20]
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	40022000 	.word	0x40022000

080015d0 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 80015da:	4b1e      	ldr	r3, [pc, #120]	; (8001654 <FLASH_PageErase+0x84>)
 80015dc:	6a1b      	ldr	r3, [r3, #32]
 80015de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d106      	bne.n	80015f4 <FLASH_PageErase+0x24>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 80015e6:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <FLASH_PageErase+0x84>)
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	4a1a      	ldr	r2, [pc, #104]	; (8001654 <FLASH_PageErase+0x84>)
 80015ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80015f0:	6153      	str	r3, [r2, #20]
 80015f2:	e011      	b.n	8001618 <FLASH_PageErase+0x48>
  }
  else
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if ((Banks & FLASH_BANK_1) != 0U)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d006      	beq.n	800160c <FLASH_PageErase+0x3c>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 80015fe:	4b15      	ldr	r3, [pc, #84]	; (8001654 <FLASH_PageErase+0x84>)
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	4a14      	ldr	r2, [pc, #80]	; (8001654 <FLASH_PageErase+0x84>)
 8001604:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001608:	6153      	str	r3, [r2, #20]
 800160a:	e005      	b.n	8001618 <FLASH_PageErase+0x48>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 800160c:	4b11      	ldr	r3, [pc, #68]	; (8001654 <FLASH_PageErase+0x84>)
 800160e:	695b      	ldr	r3, [r3, #20]
 8001610:	4a10      	ldr	r2, [pc, #64]	; (8001654 <FLASH_PageErase+0x84>)
 8001612:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001616:	6153      	str	r3, [r2, #20]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8001618:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <FLASH_PageErase+0x84>)
 800161a:	695b      	ldr	r3, [r3, #20]
 800161c:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	00db      	lsls	r3, r3, #3
 8001624:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8001628:	490a      	ldr	r1, [pc, #40]	; (8001654 <FLASH_PageErase+0x84>)
 800162a:	4313      	orrs	r3, r2
 800162c:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800162e:	4b09      	ldr	r3, [pc, #36]	; (8001654 <FLASH_PageErase+0x84>)
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	4a08      	ldr	r2, [pc, #32]	; (8001654 <FLASH_PageErase+0x84>)
 8001634:	f043 0302 	orr.w	r3, r3, #2
 8001638:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800163a:	4b06      	ldr	r3, [pc, #24]	; (8001654 <FLASH_PageErase+0x84>)
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	4a05      	ldr	r2, [pc, #20]	; (8001654 <FLASH_PageErase+0x84>)
 8001640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001644:	6153      	str	r3, [r2, #20]
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	40022000 	.word	0x40022000

08001658 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800165e:	4b1e      	ldr	r3, [pc, #120]	; (80016d8 <FLASH_FlushCaches+0x80>)
 8001660:	7f1b      	ldrb	r3, [r3, #28]
 8001662:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d002      	beq.n	8001670 <FLASH_FlushCaches+0x18>
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	2b03      	cmp	r3, #3
 800166e:	d111      	bne.n	8001694 <FLASH_FlushCaches+0x3c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001670:	4b1a      	ldr	r3, [pc, #104]	; (80016dc <FLASH_FlushCaches+0x84>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a19      	ldr	r2, [pc, #100]	; (80016dc <FLASH_FlushCaches+0x84>)
 8001676:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800167a:	6013      	str	r3, [r2, #0]
 800167c:	4b17      	ldr	r3, [pc, #92]	; (80016dc <FLASH_FlushCaches+0x84>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a16      	ldr	r2, [pc, #88]	; (80016dc <FLASH_FlushCaches+0x84>)
 8001682:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001686:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001688:	4b14      	ldr	r3, [pc, #80]	; (80016dc <FLASH_FlushCaches+0x84>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a13      	ldr	r2, [pc, #76]	; (80016dc <FLASH_FlushCaches+0x84>)
 800168e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001692:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	2b02      	cmp	r3, #2
 8001698:	d002      	beq.n	80016a0 <FLASH_FlushCaches+0x48>
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	2b03      	cmp	r3, #3
 800169e:	d111      	bne.n	80016c4 <FLASH_FlushCaches+0x6c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80016a0:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <FLASH_FlushCaches+0x84>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a0d      	ldr	r2, [pc, #52]	; (80016dc <FLASH_FlushCaches+0x84>)
 80016a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016aa:	6013      	str	r3, [r2, #0]
 80016ac:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <FLASH_FlushCaches+0x84>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a0a      	ldr	r2, [pc, #40]	; (80016dc <FLASH_FlushCaches+0x84>)
 80016b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016b6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80016b8:	4b08      	ldr	r3, [pc, #32]	; (80016dc <FLASH_FlushCaches+0x84>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a07      	ldr	r2, [pc, #28]	; (80016dc <FLASH_FlushCaches+0x84>)
 80016be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016c2:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80016c4:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <FLASH_FlushCaches+0x80>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	771a      	strb	r2, [r3, #28]
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	2000000c 	.word	0x2000000c
 80016dc:	40022000 	.word	0x40022000

080016e0 <FLASH_OB_WRPConfig>:
  * @param  WRDPEndOffset specifies the end page of the write protected area.
  *         This parameter can be page number between WRPStartOffset and (max number of pages in the bank - 1).
  * @retval HAL_Status
  */
static HAL_StatusTypeDef FLASH_OB_WRPConfig(uint32_t WRPArea, uint32_t WRPStartOffset, uint32_t WRDPEndOffset)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_WRPAREA(WRPArea));
  assert_param(IS_FLASH_PAGE(WRPStartOffset));
  assert_param(IS_FLASH_PAGE(WRDPEndOffset));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80016ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016f0:	f7ff fce8 	bl	80010c4 <FLASH_WaitForLastOperation>
 80016f4:	4603      	mov	r3, r0
 80016f6:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80016f8:	7dfb      	ldrb	r3, [r7, #23]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d132      	bne.n	8001764 <FLASH_OB_WRPConfig+0x84>
  {
    /* Configure the write protected area */
    if (WRPArea == OB_WRPAREA_BANK1_AREAA)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d106      	bne.n	8001712 <FLASH_OB_WRPConfig+0x32>
    {
      FLASH->WRP1AR = ((WRDPEndOffset << FLASH_WRP1AR_WRP1A_END_Pos) | WRPStartOffset);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	041a      	lsls	r2, r3, #16
 8001708:	4919      	ldr	r1, [pc, #100]	; (8001770 <FLASH_OB_WRPConfig+0x90>)
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	4313      	orrs	r3, r2
 800170e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001710:	e01c      	b.n	800174c <FLASH_OB_WRPConfig+0x6c>
    }
    else if (WRPArea == OB_WRPAREA_BANK1_AREAB)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d106      	bne.n	8001726 <FLASH_OB_WRPConfig+0x46>
    {
      FLASH->WRP1BR = ((WRDPEndOffset << FLASH_WRP1BR_WRP1B_END_Pos) | WRPStartOffset);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	041a      	lsls	r2, r3, #16
 800171c:	4914      	ldr	r1, [pc, #80]	; (8001770 <FLASH_OB_WRPConfig+0x90>)
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	4313      	orrs	r3, r2
 8001722:	630b      	str	r3, [r1, #48]	; 0x30
 8001724:	e012      	b.n	800174c <FLASH_OB_WRPConfig+0x6c>
    }
#if defined (FLASH_OPTR_DBANK)
    else if (WRPArea == OB_WRPAREA_BANK2_AREAA)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2b02      	cmp	r3, #2
 800172a:	d106      	bne.n	800173a <FLASH_OB_WRPConfig+0x5a>
    {
      FLASH->WRP2AR = ((WRDPEndOffset << FLASH_WRP2AR_WRP2A_END_Pos) | WRPStartOffset);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	041a      	lsls	r2, r3, #16
 8001730:	490f      	ldr	r1, [pc, #60]	; (8001770 <FLASH_OB_WRPConfig+0x90>)
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	4313      	orrs	r3, r2
 8001736:	64cb      	str	r3, [r1, #76]	; 0x4c
 8001738:	e008      	b.n	800174c <FLASH_OB_WRPConfig+0x6c>
    }
    else if (WRPArea == OB_WRPAREA_BANK2_AREAB)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2b04      	cmp	r3, #4
 800173e:	d105      	bne.n	800174c <FLASH_OB_WRPConfig+0x6c>
    {
      FLASH->WRP2BR = ((WRDPEndOffset << FLASH_WRP2BR_WRP2B_END_Pos) | WRPStartOffset);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	041a      	lsls	r2, r3, #16
 8001744:	490a      	ldr	r1, [pc, #40]	; (8001770 <FLASH_OB_WRPConfig+0x90>)
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	4313      	orrs	r3, r2
 800174a:	650b      	str	r3, [r1, #80]	; 0x50
    {
      /* Nothing to do */
    }

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800174c:	4b08      	ldr	r3, [pc, #32]	; (8001770 <FLASH_OB_WRPConfig+0x90>)
 800174e:	695b      	ldr	r3, [r3, #20]
 8001750:	4a07      	ldr	r2, [pc, #28]	; (8001770 <FLASH_OB_WRPConfig+0x90>)
 8001752:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001756:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001758:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800175c:	f7ff fcb2 	bl	80010c4 <FLASH_WaitForLastOperation>
 8001760:	4603      	mov	r3, r0
 8001762:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001764:	7dfb      	ldrb	r3, [r7, #23]
}
 8001766:	4618      	mov	r0, r3
 8001768:	3718      	adds	r7, #24
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40022000 	.word	0x40022000

08001774 <FLASH_OB_RDPConfig>:
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  *
  * @retval HAL_Status
  */
static HAL_StatusTypeDef FLASH_OB_RDPConfig(uint32_t RDPLevel)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800177c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001780:	f7ff fca0 	bl	80010c4 <FLASH_WaitForLastOperation>
 8001784:	4603      	mov	r3, r0
 8001786:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001788:	7bfb      	ldrb	r3, [r7, #15]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d113      	bne.n	80017b6 <FLASH_OB_RDPConfig+0x42>
  {
    /* Configure the RDP level in the option bytes register */
    MODIFY_REG(FLASH->OPTR, FLASH_OPTR_RDP, RDPLevel);
 800178e:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <FLASH_OB_RDPConfig+0x4c>)
 8001790:	6a1b      	ldr	r3, [r3, #32]
 8001792:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8001796:	490a      	ldr	r1, [pc, #40]	; (80017c0 <FLASH_OB_RDPConfig+0x4c>)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4313      	orrs	r3, r2
 800179c:	620b      	str	r3, [r1, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800179e:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <FLASH_OB_RDPConfig+0x4c>)
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	4a07      	ldr	r2, [pc, #28]	; (80017c0 <FLASH_OB_RDPConfig+0x4c>)
 80017a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a8:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80017aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017ae:	f7ff fc89 	bl	80010c4 <FLASH_WaitForLastOperation>
 80017b2:	4603      	mov	r3, r0
 80017b4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80017b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3710      	adds	r7, #16
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40022000 	.word	0x40022000

080017c4 <FLASH_OB_UserConfig>:
  *         @ref FLASH_OB_USER_NRST_MODE, @ref FLASH_OB_USER_INTERNAL_RESET_HOLDER
  * @note   (*) availability depends on devices
  * @retval HAL_Status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint32_t UserType, uint32_t UserConfig)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  uint32_t optr_reg_val = 0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]
  uint32_t optr_reg_mask = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_OB_USER_TYPE(UserType));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80017d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017da:	f7ff fc73 	bl	80010c4 <FLASH_WaitForLastOperation>
 80017de:	4603      	mov	r3, r0
 80017e0:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f040 8105 	bne.w	80019f4 <FLASH_OB_UserConfig+0x230>
  {
    if ((UserType & OB_USER_BOR_LEV) != 0U)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d009      	beq.n	8001808 <FLASH_OB_UserConfig+0x44>
    {
      /* BOR level option byte should be modified */
      assert_param(IS_OB_USER_BOR_LEVEL(UserConfig & FLASH_OPTR_BOR_LEV));

      /* Set value and mask for BOR level option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BOR_LEV);
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80017fa:	697a      	ldr	r2, [r7, #20]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_BOR_LEV;
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001806:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_nRST_STOP) != 0U)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d009      	beq.n	8001826 <FLASH_OB_UserConfig+0x62>
    {
      /* nRST_STOP option byte should be modified */
      assert_param(IS_OB_USER_STOP(UserConfig & FLASH_OPTR_nRST_STOP));

      /* Set value and mask for nRST_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STOP);
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001818:	697a      	ldr	r2, [r7, #20]
 800181a:	4313      	orrs	r3, r2
 800181c:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_STOP;
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001824:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_nRST_STDBY) != 0U)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	2b00      	cmp	r3, #0
 800182e:	d009      	beq.n	8001844 <FLASH_OB_UserConfig+0x80>
    {
      /* nRST_STDBY option byte should be modified */
      assert_param(IS_OB_USER_STANDBY(UserConfig & FLASH_OPTR_nRST_STDBY));

      /* Set value and mask for nRST_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STDBY);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001836:	697a      	ldr	r2, [r7, #20]
 8001838:	4313      	orrs	r3, r2
 800183a:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_STDBY;
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001842:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_nRST_SHDW) != 0U)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d009      	beq.n	8001862 <FLASH_OB_UserConfig+0x9e>
    {
      /* nRST_SHDW option byte should be modified */
      assert_param(IS_OB_USER_SHUTDOWN(UserConfig & FLASH_OPTR_nRST_SHDW));

      /* Set value and mask for nRST_SHDW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_SHDW);
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	4313      	orrs	r3, r2
 8001858:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_SHDW;
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001860:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_IWDG_SW) != 0U)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f003 0308 	and.w	r3, r3, #8
 8001868:	2b00      	cmp	r3, #0
 800186a:	d009      	beq.n	8001880 <FLASH_OB_UserConfig+0xbc>
    {
      /* IWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_IWDG(UserConfig & FLASH_OPTR_IWDG_SW));

      /* Set value and mask for IWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_SW);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	4313      	orrs	r3, r2
 8001876:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_SW;
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800187e:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_IWDG_STOP) != 0U)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f003 0310 	and.w	r3, r3, #16
 8001886:	2b00      	cmp	r3, #0
 8001888:	d009      	beq.n	800189e <FLASH_OB_UserConfig+0xda>
    {
      /* IWDG_STOP option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STOP(UserConfig & FLASH_OPTR_IWDG_STOP));

      /* Set value and mask for IWDG_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STOP);
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	4313      	orrs	r3, r2
 8001894:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_STOP;
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800189c:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_IWDG_STDBY) != 0U)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f003 0320 	and.w	r3, r3, #32
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d009      	beq.n	80018bc <FLASH_OB_UserConfig+0xf8>
    {
      /* IWDG_STDBY option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STDBY(UserConfig & FLASH_OPTR_IWDG_STDBY));

      /* Set value and mask for IWDG_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STDBY);
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_STDBY;
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018ba:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_WWDG_SW) != 0U)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d009      	beq.n	80018da <FLASH_OB_UserConfig+0x116>
    {
      /* WWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_WWDG(UserConfig & FLASH_OPTR_WWDG_SW));

      /* Set value and mask for WWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_WWDG_SW);
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018cc:	697a      	ldr	r2, [r7, #20]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_WWDG_SW;
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80018d8:	613b      	str	r3, [r7, #16]
    }

#if defined (FLASH_OPTR_BFB2)
    if ((UserType & OB_USER_BFB2) != 0U)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d009      	beq.n	80018f8 <FLASH_OB_UserConfig+0x134>
    {
      /* BFB2 option byte should be modified */
      assert_param(IS_OB_USER_BFB2(UserConfig & FLASH_OPTR_BFB2));

      /* Set value and mask for BFB2 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BFB2);
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ea:	697a      	ldr	r2, [r7, #20]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_BFB2;
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80018f6:	613b      	str	r3, [r7, #16]
    }
#endif

    if ((UserType & OB_USER_nBOOT1) != 0U)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d009      	beq.n	8001916 <FLASH_OB_UserConfig+0x152>
    {
      /* nBOOT1 option byte should be modified */
      assert_param(IS_OB_USER_BOOT1(UserConfig & FLASH_OPTR_nBOOT1));

      /* Set value and mask for nBOOT1 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nBOOT1);
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001908:	697a      	ldr	r2, [r7, #20]
 800190a:	4313      	orrs	r3, r2
 800190c:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nBOOT1;
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001914:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_SRAM_PE) != 0U)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800191c:	2b00      	cmp	r3, #0
 800191e:	d009      	beq.n	8001934 <FLASH_OB_UserConfig+0x170>
    {
      /* SRAM_PE option byte should be modified */
      assert_param(IS_OB_USER_SRAM_PARITY(UserConfig & FLASH_OPTR_SRAM_PE));

      /* Set value and mask for SRAM_PE option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM_PE);
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001926:	697a      	ldr	r2, [r7, #20]
 8001928:	4313      	orrs	r3, r2
 800192a:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_SRAM_PE;
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001932:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_CCMSRAM_RST) != 0U)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800193a:	2b00      	cmp	r3, #0
 800193c:	d009      	beq.n	8001952 <FLASH_OB_UserConfig+0x18e>
    {
      /* CCMSRAM_RST option byte should be modified */
      assert_param(IS_OB_USER_CCMSRAM_RST(UserConfig & FLASH_OPTR_CCMSRAM_RST));

      /* Set value and mask for CCMSRAM_RST option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_CCMSRAM_RST);
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001944:	697a      	ldr	r2, [r7, #20]
 8001946:	4313      	orrs	r3, r2
 8001948:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_CCMSRAM_RST;
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001950:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_nSWBOOT0) != 0U)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d009      	beq.n	8001970 <FLASH_OB_UserConfig+0x1ac>
    {
      /* nSWBOOT0 option byte should be modified */
      assert_param(IS_OB_USER_SWBOOT0(UserConfig & FLASH_OPTR_nSWBOOT0));

      /* Set value and mask for nSWBOOT0 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nSWBOOT0);
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001962:	697a      	ldr	r2, [r7, #20]
 8001964:	4313      	orrs	r3, r2
 8001966:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nSWBOOT0;
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800196e:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_nBOOT0) != 0U)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d009      	beq.n	800198e <FLASH_OB_UserConfig+0x1ca>
    {
      /* nBOOT0 option byte should be modified */
      assert_param(IS_OB_USER_BOOT0(UserConfig & FLASH_OPTR_nBOOT0));

      /* Set value and mask for nBOOT0 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nBOOT0);
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001980:	697a      	ldr	r2, [r7, #20]
 8001982:	4313      	orrs	r3, r2
 8001984:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nBOOT0;
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800198c:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_NRST_MODE) != 0U)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d009      	beq.n	80019ac <FLASH_OB_UserConfig+0x1e8>
    {
      /* Reset Configuration option byte should be modified */
      assert_param(IS_OB_USER_NRST_MODE(UserConfig & FLASH_OPTR_NRST_MODE));

      /* Set value and mask for Reset Configuration option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_NRST_MODE);
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800199e:	697a      	ldr	r2, [r7, #20]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_NRST_MODE;
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 80019aa:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_IRHEN) != 0U)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d009      	beq.n	80019ca <FLASH_OB_UserConfig+0x206>
    {
      /* IRH option byte should be modified */
      assert_param(IS_OB_USER_IRHEN(UserConfig & FLASH_OPTR_IRHEN));

      /* Set value and mask for IRH option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IRHEN);
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80019bc:	697a      	ldr	r2, [r7, #20]
 80019be:	4313      	orrs	r3, r2
 80019c0:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IRHEN;
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80019c8:	613b      	str	r3, [r7, #16]
    }

    /* Configure the option bytes register */
    MODIFY_REG(FLASH->OPTR, optr_reg_mask, optr_reg_val);
 80019ca:	4b0d      	ldr	r3, [pc, #52]	; (8001a00 <FLASH_OB_UserConfig+0x23c>)
 80019cc:	6a1a      	ldr	r2, [r3, #32]
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	43db      	mvns	r3, r3
 80019d2:	401a      	ands	r2, r3
 80019d4:	490a      	ldr	r1, [pc, #40]	; (8001a00 <FLASH_OB_UserConfig+0x23c>)
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	4313      	orrs	r3, r2
 80019da:	620b      	str	r3, [r1, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 80019dc:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <FLASH_OB_UserConfig+0x23c>)
 80019de:	695b      	ldr	r3, [r3, #20]
 80019e0:	4a07      	ldr	r2, [pc, #28]	; (8001a00 <FLASH_OB_UserConfig+0x23c>)
 80019e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e6:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80019e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019ec:	f7ff fb6a 	bl	80010c4 <FLASH_WaitForLastOperation>
 80019f0:	4603      	mov	r3, r0
 80019f2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80019f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3718      	adds	r7, #24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40022000 	.word	0x40022000

08001a04 <FLASH_OB_PCROPConfig>:
  * @param  PCROPEndAddr specifies the end address of the Proprietary code readout protection.
  *         This parameter can be an address between PCROPStartAddr and end of the bank.
  * @retval HAL_Status
  */
static HAL_StatusTypeDef FLASH_OB_PCROPConfig(uint32_t PCROPConfig, uint32_t PCROPStartAddr, uint32_t PCROPEndAddr)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b088      	sub	sp, #32
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_PCROP_RDP(PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPStartAddr));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPEndAddr));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a14:	f7ff fb56 	bl	80010c4 <FLASH_WaitForLastOperation>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	77fb      	strb	r3, [r7, #31]

  if (status == HAL_OK)
 8001a1c:	7ffb      	ldrb	r3, [r7, #31]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f040 80da 	bne.w	8001bd8 <FLASH_OB_PCROPConfig+0x1d4>
  {
#if defined (FLASH_OPTR_DBANK)
    /* Get the information about the bank swapping */
    if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 8001a24:	4b6f      	ldr	r3, [pc, #444]	; (8001be4 <FLASH_OB_PCROPConfig+0x1e0>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d114      	bne.n	8001a5a <FLASH_OB_PCROPConfig+0x56>
    {
      bank1_addr = FLASH_BASE;
 8001a30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001a34:	61bb      	str	r3, [r7, #24]
      bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8001a36:	4b6c      	ldr	r3, [pc, #432]	; (8001be8 <FLASH_OB_PCROPConfig+0x1e4>)
 8001a38:	881b      	ldrh	r3, [r3, #0]
 8001a3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d008      	beq.n	8001a54 <FLASH_OB_PCROPConfig+0x50>
 8001a42:	4b69      	ldr	r3, [pc, #420]	; (8001be8 <FLASH_OB_PCROPConfig+0x1e4>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	029b      	lsls	r3, r3, #10
 8001a48:	085a      	lsrs	r2, r3, #1
 8001a4a:	4b68      	ldr	r3, [pc, #416]	; (8001bec <FLASH_OB_PCROPConfig+0x1e8>)
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001a52:	e000      	b.n	8001a56 <FLASH_OB_PCROPConfig+0x52>
 8001a54:	4b66      	ldr	r3, [pc, #408]	; (8001bf0 <FLASH_OB_PCROPConfig+0x1ec>)
 8001a56:	617b      	str	r3, [r7, #20]
 8001a58:	e013      	b.n	8001a82 <FLASH_OB_PCROPConfig+0x7e>
    }
    else
    {
      bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8001a5a:	4b63      	ldr	r3, [pc, #396]	; (8001be8 <FLASH_OB_PCROPConfig+0x1e4>)
 8001a5c:	881b      	ldrh	r3, [r3, #0]
 8001a5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d008      	beq.n	8001a78 <FLASH_OB_PCROPConfig+0x74>
 8001a66:	4b60      	ldr	r3, [pc, #384]	; (8001be8 <FLASH_OB_PCROPConfig+0x1e4>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	029b      	lsls	r3, r3, #10
 8001a6c:	085a      	lsrs	r2, r3, #1
 8001a6e:	4b5f      	ldr	r3, [pc, #380]	; (8001bec <FLASH_OB_PCROPConfig+0x1e8>)
 8001a70:	4013      	ands	r3, r2
 8001a72:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001a76:	e000      	b.n	8001a7a <FLASH_OB_PCROPConfig+0x76>
 8001a78:	4b5d      	ldr	r3, [pc, #372]	; (8001bf0 <FLASH_OB_PCROPConfig+0x1ec>)
 8001a7a:	61bb      	str	r3, [r7, #24]
      bank2_addr = FLASH_BASE;
 8001a7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001a80:	617b      	str	r3, [r7, #20]
#else
    bank1_addr = FLASH_BASE;
#endif

#if defined (FLASH_OPTR_DBANK)
    if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 8001a82:	4b5c      	ldr	r3, [pc, #368]	; (8001bf4 <FLASH_OB_PCROPConfig+0x1f0>)
 8001a84:	6a1b      	ldr	r3, [r3, #32]
 8001a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d147      	bne.n	8001b1e <FLASH_OB_PCROPConfig+0x11a>
    {
      /* Configure the Proprietary code readout protection */
      if ((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_1)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f003 0303 	and.w	r3, r3, #3
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d11e      	bne.n	8001ad6 <FLASH_OB_PCROPConfig+0xd2>
      {
        reg_value = ((PCROPStartAddr - FLASH_BASE) >> 4);
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001a9e:	091b      	lsrs	r3, r3, #4
 8001aa0:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1SR, FLASH_PCROP1SR_PCROP1_STRT, reg_value);
 8001aa2:	4b54      	ldr	r3, [pc, #336]	; (8001bf4 <FLASH_OB_PCROPConfig+0x1f0>)
 8001aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001aaa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001aae:	4951      	ldr	r1, [pc, #324]	; (8001bf4 <FLASH_OB_PCROPConfig+0x1f0>)
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	624b      	str	r3, [r1, #36]	; 0x24

        reg_value = ((PCROPEndAddr - FLASH_BASE) >> 4);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001abc:	091b      	lsrs	r3, r3, #4
 8001abe:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP1_END, reg_value);
 8001ac0:	4b4c      	ldr	r3, [pc, #304]	; (8001bf4 <FLASH_OB_PCROPConfig+0x1f0>)
 8001ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001ac8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001acc:	4949      	ldr	r1, [pc, #292]	; (8001bf4 <FLASH_OB_PCROPConfig+0x1f0>)
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	628b      	str	r3, [r1, #40]	; 0x28
 8001ad4:	e06a      	b.n	8001bac <FLASH_OB_PCROPConfig+0x1a8>
      }
      else if ((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_2)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f003 0303 	and.w	r3, r3, #3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d165      	bne.n	8001bac <FLASH_OB_PCROPConfig+0x1a8>
      {
        reg_value = ((PCROPStartAddr - FLASH_BASE) >> 4);
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001ae6:	091b      	lsrs	r3, r3, #4
 8001ae8:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2SR, FLASH_PCROP2SR_PCROP2_STRT, reg_value);
 8001aea:	4b42      	ldr	r3, [pc, #264]	; (8001bf4 <FLASH_OB_PCROPConfig+0x1f0>)
 8001aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aee:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001af2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001af6:	493f      	ldr	r1, [pc, #252]	; (8001bf4 <FLASH_OB_PCROPConfig+0x1f0>)
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	644b      	str	r3, [r1, #68]	; 0x44

        reg_value = ((PCROPEndAddr - FLASH_BASE) >> 4);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001b04:	091b      	lsrs	r3, r3, #4
 8001b06:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2ER, FLASH_PCROP2ER_PCROP2_END, reg_value);
 8001b08:	4b3a      	ldr	r3, [pc, #232]	; (8001bf4 <FLASH_OB_PCROPConfig+0x1f0>)
 8001b0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b0c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001b10:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001b14:	4937      	ldr	r1, [pc, #220]	; (8001bf4 <FLASH_OB_PCROPConfig+0x1f0>)
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	648b      	str	r3, [r1, #72]	; 0x48
 8001b1c:	e046      	b.n	8001bac <FLASH_OB_PCROPConfig+0x1a8>
    }
    else
#endif
    {
      /* Configure the Proprietary code readout protection */
      if ((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_1)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f003 0303 	and.w	r3, r3, #3
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d11e      	bne.n	8001b66 <FLASH_OB_PCROPConfig+0x162>
      {
        reg_value = ((PCROPStartAddr - bank1_addr) >> 3);
 8001b28:	68ba      	ldr	r2, [r7, #8]
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	08db      	lsrs	r3, r3, #3
 8001b30:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1SR, FLASH_PCROP1SR_PCROP1_STRT, reg_value);
 8001b32:	4b30      	ldr	r3, [pc, #192]	; (8001bf4 <FLASH_OB_PCROPConfig+0x1f0>)
 8001b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b36:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001b3a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001b3e:	492d      	ldr	r1, [pc, #180]	; (8001bf4 <FLASH_OB_PCROPConfig+0x1f0>)
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	624b      	str	r3, [r1, #36]	; 0x24

        reg_value = ((PCROPEndAddr - bank1_addr) >> 3);
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	08db      	lsrs	r3, r3, #3
 8001b4e:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP1_END, reg_value);
 8001b50:	4b28      	ldr	r3, [pc, #160]	; (8001bf4 <FLASH_OB_PCROPConfig+0x1f0>)
 8001b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b54:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001b58:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001b5c:	4925      	ldr	r1, [pc, #148]	; (8001bf4 <FLASH_OB_PCROPConfig+0x1f0>)
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	628b      	str	r3, [r1, #40]	; 0x28
 8001b64:	e022      	b.n	8001bac <FLASH_OB_PCROPConfig+0x1a8>
      }
#if defined (FLASH_OPTR_DBANK)
      else if ((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_2)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f003 0303 	and.w	r3, r3, #3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d11d      	bne.n	8001bac <FLASH_OB_PCROPConfig+0x1a8>
      {
        reg_value = ((PCROPStartAddr - bank2_addr) >> 3);
 8001b70:	68ba      	ldr	r2, [r7, #8]
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	08db      	lsrs	r3, r3, #3
 8001b78:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2SR, FLASH_PCROP2SR_PCROP2_STRT, reg_value);
 8001b7a:	4b1e      	ldr	r3, [pc, #120]	; (8001bf4 <FLASH_OB_PCROPConfig+0x1f0>)
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001b82:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001b86:	491b      	ldr	r1, [pc, #108]	; (8001bf4 <FLASH_OB_PCROPConfig+0x1f0>)
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	644b      	str	r3, [r1, #68]	; 0x44

        reg_value = ((PCROPEndAddr - bank2_addr) >> 3);
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	08db      	lsrs	r3, r3, #3
 8001b96:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2ER, FLASH_PCROP2ER_PCROP2_END, reg_value);
 8001b98:	4b16      	ldr	r3, [pc, #88]	; (8001bf4 <FLASH_OB_PCROPConfig+0x1f0>)
 8001b9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b9c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001ba0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001ba4:	4913      	ldr	r1, [pc, #76]	; (8001bf4 <FLASH_OB_PCROPConfig+0x1f0>)
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	648b      	str	r3, [r1, #72]	; 0x48
      {
        /* Nothing to do */
      }
    }

    MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP_RDP, (PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
 8001bac:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <FLASH_OB_PCROPConfig+0x1f0>)
 8001bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001bba:	490e      	ldr	r1, [pc, #56]	; (8001bf4 <FLASH_OB_PCROPConfig+0x1f0>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	628b      	str	r3, [r1, #40]	; 0x28

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <FLASH_OB_PCROPConfig+0x1f0>)
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	4a0b      	ldr	r2, [pc, #44]	; (8001bf4 <FLASH_OB_PCROPConfig+0x1f0>)
 8001bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bca:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001bcc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bd0:	f7ff fa78 	bl	80010c4 <FLASH_WaitForLastOperation>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	77fb      	strb	r3, [r7, #31]
  }

  return status;
 8001bd8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3720      	adds	r7, #32
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40010000 	.word	0x40010000
 8001be8:	1fff75e0 	.word	0x1fff75e0
 8001bec:	01fffe00 	.word	0x01fffe00
 8001bf0:	08040000 	.word	0x08040000
 8001bf4:	40022000 	.word	0x40022000

08001bf8 <FLASH_OB_SecMemConfig>:
  *         starting from first page of the bank.
  *         This parameter can be page number between 0 and (max number of pages in the bank - 1)
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_SecMemConfig(uint32_t SecBank, uint32_t SecSize)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK_EXCLUSIVE(SecBank));
  assert_param(IS_OB_SECMEM_SIZE(SecSize));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c06:	f7ff fa5d 	bl	80010c4 <FLASH_WaitForLastOperation>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001c0e:	7bfb      	ldrb	r3, [r7, #15]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d122      	bne.n	8001c5a <FLASH_OB_SecMemConfig+0x62>
  {
    /* Configure the write protected area */
    if (SecBank == FLASH_BANK_1)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d108      	bne.n	8001c2c <FLASH_OB_SecMemConfig+0x34>
    {
      MODIFY_REG(FLASH->SEC1R, FLASH_SEC1R_SEC_SIZE1, SecSize);
 8001c1a:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <FLASH_OB_SecMemConfig+0x6c>)
 8001c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c1e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8001c22:	4910      	ldr	r1, [pc, #64]	; (8001c64 <FLASH_OB_SecMemConfig+0x6c>)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	670b      	str	r3, [r1, #112]	; 0x70
 8001c2a:	e00a      	b.n	8001c42 <FLASH_OB_SecMemConfig+0x4a>
    }
#if defined (FLASH_OPTR_DBANK)
    else if (SecBank == FLASH_BANK_2)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d107      	bne.n	8001c42 <FLASH_OB_SecMemConfig+0x4a>
    {
      MODIFY_REG(FLASH->SEC2R, FLASH_SEC2R_SEC_SIZE2, SecSize);
 8001c32:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <FLASH_OB_SecMemConfig+0x6c>)
 8001c34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c36:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8001c3a:	490a      	ldr	r1, [pc, #40]	; (8001c64 <FLASH_OB_SecMemConfig+0x6c>)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	674b      	str	r3, [r1, #116]	; 0x74
      /* Nothing to do */
    }
#endif

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8001c42:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <FLASH_OB_SecMemConfig+0x6c>)
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	4a07      	ldr	r2, [pc, #28]	; (8001c64 <FLASH_OB_SecMemConfig+0x6c>)
 8001c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c4c:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c52:	f7ff fa37 	bl	80010c4 <FLASH_WaitForLastOperation>
 8001c56:	4603      	mov	r3, r0
 8001c58:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8001c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40022000 	.word	0x40022000

08001c68 <FLASH_OB_BootLockConfig>:
  *            @arg OB_BOOT_LOCK_DISABLE: Disable Boot Lock
  *
  * @retval HAL_Status
  */
static HAL_StatusTypeDef FLASH_OB_BootLockConfig(uint32_t BootLockConfig)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OB_BOOT_LOCK(BootLockConfig));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c74:	f7ff fa26 	bl	80010c4 <FLASH_WaitForLastOperation>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001c7c:	7bfb      	ldrb	r3, [r7, #15]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d113      	bne.n	8001caa <FLASH_OB_BootLockConfig+0x42>
  {
    MODIFY_REG(FLASH->SEC1R, FLASH_SEC1R_BOOT_LOCK, BootLockConfig);
 8001c82:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <FLASH_OB_BootLockConfig+0x4c>)
 8001c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c86:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001c8a:	490a      	ldr	r1, [pc, #40]	; (8001cb4 <FLASH_OB_BootLockConfig+0x4c>)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	670b      	str	r3, [r1, #112]	; 0x70

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8001c92:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <FLASH_OB_BootLockConfig+0x4c>)
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	4a07      	ldr	r2, [pc, #28]	; (8001cb4 <FLASH_OB_BootLockConfig+0x4c>)
 8001c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c9c:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ca2:	f7ff fa0f 	bl	80010c4 <FLASH_WaitForLastOperation>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8001caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40022000 	.word	0x40022000

08001cb8 <FLASH_OB_GetSecMem>:
  * @param[out]  SecSize specifies the number of pages used in the securable
                 memory area of the bank.
  * @retval None
  */
static void FLASH_OB_GetSecMem(uint32_t SecBank, uint32_t *SecSize)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  /* Get the configuration of the securable memory area */
  if (SecBank == FLASH_BANK_1)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d105      	bne.n	8001cd4 <FLASH_OB_GetSecMem+0x1c>
  {
    *SecSize = READ_BIT(FLASH->SEC1R, FLASH_SEC1R_SEC_SIZE1);
 8001cc8:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <FLASH_OB_GetSecMem+0x38>)
 8001cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }
#endif
}
 8001cd2:	e007      	b.n	8001ce4 <FLASH_OB_GetSecMem+0x2c>
  else if (SecBank == FLASH_BANK_2)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d104      	bne.n	8001ce4 <FLASH_OB_GetSecMem+0x2c>
    *SecSize = READ_BIT(FLASH->SEC2R, FLASH_SEC2R_SEC_SIZE2);
 8001cda:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <FLASH_OB_GetSecMem+0x38>)
 8001cdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cde:	b2da      	uxtb	r2, r3
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	601a      	str	r2, [r3, #0]
}
 8001ce4:	bf00      	nop
 8001ce6:	370c      	adds	r7, #12
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	40022000 	.word	0x40022000

08001cf4 <FLASH_OB_GetBootLock>:
  *         This return value can be one of the following values:
  *            @arg OB_BOOT_LOCK_ENABLE: Boot lock enabled
  *            @arg OB_BOOT_LOCK_DISABLE: Boot lock disabled
  */
static uint32_t FLASH_OB_GetBootLock(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return (READ_REG(FLASH->SEC1R) & FLASH_SEC1R_BOOT_LOCK);
 8001cf8:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <FLASH_OB_GetBootLock+0x18>)
 8001cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	40022000 	.word	0x40022000

08001d10 <FLASH_OB_GetWRP>:
  * @param[out]  WRDPEndOffset specifies the address where to copied the end page of
  *              the write protected area.
  * @retval None
  */
static void FLASH_OB_GetWRP(uint32_t WRPArea, uint32_t *WRPStartOffset, uint32_t *WRDPEndOffset)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
  /* Get the configuration of the write protected area */
  if (WRPArea == OB_WRPAREA_BANK1_AREAA)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d10d      	bne.n	8001d3e <FLASH_OB_GetWRP+0x2e>
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
 8001d22:	4b23      	ldr	r3, [pc, #140]	; (8001db0 <FLASH_OB_GetWRP+0xa0>)
 8001d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> FLASH_WRP1AR_WRP1A_END_Pos);
 8001d2e:	4b20      	ldr	r3, [pc, #128]	; (8001db0 <FLASH_OB_GetWRP+0xa0>)
 8001d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d32:	0c1b      	lsrs	r3, r3, #16
 8001d34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	601a      	str	r2, [r3, #0]
#endif
  else
  {
    /* Nothing to do */
  }
}
 8001d3c:	e031      	b.n	8001da2 <FLASH_OB_GetWRP+0x92>
  else if (WRPArea == OB_WRPAREA_BANK1_AREAB)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d10d      	bne.n	8001d60 <FLASH_OB_GetWRP+0x50>
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 8001d44:	4b1a      	ldr	r3, [pc, #104]	; (8001db0 <FLASH_OB_GetWRP+0xa0>)
 8001d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> FLASH_WRP1BR_WRP1B_END_Pos);
 8001d50:	4b17      	ldr	r3, [pc, #92]	; (8001db0 <FLASH_OB_GetWRP+0xa0>)
 8001d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d54:	0c1b      	lsrs	r3, r3, #16
 8001d56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	601a      	str	r2, [r3, #0]
}
 8001d5e:	e020      	b.n	8001da2 <FLASH_OB_GetWRP+0x92>
  else if (WRPArea == OB_WRPAREA_BANK2_AREAA)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d10d      	bne.n	8001d82 <FLASH_OB_GetWRP+0x72>
    *WRPStartOffset = READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_STRT);
 8001d66:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <FLASH_OB_GetWRP+0xa0>)
 8001d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_END) >> FLASH_WRP2AR_WRP2A_END_Pos);
 8001d72:	4b0f      	ldr	r3, [pc, #60]	; (8001db0 <FLASH_OB_GetWRP+0xa0>)
 8001d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d76:	0c1b      	lsrs	r3, r3, #16
 8001d78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	601a      	str	r2, [r3, #0]
}
 8001d80:	e00f      	b.n	8001da2 <FLASH_OB_GetWRP+0x92>
  else if (WRPArea == OB_WRPAREA_BANK2_AREAB)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2b04      	cmp	r3, #4
 8001d86:	d10c      	bne.n	8001da2 <FLASH_OB_GetWRP+0x92>
    *WRPStartOffset = READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_STRT);
 8001d88:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <FLASH_OB_GetWRP+0xa0>)
 8001d8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_END) >> FLASH_WRP2BR_WRP2B_END_Pos);
 8001d94:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <FLASH_OB_GetWRP+0xa0>)
 8001d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d98:	0c1b      	lsrs	r3, r3, #16
 8001d9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	601a      	str	r2, [r3, #0]
}
 8001da2:	bf00      	nop
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	40022000 	.word	0x40022000

08001db4 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
  uint32_t rdp_level = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 8001dba:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <FLASH_OB_GetRDP+0x2c>)
 8001dbc:	6a1b      	ldr	r3, [r3, #32]
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	607b      	str	r3, [r7, #4]

  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2baa      	cmp	r3, #170	; 0xaa
 8001dc6:	d004      	beq.n	8001dd2 <FLASH_OB_GetRDP+0x1e>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2bcc      	cmp	r3, #204	; 0xcc
 8001dcc:	d001      	beq.n	8001dd2 <FLASH_OB_GetRDP+0x1e>
  {
    return (OB_RDP_LEVEL_1);
 8001dce:	23bb      	movs	r3, #187	; 0xbb
 8001dd0:	e000      	b.n	8001dd4 <FLASH_OB_GetRDP+0x20>
  }
  else
  {
    return rdp_level;
 8001dd2:	687b      	ldr	r3, [r7, #4]
  }
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	40022000 	.word	0x40022000

08001de4 <FLASH_OB_GetUser>:
  *         @ref FLASH_OB_USER_CCMSRAM_RST, @ref OB_USER_nSWBOOT0,@ref FLASH_OB_USER_nBOOT0,
  *         @ref FLASH_OB_USER_NRST_MODE, @ref FLASH_OB_USER_INTERNAL_RESET_HOLDER
  * @note  (*) availability depends on devices
  */
static uint32_t FLASH_OB_GetUser(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
  uint32_t user_config = READ_REG(FLASH->OPTR);
 8001dea:	4b07      	ldr	r3, [pc, #28]	; (8001e08 <FLASH_OB_GetUser+0x24>)
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	607b      	str	r3, [r7, #4]
  CLEAR_BIT(user_config, FLASH_OPTR_RDP);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001df6:	607b      	str	r3, [r7, #4]

  return user_config;
 8001df8:	687b      	ldr	r3, [r7, #4]
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	40022000 	.word	0x40022000

08001e0c <FLASH_OB_GetPCROP>:
  * @param[out] PCROPEndAddr specifies the address where to copied the end address of
  *        the Proprietary code readout protection.
  * @retval None
  */
static void FLASH_OB_GetPCROP(uint32_t *PCROPConfig, uint32_t *PCROPStartAddr, uint32_t *PCROPEndAddr)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b089      	sub	sp, #36	; 0x24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
  uint32_t bank1_addr;
#if defined (FLASH_OPTR_DBANK)
  uint32_t bank2_addr;

  /* Get the information about the bank swapping */
  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 8001e18:	4b5b      	ldr	r3, [pc, #364]	; (8001f88 <FLASH_OB_GetPCROP+0x17c>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d114      	bne.n	8001e4e <FLASH_OB_GetPCROP+0x42>
  {
    bank1_addr = FLASH_BASE;
 8001e24:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001e28:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8001e2a:	4b58      	ldr	r3, [pc, #352]	; (8001f8c <FLASH_OB_GetPCROP+0x180>)
 8001e2c:	881b      	ldrh	r3, [r3, #0]
 8001e2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d008      	beq.n	8001e48 <FLASH_OB_GetPCROP+0x3c>
 8001e36:	4b55      	ldr	r3, [pc, #340]	; (8001f8c <FLASH_OB_GetPCROP+0x180>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	029b      	lsls	r3, r3, #10
 8001e3c:	085a      	lsrs	r2, r3, #1
 8001e3e:	4b54      	ldr	r3, [pc, #336]	; (8001f90 <FLASH_OB_GetPCROP+0x184>)
 8001e40:	4013      	ands	r3, r2
 8001e42:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001e46:	e000      	b.n	8001e4a <FLASH_OB_GetPCROP+0x3e>
 8001e48:	4b52      	ldr	r3, [pc, #328]	; (8001f94 <FLASH_OB_GetPCROP+0x188>)
 8001e4a:	61bb      	str	r3, [r7, #24]
 8001e4c:	e013      	b.n	8001e76 <FLASH_OB_GetPCROP+0x6a>
  }
  else
  {
    bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8001e4e:	4b4f      	ldr	r3, [pc, #316]	; (8001f8c <FLASH_OB_GetPCROP+0x180>)
 8001e50:	881b      	ldrh	r3, [r3, #0]
 8001e52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d008      	beq.n	8001e6c <FLASH_OB_GetPCROP+0x60>
 8001e5a:	4b4c      	ldr	r3, [pc, #304]	; (8001f8c <FLASH_OB_GetPCROP+0x180>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	029b      	lsls	r3, r3, #10
 8001e60:	085a      	lsrs	r2, r3, #1
 8001e62:	4b4b      	ldr	r3, [pc, #300]	; (8001f90 <FLASH_OB_GetPCROP+0x184>)
 8001e64:	4013      	ands	r3, r2
 8001e66:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001e6a:	e000      	b.n	8001e6e <FLASH_OB_GetPCROP+0x62>
 8001e6c:	4b49      	ldr	r3, [pc, #292]	; (8001f94 <FLASH_OB_GetPCROP+0x188>)
 8001e6e:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE;
 8001e70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001e74:	61bb      	str	r3, [r7, #24]
#else
  bank1_addr = FLASH_BASE;
#endif

#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 8001e76:	4b48      	ldr	r3, [pc, #288]	; (8001f98 <FLASH_OB_GetPCROP+0x18c>)
 8001e78:	6a1b      	ldr	r3, [r3, #32]
 8001e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d139      	bne.n	8001ef6 <FLASH_OB_GetPCROP+0xea>
  {
    if (((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_1)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d116      	bne.n	8001ebc <FLASH_OB_GetPCROP+0xb0>
    {
      reg_value       = (READ_REG(FLASH->PCROP1SR) & FLASH_PCROP1SR_PCROP1_STRT);
 8001e8e:	4b42      	ldr	r3, [pc, #264]	; (8001f98 <FLASH_OB_GetPCROP+0x18c>)
 8001e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e92:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001e96:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 4) + FLASH_BASE;
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	011b      	lsls	r3, r3, #4
 8001e9c:	f103 6200 	add.w	r2, r3, #134217728	; 0x8000000
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP1_END);
 8001ea4:	4b3c      	ldr	r3, [pc, #240]	; (8001f98 <FLASH_OB_GetPCROP+0x18c>)
 8001ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001eac:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 4) + FLASH_BASE;
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	011b      	lsls	r3, r3, #4
 8001eb2:	f103 6200 	add.w	r2, r3, #134217728	; 0x8000000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	e055      	b.n	8001f68 <FLASH_OB_GetPCROP+0x15c>
    }
    else if (((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_2)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0303 	and.w	r3, r3, #3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d14f      	bne.n	8001f68 <FLASH_OB_GetPCROP+0x15c>
    {
      reg_value       = (READ_REG(FLASH->PCROP2SR) & FLASH_PCROP2SR_PCROP2_STRT);
 8001ec8:	4b33      	ldr	r3, [pc, #204]	; (8001f98 <FLASH_OB_GetPCROP+0x18c>)
 8001eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ecc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001ed0:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 4) + FLASH_BASE;
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	011b      	lsls	r3, r3, #4
 8001ed6:	f103 6200 	add.w	r2, r3, #134217728	; 0x8000000
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP2ER) & FLASH_PCROP2ER_PCROP2_END);
 8001ede:	4b2e      	ldr	r3, [pc, #184]	; (8001f98 <FLASH_OB_GetPCROP+0x18c>)
 8001ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ee2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001ee6:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 4) + FLASH_BASE;
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	011b      	lsls	r3, r3, #4
 8001eec:	f103 6200 	add.w	r2, r3, #134217728	; 0x8000000
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	e038      	b.n	8001f68 <FLASH_OB_GetPCROP+0x15c>
    }
  }
  else
#endif
  {
    if (((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_1)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d116      	bne.n	8001f30 <FLASH_OB_GetPCROP+0x124>
    {
      reg_value       = (READ_REG(FLASH->PCROP1SR) & FLASH_PCROP1SR_PCROP1_STRT);
 8001f02:	4b25      	ldr	r3, [pc, #148]	; (8001f98 <FLASH_OB_GetPCROP+0x18c>)
 8001f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f06:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001f0a:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank1_addr;
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	00da      	lsls	r2, r3, #3
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	441a      	add	r2, r3
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP1_END);
 8001f18:	4b1f      	ldr	r3, [pc, #124]	; (8001f98 <FLASH_OB_GetPCROP+0x18c>)
 8001f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001f20:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank1_addr;
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	00da      	lsls	r2, r3, #3
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	441a      	add	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	e01b      	b.n	8001f68 <FLASH_OB_GetPCROP+0x15c>
    }
#if defined (FLASH_OPTR_DBANK)
    else if (((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_2)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0303 	and.w	r3, r3, #3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d115      	bne.n	8001f68 <FLASH_OB_GetPCROP+0x15c>
    {
      reg_value       = (READ_REG(FLASH->PCROP2SR) & FLASH_PCROP2SR_PCROP2_STRT);
 8001f3c:	4b16      	ldr	r3, [pc, #88]	; (8001f98 <FLASH_OB_GetPCROP+0x18c>)
 8001f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f40:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001f44:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank2_addr;
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	00da      	lsls	r2, r3, #3
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	441a      	add	r2, r3
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP2ER) & FLASH_PCROP2ER_PCROP2_END);
 8001f52:	4b11      	ldr	r3, [pc, #68]	; (8001f98 <FLASH_OB_GetPCROP+0x18c>)
 8001f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f56:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001f5a:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank2_addr;
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	00da      	lsls	r2, r3, #3
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	441a      	add	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	601a      	str	r2, [r3, #0]
    {
      /* Nothing to do */
    }
  }

  *PCROPConfig |= (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP_RDP);
 8001f68:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <FLASH_OB_GetPCROP+0x18c>)
 8001f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	431a      	orrs	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	601a      	str	r2, [r3, #0]
}
 8001f7a:	bf00      	nop
 8001f7c:	3724      	adds	r7, #36	; 0x24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	40010000 	.word	0x40010000
 8001f8c:	1fff75e0 	.word	0x1fff75e0
 8001f90:	01fffe00 	.word	0x01fffe00
 8001f94:	08040000 	.word	0x08040000
 8001f98:	40022000 	.word	0x40022000

08001f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b087      	sub	sp, #28
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001faa:	e15a      	b.n	8002262 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb8:	4013      	ands	r3, r2
 8001fba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 814c 	beq.w	800225c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d00b      	beq.n	8001fe4 <HAL_GPIO_Init+0x48>
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d007      	beq.n	8001fe4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fd8:	2b11      	cmp	r3, #17
 8001fda:	d003      	beq.n	8001fe4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	2b12      	cmp	r3, #18
 8001fe2:	d130      	bne.n	8002046 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	2203      	movs	r2, #3
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	68da      	ldr	r2, [r3, #12]
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	4313      	orrs	r3, r2
 800200c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800201a:	2201      	movs	r2, #1
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43db      	mvns	r3, r3
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	4013      	ands	r3, r2
 8002028:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	091b      	lsrs	r3, r3, #4
 8002030:	f003 0201 	and.w	r2, r3, #1
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	4313      	orrs	r3, r2
 800203e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	2203      	movs	r2, #3
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	43db      	mvns	r3, r3
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	4013      	ands	r3, r2
 800205c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	689a      	ldr	r2, [r3, #8]
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	4313      	orrs	r3, r2
 800206e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b02      	cmp	r3, #2
 800207c:	d003      	beq.n	8002086 <HAL_GPIO_Init+0xea>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b12      	cmp	r3, #18
 8002084:	d123      	bne.n	80020ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	08da      	lsrs	r2, r3, #3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	3208      	adds	r2, #8
 800208e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002092:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	220f      	movs	r2, #15
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43db      	mvns	r3, r3
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	4013      	ands	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	691a      	ldr	r2, [r3, #16]
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	4313      	orrs	r3, r2
 80020be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	08da      	lsrs	r2, r3, #3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3208      	adds	r2, #8
 80020c8:	6939      	ldr	r1, [r7, #16]
 80020ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	2203      	movs	r2, #3
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	43db      	mvns	r3, r3
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	4013      	ands	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f003 0203 	and.w	r2, r3, #3
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	f000 80a6 	beq.w	800225c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002110:	4b5b      	ldr	r3, [pc, #364]	; (8002280 <HAL_GPIO_Init+0x2e4>)
 8002112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002114:	4a5a      	ldr	r2, [pc, #360]	; (8002280 <HAL_GPIO_Init+0x2e4>)
 8002116:	f043 0301 	orr.w	r3, r3, #1
 800211a:	6613      	str	r3, [r2, #96]	; 0x60
 800211c:	4b58      	ldr	r3, [pc, #352]	; (8002280 <HAL_GPIO_Init+0x2e4>)
 800211e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	60bb      	str	r3, [r7, #8]
 8002126:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002128:	4a56      	ldr	r2, [pc, #344]	; (8002284 <HAL_GPIO_Init+0x2e8>)
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	089b      	lsrs	r3, r3, #2
 800212e:	3302      	adds	r3, #2
 8002130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002134:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	f003 0303 	and.w	r3, r3, #3
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	220f      	movs	r2, #15
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	43db      	mvns	r3, r3
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	4013      	ands	r3, r2
 800214a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002152:	d01f      	beq.n	8002194 <HAL_GPIO_Init+0x1f8>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a4c      	ldr	r2, [pc, #304]	; (8002288 <HAL_GPIO_Init+0x2ec>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d019      	beq.n	8002190 <HAL_GPIO_Init+0x1f4>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a4b      	ldr	r2, [pc, #300]	; (800228c <HAL_GPIO_Init+0x2f0>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d013      	beq.n	800218c <HAL_GPIO_Init+0x1f0>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a4a      	ldr	r2, [pc, #296]	; (8002290 <HAL_GPIO_Init+0x2f4>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d00d      	beq.n	8002188 <HAL_GPIO_Init+0x1ec>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a49      	ldr	r2, [pc, #292]	; (8002294 <HAL_GPIO_Init+0x2f8>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d007      	beq.n	8002184 <HAL_GPIO_Init+0x1e8>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a48      	ldr	r2, [pc, #288]	; (8002298 <HAL_GPIO_Init+0x2fc>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d101      	bne.n	8002180 <HAL_GPIO_Init+0x1e4>
 800217c:	2305      	movs	r3, #5
 800217e:	e00a      	b.n	8002196 <HAL_GPIO_Init+0x1fa>
 8002180:	2306      	movs	r3, #6
 8002182:	e008      	b.n	8002196 <HAL_GPIO_Init+0x1fa>
 8002184:	2304      	movs	r3, #4
 8002186:	e006      	b.n	8002196 <HAL_GPIO_Init+0x1fa>
 8002188:	2303      	movs	r3, #3
 800218a:	e004      	b.n	8002196 <HAL_GPIO_Init+0x1fa>
 800218c:	2302      	movs	r3, #2
 800218e:	e002      	b.n	8002196 <HAL_GPIO_Init+0x1fa>
 8002190:	2301      	movs	r3, #1
 8002192:	e000      	b.n	8002196 <HAL_GPIO_Init+0x1fa>
 8002194:	2300      	movs	r3, #0
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	f002 0203 	and.w	r2, r2, #3
 800219c:	0092      	lsls	r2, r2, #2
 800219e:	4093      	lsls	r3, r2
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021a6:	4937      	ldr	r1, [pc, #220]	; (8002284 <HAL_GPIO_Init+0x2e8>)
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	089b      	lsrs	r3, r3, #2
 80021ac:	3302      	adds	r3, #2
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80021b4:	4b39      	ldr	r3, [pc, #228]	; (800229c <HAL_GPIO_Init+0x300>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	43db      	mvns	r3, r3
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	4013      	ands	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d003      	beq.n	80021d8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80021d8:	4a30      	ldr	r2, [pc, #192]	; (800229c <HAL_GPIO_Init+0x300>)
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80021de:	4b2f      	ldr	r3, [pc, #188]	; (800229c <HAL_GPIO_Init+0x300>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	43db      	mvns	r3, r3
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	4013      	ands	r3, r2
 80021ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	4313      	orrs	r3, r2
 8002200:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002202:	4a26      	ldr	r2, [pc, #152]	; (800229c <HAL_GPIO_Init+0x300>)
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002208:	4b24      	ldr	r3, [pc, #144]	; (800229c <HAL_GPIO_Init+0x300>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	43db      	mvns	r3, r3
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	4013      	ands	r3, r2
 8002216:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d003      	beq.n	800222c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	4313      	orrs	r3, r2
 800222a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800222c:	4a1b      	ldr	r2, [pc, #108]	; (800229c <HAL_GPIO_Init+0x300>)
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002232:	4b1a      	ldr	r3, [pc, #104]	; (800229c <HAL_GPIO_Init+0x300>)
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	43db      	mvns	r3, r3
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	4013      	ands	r3, r2
 8002240:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	4313      	orrs	r3, r2
 8002254:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002256:	4a11      	ldr	r2, [pc, #68]	; (800229c <HAL_GPIO_Init+0x300>)
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	3301      	adds	r3, #1
 8002260:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	fa22 f303 	lsr.w	r3, r2, r3
 800226c:	2b00      	cmp	r3, #0
 800226e:	f47f ae9d 	bne.w	8001fac <HAL_GPIO_Init+0x10>
  }
}
 8002272:	bf00      	nop
 8002274:	371c      	adds	r7, #28
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	40021000 	.word	0x40021000
 8002284:	40010000 	.word	0x40010000
 8002288:	48000400 	.word	0x48000400
 800228c:	48000800 	.word	0x48000800
 8002290:	48000c00 	.word	0x48000c00
 8002294:	48001000 	.word	0x48001000
 8002298:	48001400 	.word	0x48001400
 800229c:	40010400 	.word	0x40010400

080022a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	807b      	strh	r3, [r7, #2]
 80022ac:	4613      	mov	r3, r2
 80022ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022b0:	787b      	ldrb	r3, [r7, #1]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022b6:	887a      	ldrh	r2, [r7, #2]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022bc:	e002      	b.n	80022c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022be:	887a      	ldrh	r2, [r7, #2]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	460b      	mov	r3, r1
 80022da:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	695a      	ldr	r2, [r3, #20]
 80022e0:	887b      	ldrh	r3, [r7, #2]
 80022e2:	4013      	ands	r3, r2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d003      	beq.n	80022f0 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022e8:	887a      	ldrh	r2, [r7, #2]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80022ee:	e002      	b.n	80022f6 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022f0:	887a      	ldrh	r2, [r7, #2]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	619a      	str	r2, [r3, #24]
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
	...

08002304 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800230e:	4b08      	ldr	r3, [pc, #32]	; (8002330 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002310:	695a      	ldr	r2, [r3, #20]
 8002312:	88fb      	ldrh	r3, [r7, #6]
 8002314:	4013      	ands	r3, r2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d006      	beq.n	8002328 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800231a:	4a05      	ldr	r2, [pc, #20]	; (8002330 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800231c:	88fb      	ldrh	r3, [r7, #6]
 800231e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002320:	88fb      	ldrh	r3, [r7, #6]
 8002322:	4618      	mov	r0, r3
 8002324:	f7fe f95e 	bl	80005e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002328:	bf00      	nop
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40010400 	.word	0x40010400

08002334 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d141      	bne.n	80023c6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002342:	4b4b      	ldr	r3, [pc, #300]	; (8002470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800234a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800234e:	d131      	bne.n	80023b4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002350:	4b47      	ldr	r3, [pc, #284]	; (8002470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002352:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002356:	4a46      	ldr	r2, [pc, #280]	; (8002470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002358:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800235c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002360:	4b43      	ldr	r3, [pc, #268]	; (8002470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002368:	4a41      	ldr	r2, [pc, #260]	; (8002470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800236a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800236e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002370:	4b40      	ldr	r3, [pc, #256]	; (8002474 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2232      	movs	r2, #50	; 0x32
 8002376:	fb02 f303 	mul.w	r3, r2, r3
 800237a:	4a3f      	ldr	r2, [pc, #252]	; (8002478 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800237c:	fba2 2303 	umull	r2, r3, r2, r3
 8002380:	0c9b      	lsrs	r3, r3, #18
 8002382:	3301      	adds	r3, #1
 8002384:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002386:	e002      	b.n	800238e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	3b01      	subs	r3, #1
 800238c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800238e:	4b38      	ldr	r3, [pc, #224]	; (8002470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800239a:	d102      	bne.n	80023a2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f2      	bne.n	8002388 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023a2:	4b33      	ldr	r3, [pc, #204]	; (8002470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ae:	d158      	bne.n	8002462 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e057      	b.n	8002464 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023b4:	4b2e      	ldr	r3, [pc, #184]	; (8002470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023ba:	4a2d      	ldr	r2, [pc, #180]	; (8002470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80023c4:	e04d      	b.n	8002462 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023cc:	d141      	bne.n	8002452 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80023ce:	4b28      	ldr	r3, [pc, #160]	; (8002470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023da:	d131      	bne.n	8002440 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023dc:	4b24      	ldr	r3, [pc, #144]	; (8002470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023e2:	4a23      	ldr	r2, [pc, #140]	; (8002470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023ec:	4b20      	ldr	r3, [pc, #128]	; (8002470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023f4:	4a1e      	ldr	r2, [pc, #120]	; (8002470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023fc:	4b1d      	ldr	r3, [pc, #116]	; (8002474 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2232      	movs	r2, #50	; 0x32
 8002402:	fb02 f303 	mul.w	r3, r2, r3
 8002406:	4a1c      	ldr	r2, [pc, #112]	; (8002478 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002408:	fba2 2303 	umull	r2, r3, r2, r3
 800240c:	0c9b      	lsrs	r3, r3, #18
 800240e:	3301      	adds	r3, #1
 8002410:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002412:	e002      	b.n	800241a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	3b01      	subs	r3, #1
 8002418:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800241a:	4b15      	ldr	r3, [pc, #84]	; (8002470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002422:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002426:	d102      	bne.n	800242e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1f2      	bne.n	8002414 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800242e:	4b10      	ldr	r3, [pc, #64]	; (8002470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002436:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800243a:	d112      	bne.n	8002462 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e011      	b.n	8002464 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002440:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002442:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002446:	4a0a      	ldr	r2, [pc, #40]	; (8002470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800244c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002450:	e007      	b.n	8002462 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002452:	4b07      	ldr	r3, [pc, #28]	; (8002470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800245a:	4a05      	ldr	r2, [pc, #20]	; (8002470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800245c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002460:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	40007000 	.word	0x40007000
 8002474:	20000000 	.word	0x20000000
 8002478:	431bde83 	.word	0x431bde83

0800247c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b088      	sub	sp, #32
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e308      	b.n	8002aa0 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d075      	beq.n	8002586 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800249a:	4ba3      	ldr	r3, [pc, #652]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 030c 	and.w	r3, r3, #12
 80024a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024a4:	4ba0      	ldr	r3, [pc, #640]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	f003 0303 	and.w	r3, r3, #3
 80024ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	2b0c      	cmp	r3, #12
 80024b2:	d102      	bne.n	80024ba <HAL_RCC_OscConfig+0x3e>
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	2b03      	cmp	r3, #3
 80024b8:	d002      	beq.n	80024c0 <HAL_RCC_OscConfig+0x44>
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	2b08      	cmp	r3, #8
 80024be:	d10b      	bne.n	80024d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c0:	4b99      	ldr	r3, [pc, #612]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d05b      	beq.n	8002584 <HAL_RCC_OscConfig+0x108>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d157      	bne.n	8002584 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e2e3      	b.n	8002aa0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024e0:	d106      	bne.n	80024f0 <HAL_RCC_OscConfig+0x74>
 80024e2:	4b91      	ldr	r3, [pc, #580]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a90      	ldr	r2, [pc, #576]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 80024e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ec:	6013      	str	r3, [r2, #0]
 80024ee:	e01d      	b.n	800252c <HAL_RCC_OscConfig+0xb0>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024f8:	d10c      	bne.n	8002514 <HAL_RCC_OscConfig+0x98>
 80024fa:	4b8b      	ldr	r3, [pc, #556]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a8a      	ldr	r2, [pc, #552]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 8002500:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	4b88      	ldr	r3, [pc, #544]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a87      	ldr	r2, [pc, #540]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 800250c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002510:	6013      	str	r3, [r2, #0]
 8002512:	e00b      	b.n	800252c <HAL_RCC_OscConfig+0xb0>
 8002514:	4b84      	ldr	r3, [pc, #528]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a83      	ldr	r2, [pc, #524]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 800251a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800251e:	6013      	str	r3, [r2, #0]
 8002520:	4b81      	ldr	r3, [pc, #516]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a80      	ldr	r2, [pc, #512]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 8002526:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800252a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d013      	beq.n	800255c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002534:	f7fe fba2 	bl	8000c7c <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800253c:	f7fe fb9e 	bl	8000c7c <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b64      	cmp	r3, #100	; 0x64
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e2a8      	b.n	8002aa0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800254e:	4b76      	ldr	r3, [pc, #472]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d0f0      	beq.n	800253c <HAL_RCC_OscConfig+0xc0>
 800255a:	e014      	b.n	8002586 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255c:	f7fe fb8e 	bl	8000c7c <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002564:	f7fe fb8a 	bl	8000c7c <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b64      	cmp	r3, #100	; 0x64
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e294      	b.n	8002aa0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002576:	4b6c      	ldr	r3, [pc, #432]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f0      	bne.n	8002564 <HAL_RCC_OscConfig+0xe8>
 8002582:	e000      	b.n	8002586 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002584:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d075      	beq.n	800267e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002592:	4b65      	ldr	r3, [pc, #404]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 030c 	and.w	r3, r3, #12
 800259a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800259c:	4b62      	ldr	r3, [pc, #392]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	f003 0303 	and.w	r3, r3, #3
 80025a4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	2b0c      	cmp	r3, #12
 80025aa:	d102      	bne.n	80025b2 <HAL_RCC_OscConfig+0x136>
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d002      	beq.n	80025b8 <HAL_RCC_OscConfig+0x13c>
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	2b04      	cmp	r3, #4
 80025b6:	d11f      	bne.n	80025f8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025b8:	4b5b      	ldr	r3, [pc, #364]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d005      	beq.n	80025d0 <HAL_RCC_OscConfig+0x154>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d101      	bne.n	80025d0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e267      	b.n	8002aa0 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d0:	4b55      	ldr	r3, [pc, #340]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	061b      	lsls	r3, r3, #24
 80025de:	4952      	ldr	r1, [pc, #328]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80025e4:	4b51      	ldr	r3, [pc, #324]	; (800272c <HAL_RCC_OscConfig+0x2b0>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7fe fafb 	bl	8000be4 <HAL_InitTick>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d043      	beq.n	800267c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e253      	b.n	8002aa0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d023      	beq.n	8002648 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002600:	4b49      	ldr	r3, [pc, #292]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a48      	ldr	r2, [pc, #288]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 8002606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800260a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260c:	f7fe fb36 	bl	8000c7c <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002614:	f7fe fb32 	bl	8000c7c <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e23c      	b.n	8002aa0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002626:	4b40      	ldr	r3, [pc, #256]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0f0      	beq.n	8002614 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002632:	4b3d      	ldr	r3, [pc, #244]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	061b      	lsls	r3, r3, #24
 8002640:	4939      	ldr	r1, [pc, #228]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 8002642:	4313      	orrs	r3, r2
 8002644:	604b      	str	r3, [r1, #4]
 8002646:	e01a      	b.n	800267e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002648:	4b37      	ldr	r3, [pc, #220]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a36      	ldr	r2, [pc, #216]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 800264e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002652:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002654:	f7fe fb12 	bl	8000c7c <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800265c:	f7fe fb0e 	bl	8000c7c <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e218      	b.n	8002aa0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800266e:	4b2e      	ldr	r3, [pc, #184]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1f0      	bne.n	800265c <HAL_RCC_OscConfig+0x1e0>
 800267a:	e000      	b.n	800267e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800267c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0308 	and.w	r3, r3, #8
 8002686:	2b00      	cmp	r3, #0
 8002688:	d03c      	beq.n	8002704 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d01c      	beq.n	80026cc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002692:	4b25      	ldr	r3, [pc, #148]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 8002694:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002698:	4a23      	ldr	r2, [pc, #140]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 800269a:	f043 0301 	orr.w	r3, r3, #1
 800269e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a2:	f7fe faeb 	bl	8000c7c <HAL_GetTick>
 80026a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026a8:	e008      	b.n	80026bc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026aa:	f7fe fae7 	bl	8000c7c <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e1f1      	b.n	8002aa0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026bc:	4b1a      	ldr	r3, [pc, #104]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 80026be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0ef      	beq.n	80026aa <HAL_RCC_OscConfig+0x22e>
 80026ca:	e01b      	b.n	8002704 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026cc:	4b16      	ldr	r3, [pc, #88]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 80026ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026d2:	4a15      	ldr	r2, [pc, #84]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 80026d4:	f023 0301 	bic.w	r3, r3, #1
 80026d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026dc:	f7fe face 	bl	8000c7c <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026e4:	f7fe faca 	bl	8000c7c <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e1d4      	b.n	8002aa0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026f6:	4b0c      	ldr	r3, [pc, #48]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 80026f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1ef      	bne.n	80026e4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 80ab 	beq.w	8002868 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002712:	2300      	movs	r3, #0
 8002714:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002716:	4b04      	ldr	r3, [pc, #16]	; (8002728 <HAL_RCC_OscConfig+0x2ac>)
 8002718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d106      	bne.n	8002730 <HAL_RCC_OscConfig+0x2b4>
 8002722:	2301      	movs	r3, #1
 8002724:	e005      	b.n	8002732 <HAL_RCC_OscConfig+0x2b6>
 8002726:	bf00      	nop
 8002728:	40021000 	.word	0x40021000
 800272c:	20000004 	.word	0x20000004
 8002730:	2300      	movs	r3, #0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00d      	beq.n	8002752 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002736:	4baf      	ldr	r3, [pc, #700]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 8002738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273a:	4aae      	ldr	r2, [pc, #696]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 800273c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002740:	6593      	str	r3, [r2, #88]	; 0x58
 8002742:	4bac      	ldr	r3, [pc, #688]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 8002744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800274e:	2301      	movs	r3, #1
 8002750:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002752:	4ba9      	ldr	r3, [pc, #676]	; (80029f8 <HAL_RCC_OscConfig+0x57c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275a:	2b00      	cmp	r3, #0
 800275c:	d118      	bne.n	8002790 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800275e:	4ba6      	ldr	r3, [pc, #664]	; (80029f8 <HAL_RCC_OscConfig+0x57c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4aa5      	ldr	r2, [pc, #660]	; (80029f8 <HAL_RCC_OscConfig+0x57c>)
 8002764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002768:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800276a:	f7fe fa87 	bl	8000c7c <HAL_GetTick>
 800276e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002770:	e008      	b.n	8002784 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002772:	f7fe fa83 	bl	8000c7c <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e18d      	b.n	8002aa0 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002784:	4b9c      	ldr	r3, [pc, #624]	; (80029f8 <HAL_RCC_OscConfig+0x57c>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0f0      	beq.n	8002772 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d108      	bne.n	80027aa <HAL_RCC_OscConfig+0x32e>
 8002798:	4b96      	ldr	r3, [pc, #600]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 800279a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800279e:	4a95      	ldr	r2, [pc, #596]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 80027a0:	f043 0301 	orr.w	r3, r3, #1
 80027a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027a8:	e024      	b.n	80027f4 <HAL_RCC_OscConfig+0x378>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	2b05      	cmp	r3, #5
 80027b0:	d110      	bne.n	80027d4 <HAL_RCC_OscConfig+0x358>
 80027b2:	4b90      	ldr	r3, [pc, #576]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 80027b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b8:	4a8e      	ldr	r2, [pc, #568]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 80027ba:	f043 0304 	orr.w	r3, r3, #4
 80027be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027c2:	4b8c      	ldr	r3, [pc, #560]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 80027c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c8:	4a8a      	ldr	r2, [pc, #552]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 80027ca:	f043 0301 	orr.w	r3, r3, #1
 80027ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027d2:	e00f      	b.n	80027f4 <HAL_RCC_OscConfig+0x378>
 80027d4:	4b87      	ldr	r3, [pc, #540]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 80027d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027da:	4a86      	ldr	r2, [pc, #536]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 80027dc:	f023 0301 	bic.w	r3, r3, #1
 80027e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80027e4:	4b83      	ldr	r3, [pc, #524]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 80027e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ea:	4a82      	ldr	r2, [pc, #520]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 80027ec:	f023 0304 	bic.w	r3, r3, #4
 80027f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d016      	beq.n	800282a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027fc:	f7fe fa3e 	bl	8000c7c <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002802:	e00a      	b.n	800281a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002804:	f7fe fa3a 	bl	8000c7c <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002812:	4293      	cmp	r3, r2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e142      	b.n	8002aa0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800281a:	4b76      	ldr	r3, [pc, #472]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 800281c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0ed      	beq.n	8002804 <HAL_RCC_OscConfig+0x388>
 8002828:	e015      	b.n	8002856 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800282a:	f7fe fa27 	bl	8000c7c <HAL_GetTick>
 800282e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002830:	e00a      	b.n	8002848 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002832:	f7fe fa23 	bl	8000c7c <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002840:	4293      	cmp	r3, r2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e12b      	b.n	8002aa0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002848:	4b6a      	ldr	r3, [pc, #424]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 800284a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1ed      	bne.n	8002832 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002856:	7ffb      	ldrb	r3, [r7, #31]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d105      	bne.n	8002868 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800285c:	4b65      	ldr	r3, [pc, #404]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 800285e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002860:	4a64      	ldr	r2, [pc, #400]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 8002862:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002866:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0320 	and.w	r3, r3, #32
 8002870:	2b00      	cmp	r3, #0
 8002872:	d03c      	beq.n	80028ee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d01c      	beq.n	80028b6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800287c:	4b5d      	ldr	r3, [pc, #372]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 800287e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002882:	4a5c      	ldr	r2, [pc, #368]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 8002884:	f043 0301 	orr.w	r3, r3, #1
 8002888:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800288c:	f7fe f9f6 	bl	8000c7c <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002894:	f7fe f9f2 	bl	8000c7c <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e0fc      	b.n	8002aa0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028a6:	4b53      	ldr	r3, [pc, #332]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 80028a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d0ef      	beq.n	8002894 <HAL_RCC_OscConfig+0x418>
 80028b4:	e01b      	b.n	80028ee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028b6:	4b4f      	ldr	r3, [pc, #316]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 80028b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028bc:	4a4d      	ldr	r2, [pc, #308]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 80028be:	f023 0301 	bic.w	r3, r3, #1
 80028c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c6:	f7fe f9d9 	bl	8000c7c <HAL_GetTick>
 80028ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80028cc:	e008      	b.n	80028e0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028ce:	f7fe f9d5 	bl	8000c7c <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e0df      	b.n	8002aa0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80028e0:	4b44      	ldr	r3, [pc, #272]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 80028e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1ef      	bne.n	80028ce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f000 80d3 	beq.w	8002a9e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028f8:	4b3e      	ldr	r3, [pc, #248]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f003 030c 	and.w	r3, r3, #12
 8002900:	2b0c      	cmp	r3, #12
 8002902:	f000 808d 	beq.w	8002a20 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	2b02      	cmp	r3, #2
 800290c:	d15a      	bne.n	80029c4 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800290e:	4b39      	ldr	r3, [pc, #228]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a38      	ldr	r2, [pc, #224]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 8002914:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002918:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291a:	f7fe f9af 	bl	8000c7c <HAL_GetTick>
 800291e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002920:	e008      	b.n	8002934 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002922:	f7fe f9ab 	bl	8000c7c <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e0b5      	b.n	8002aa0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002934:	4b2f      	ldr	r3, [pc, #188]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1f0      	bne.n	8002922 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002940:	4b2c      	ldr	r3, [pc, #176]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 8002942:	68da      	ldr	r2, [r3, #12]
 8002944:	4b2d      	ldr	r3, [pc, #180]	; (80029fc <HAL_RCC_OscConfig+0x580>)
 8002946:	4013      	ands	r3, r2
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	6a11      	ldr	r1, [r2, #32]
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002950:	3a01      	subs	r2, #1
 8002952:	0112      	lsls	r2, r2, #4
 8002954:	4311      	orrs	r1, r2
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800295a:	0212      	lsls	r2, r2, #8
 800295c:	4311      	orrs	r1, r2
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002962:	0852      	lsrs	r2, r2, #1
 8002964:	3a01      	subs	r2, #1
 8002966:	0552      	lsls	r2, r2, #21
 8002968:	4311      	orrs	r1, r2
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800296e:	0852      	lsrs	r2, r2, #1
 8002970:	3a01      	subs	r2, #1
 8002972:	0652      	lsls	r2, r2, #25
 8002974:	4311      	orrs	r1, r2
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800297a:	06d2      	lsls	r2, r2, #27
 800297c:	430a      	orrs	r2, r1
 800297e:	491d      	ldr	r1, [pc, #116]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 8002980:	4313      	orrs	r3, r2
 8002982:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002984:	4b1b      	ldr	r3, [pc, #108]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a1a      	ldr	r2, [pc, #104]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 800298a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800298e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002990:	4b18      	ldr	r3, [pc, #96]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	4a17      	ldr	r2, [pc, #92]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 8002996:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800299a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299c:	f7fe f96e 	bl	8000c7c <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a4:	f7fe f96a 	bl	8000c7c <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e074      	b.n	8002aa0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029b6:	4b0f      	ldr	r3, [pc, #60]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0f0      	beq.n	80029a4 <HAL_RCC_OscConfig+0x528>
 80029c2:	e06c      	b.n	8002a9e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c4:	4b0b      	ldr	r3, [pc, #44]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a0a      	ldr	r2, [pc, #40]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 80029ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029ce:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80029d0:	4b08      	ldr	r3, [pc, #32]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	4a07      	ldr	r2, [pc, #28]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 80029d6:	f023 0303 	bic.w	r3, r3, #3
 80029da:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80029dc:	4b05      	ldr	r3, [pc, #20]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	4a04      	ldr	r2, [pc, #16]	; (80029f4 <HAL_RCC_OscConfig+0x578>)
 80029e2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80029e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ec:	f7fe f946 	bl	8000c7c <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029f2:	e00e      	b.n	8002a12 <HAL_RCC_OscConfig+0x596>
 80029f4:	40021000 	.word	0x40021000
 80029f8:	40007000 	.word	0x40007000
 80029fc:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a00:	f7fe f93c 	bl	8000c7c <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e046      	b.n	8002aa0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a12:	4b25      	ldr	r3, [pc, #148]	; (8002aa8 <HAL_RCC_OscConfig+0x62c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1f0      	bne.n	8002a00 <HAL_RCC_OscConfig+0x584>
 8002a1e:	e03e      	b.n	8002a9e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	69db      	ldr	r3, [r3, #28]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d101      	bne.n	8002a2c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e039      	b.n	8002aa0 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002a2c:	4b1e      	ldr	r3, [pc, #120]	; (8002aa8 <HAL_RCC_OscConfig+0x62c>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f003 0203 	and.w	r2, r3, #3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d12c      	bne.n	8002a9a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d123      	bne.n	8002a9a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d11b      	bne.n	8002a9a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d113      	bne.n	8002a9a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7c:	085b      	lsrs	r3, r3, #1
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d109      	bne.n	8002a9a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a90:	085b      	lsrs	r3, r3, #1
 8002a92:	3b01      	subs	r3, #1
 8002a94:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d001      	beq.n	8002a9e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e000      	b.n	8002aa0 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3720      	adds	r7, #32
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40021000 	.word	0x40021000

08002aac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d101      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e11e      	b.n	8002d02 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ac4:	4b91      	ldr	r3, [pc, #580]	; (8002d0c <HAL_RCC_ClockConfig+0x260>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 030f 	and.w	r3, r3, #15
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d910      	bls.n	8002af4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ad2:	4b8e      	ldr	r3, [pc, #568]	; (8002d0c <HAL_RCC_ClockConfig+0x260>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f023 020f 	bic.w	r2, r3, #15
 8002ada:	498c      	ldr	r1, [pc, #560]	; (8002d0c <HAL_RCC_ClockConfig+0x260>)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ae2:	4b8a      	ldr	r3, [pc, #552]	; (8002d0c <HAL_RCC_ClockConfig+0x260>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 030f 	and.w	r3, r3, #15
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d001      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e106      	b.n	8002d02 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d073      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2b03      	cmp	r3, #3
 8002b06:	d129      	bne.n	8002b5c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b08:	4b81      	ldr	r3, [pc, #516]	; (8002d10 <HAL_RCC_ClockConfig+0x264>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e0f4      	b.n	8002d02 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002b18:	f000 f99e 	bl	8002e58 <RCC_GetSysClockFreqFromPLLSource>
 8002b1c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	4a7c      	ldr	r2, [pc, #496]	; (8002d14 <HAL_RCC_ClockConfig+0x268>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d93f      	bls.n	8002ba6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002b26:	4b7a      	ldr	r3, [pc, #488]	; (8002d10 <HAL_RCC_ClockConfig+0x264>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d009      	beq.n	8002b46 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d033      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d12f      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b46:	4b72      	ldr	r3, [pc, #456]	; (8002d10 <HAL_RCC_ClockConfig+0x264>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b4e:	4a70      	ldr	r2, [pc, #448]	; (8002d10 <HAL_RCC_ClockConfig+0x264>)
 8002b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b54:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002b56:	2380      	movs	r3, #128	; 0x80
 8002b58:	617b      	str	r3, [r7, #20]
 8002b5a:	e024      	b.n	8002ba6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d107      	bne.n	8002b74 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b64:	4b6a      	ldr	r3, [pc, #424]	; (8002d10 <HAL_RCC_ClockConfig+0x264>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d109      	bne.n	8002b84 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e0c6      	b.n	8002d02 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b74:	4b66      	ldr	r3, [pc, #408]	; (8002d10 <HAL_RCC_ClockConfig+0x264>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d101      	bne.n	8002b84 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e0be      	b.n	8002d02 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002b84:	f000 f8ce 	bl	8002d24 <HAL_RCC_GetSysClockFreq>
 8002b88:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	4a61      	ldr	r2, [pc, #388]	; (8002d14 <HAL_RCC_ClockConfig+0x268>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d909      	bls.n	8002ba6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b92:	4b5f      	ldr	r3, [pc, #380]	; (8002d10 <HAL_RCC_ClockConfig+0x264>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b9a:	4a5d      	ldr	r2, [pc, #372]	; (8002d10 <HAL_RCC_ClockConfig+0x264>)
 8002b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ba0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002ba2:	2380      	movs	r3, #128	; 0x80
 8002ba4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ba6:	4b5a      	ldr	r3, [pc, #360]	; (8002d10 <HAL_RCC_ClockConfig+0x264>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f023 0203 	bic.w	r2, r3, #3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	4957      	ldr	r1, [pc, #348]	; (8002d10 <HAL_RCC_ClockConfig+0x264>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bb8:	f7fe f860 	bl	8000c7c <HAL_GetTick>
 8002bbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bbe:	e00a      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc0:	f7fe f85c 	bl	8000c7c <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e095      	b.n	8002d02 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bd6:	4b4e      	ldr	r3, [pc, #312]	; (8002d10 <HAL_RCC_ClockConfig+0x264>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 020c 	and.w	r2, r3, #12
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d1eb      	bne.n	8002bc0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d023      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d005      	beq.n	8002c0c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c00:	4b43      	ldr	r3, [pc, #268]	; (8002d10 <HAL_RCC_ClockConfig+0x264>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	4a42      	ldr	r2, [pc, #264]	; (8002d10 <HAL_RCC_ClockConfig+0x264>)
 8002c06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c0a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0308 	and.w	r3, r3, #8
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d007      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002c18:	4b3d      	ldr	r3, [pc, #244]	; (8002d10 <HAL_RCC_ClockConfig+0x264>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002c20:	4a3b      	ldr	r2, [pc, #236]	; (8002d10 <HAL_RCC_ClockConfig+0x264>)
 8002c22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c26:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c28:	4b39      	ldr	r3, [pc, #228]	; (8002d10 <HAL_RCC_ClockConfig+0x264>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	4936      	ldr	r1, [pc, #216]	; (8002d10 <HAL_RCC_ClockConfig+0x264>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	608b      	str	r3, [r1, #8]
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	2b80      	cmp	r3, #128	; 0x80
 8002c40:	d105      	bne.n	8002c4e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002c42:	4b33      	ldr	r3, [pc, #204]	; (8002d10 <HAL_RCC_ClockConfig+0x264>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	4a32      	ldr	r2, [pc, #200]	; (8002d10 <HAL_RCC_ClockConfig+0x264>)
 8002c48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c4c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c4e:	4b2f      	ldr	r3, [pc, #188]	; (8002d0c <HAL_RCC_ClockConfig+0x260>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 030f 	and.w	r3, r3, #15
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d21d      	bcs.n	8002c98 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c5c:	4b2b      	ldr	r3, [pc, #172]	; (8002d0c <HAL_RCC_ClockConfig+0x260>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f023 020f 	bic.w	r2, r3, #15
 8002c64:	4929      	ldr	r1, [pc, #164]	; (8002d0c <HAL_RCC_ClockConfig+0x260>)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002c6c:	f7fe f806 	bl	8000c7c <HAL_GetTick>
 8002c70:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c72:	e00a      	b.n	8002c8a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c74:	f7fe f802 	bl	8000c7c <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e03b      	b.n	8002d02 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c8a:	4b20      	ldr	r3, [pc, #128]	; (8002d0c <HAL_RCC_ClockConfig+0x260>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d1ed      	bne.n	8002c74 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d008      	beq.n	8002cb6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ca4:	4b1a      	ldr	r3, [pc, #104]	; (8002d10 <HAL_RCC_ClockConfig+0x264>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	4917      	ldr	r1, [pc, #92]	; (8002d10 <HAL_RCC_ClockConfig+0x264>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0308 	and.w	r3, r3, #8
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d009      	beq.n	8002cd6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cc2:	4b13      	ldr	r3, [pc, #76]	; (8002d10 <HAL_RCC_ClockConfig+0x264>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	490f      	ldr	r1, [pc, #60]	; (8002d10 <HAL_RCC_ClockConfig+0x264>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cd6:	f000 f825 	bl	8002d24 <HAL_RCC_GetSysClockFreq>
 8002cda:	4601      	mov	r1, r0
 8002cdc:	4b0c      	ldr	r3, [pc, #48]	; (8002d10 <HAL_RCC_ClockConfig+0x264>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	091b      	lsrs	r3, r3, #4
 8002ce2:	f003 030f 	and.w	r3, r3, #15
 8002ce6:	4a0c      	ldr	r2, [pc, #48]	; (8002d18 <HAL_RCC_ClockConfig+0x26c>)
 8002ce8:	5cd3      	ldrb	r3, [r2, r3]
 8002cea:	f003 031f 	and.w	r3, r3, #31
 8002cee:	fa21 f303 	lsr.w	r3, r1, r3
 8002cf2:	4a0a      	ldr	r2, [pc, #40]	; (8002d1c <HAL_RCC_ClockConfig+0x270>)
 8002cf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002cf6:	4b0a      	ldr	r3, [pc, #40]	; (8002d20 <HAL_RCC_ClockConfig+0x274>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7fd ff72 	bl	8000be4 <HAL_InitTick>
 8002d00:	4603      	mov	r3, r0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3718      	adds	r7, #24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	40022000 	.word	0x40022000
 8002d10:	40021000 	.word	0x40021000
 8002d14:	04c4b400 	.word	0x04c4b400
 8002d18:	08004d20 	.word	0x08004d20
 8002d1c:	20000000 	.word	0x20000000
 8002d20:	20000004 	.word	0x20000004

08002d24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b087      	sub	sp, #28
 8002d28:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002d2a:	4b2c      	ldr	r3, [pc, #176]	; (8002ddc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 030c 	and.w	r3, r3, #12
 8002d32:	2b04      	cmp	r3, #4
 8002d34:	d102      	bne.n	8002d3c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d36:	4b2a      	ldr	r3, [pc, #168]	; (8002de0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d38:	613b      	str	r3, [r7, #16]
 8002d3a:	e047      	b.n	8002dcc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002d3c:	4b27      	ldr	r3, [pc, #156]	; (8002ddc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f003 030c 	and.w	r3, r3, #12
 8002d44:	2b08      	cmp	r3, #8
 8002d46:	d102      	bne.n	8002d4e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d48:	4b26      	ldr	r3, [pc, #152]	; (8002de4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d4a:	613b      	str	r3, [r7, #16]
 8002d4c:	e03e      	b.n	8002dcc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002d4e:	4b23      	ldr	r3, [pc, #140]	; (8002ddc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 030c 	and.w	r3, r3, #12
 8002d56:	2b0c      	cmp	r3, #12
 8002d58:	d136      	bne.n	8002dc8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d5a:	4b20      	ldr	r3, [pc, #128]	; (8002ddc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	f003 0303 	and.w	r3, r3, #3
 8002d62:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d64:	4b1d      	ldr	r3, [pc, #116]	; (8002ddc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	091b      	lsrs	r3, r3, #4
 8002d6a:	f003 030f 	and.w	r3, r3, #15
 8002d6e:	3301      	adds	r3, #1
 8002d70:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2b03      	cmp	r3, #3
 8002d76:	d10c      	bne.n	8002d92 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d78:	4a1a      	ldr	r2, [pc, #104]	; (8002de4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d80:	4a16      	ldr	r2, [pc, #88]	; (8002ddc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d82:	68d2      	ldr	r2, [r2, #12]
 8002d84:	0a12      	lsrs	r2, r2, #8
 8002d86:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002d8a:	fb02 f303 	mul.w	r3, r2, r3
 8002d8e:	617b      	str	r3, [r7, #20]
      break;
 8002d90:	e00c      	b.n	8002dac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d92:	4a13      	ldr	r2, [pc, #76]	; (8002de0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d9a:	4a10      	ldr	r2, [pc, #64]	; (8002ddc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d9c:	68d2      	ldr	r2, [r2, #12]
 8002d9e:	0a12      	lsrs	r2, r2, #8
 8002da0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002da4:	fb02 f303 	mul.w	r3, r2, r3
 8002da8:	617b      	str	r3, [r7, #20]
      break;
 8002daa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002dac:	4b0b      	ldr	r3, [pc, #44]	; (8002ddc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	0e5b      	lsrs	r3, r3, #25
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	3301      	adds	r3, #1
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002dbc:	697a      	ldr	r2, [r7, #20]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc4:	613b      	str	r3, [r7, #16]
 8002dc6:	e001      	b.n	8002dcc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002dcc:	693b      	ldr	r3, [r7, #16]
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	371c      	adds	r7, #28
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	00f42400 	.word	0x00f42400
 8002de4:	016e3600 	.word	0x016e3600

08002de8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dec:	4b03      	ldr	r3, [pc, #12]	; (8002dfc <HAL_RCC_GetHCLKFreq+0x14>)
 8002dee:	681b      	ldr	r3, [r3, #0]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	20000000 	.word	0x20000000

08002e00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e04:	f7ff fff0 	bl	8002de8 <HAL_RCC_GetHCLKFreq>
 8002e08:	4601      	mov	r1, r0
 8002e0a:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	0a1b      	lsrs	r3, r3, #8
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	4a04      	ldr	r2, [pc, #16]	; (8002e28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e16:	5cd3      	ldrb	r3, [r2, r3]
 8002e18:	f003 031f 	and.w	r3, r3, #31
 8002e1c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40021000 	.word	0x40021000
 8002e28:	08004d30 	.word	0x08004d30

08002e2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e30:	f7ff ffda 	bl	8002de8 <HAL_RCC_GetHCLKFreq>
 8002e34:	4601      	mov	r1, r0
 8002e36:	4b06      	ldr	r3, [pc, #24]	; (8002e50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	0adb      	lsrs	r3, r3, #11
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	4a04      	ldr	r2, [pc, #16]	; (8002e54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e42:	5cd3      	ldrb	r3, [r2, r3]
 8002e44:	f003 031f 	and.w	r3, r3, #31
 8002e48:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	40021000 	.word	0x40021000
 8002e54:	08004d30 	.word	0x08004d30

08002e58 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b087      	sub	sp, #28
 8002e5c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e5e:	4b1e      	ldr	r3, [pc, #120]	; (8002ed8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	f003 0303 	and.w	r3, r3, #3
 8002e66:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e68:	4b1b      	ldr	r3, [pc, #108]	; (8002ed8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	091b      	lsrs	r3, r3, #4
 8002e6e:	f003 030f 	and.w	r3, r3, #15
 8002e72:	3301      	adds	r3, #1
 8002e74:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	2b03      	cmp	r3, #3
 8002e7a:	d10c      	bne.n	8002e96 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e7c:	4a17      	ldr	r2, [pc, #92]	; (8002edc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e84:	4a14      	ldr	r2, [pc, #80]	; (8002ed8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e86:	68d2      	ldr	r2, [r2, #12]
 8002e88:	0a12      	lsrs	r2, r2, #8
 8002e8a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e8e:	fb02 f303 	mul.w	r3, r2, r3
 8002e92:	617b      	str	r3, [r7, #20]
    break;
 8002e94:	e00c      	b.n	8002eb0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e96:	4a12      	ldr	r2, [pc, #72]	; (8002ee0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e9e:	4a0e      	ldr	r2, [pc, #56]	; (8002ed8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ea0:	68d2      	ldr	r2, [r2, #12]
 8002ea2:	0a12      	lsrs	r2, r2, #8
 8002ea4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ea8:	fb02 f303 	mul.w	r3, r2, r3
 8002eac:	617b      	str	r3, [r7, #20]
    break;
 8002eae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002eb0:	4b09      	ldr	r3, [pc, #36]	; (8002ed8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	0e5b      	lsrs	r3, r3, #25
 8002eb6:	f003 0303 	and.w	r3, r3, #3
 8002eba:	3301      	adds	r3, #1
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002eca:	687b      	ldr	r3, [r7, #4]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	371c      	adds	r7, #28
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	016e3600 	.word	0x016e3600
 8002ee0:	00f42400 	.word	0x00f42400

08002ee4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002eec:	2300      	movs	r3, #0
 8002eee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 8098 	beq.w	8003032 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f02:	2300      	movs	r3, #0
 8002f04:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f06:	4b43      	ldr	r3, [pc, #268]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10d      	bne.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f12:	4b40      	ldr	r3, [pc, #256]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f16:	4a3f      	ldr	r2, [pc, #252]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f1c:	6593      	str	r3, [r2, #88]	; 0x58
 8002f1e:	4b3d      	ldr	r3, [pc, #244]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f26:	60bb      	str	r3, [r7, #8]
 8002f28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f2e:	4b3a      	ldr	r3, [pc, #232]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a39      	ldr	r2, [pc, #228]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f38:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f3a:	f7fd fe9f 	bl	8000c7c <HAL_GetTick>
 8002f3e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f40:	e009      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f42:	f7fd fe9b 	bl	8000c7c <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d902      	bls.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	74fb      	strb	r3, [r7, #19]
        break;
 8002f54:	e005      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f56:	4b30      	ldr	r3, [pc, #192]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d0ef      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002f62:	7cfb      	ldrb	r3, [r7, #19]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d159      	bne.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f68:	4b2a      	ldr	r3, [pc, #168]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f72:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d01e      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d019      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f84:	4b23      	ldr	r3, [pc, #140]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f8e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f90:	4b20      	ldr	r3, [pc, #128]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f96:	4a1f      	ldr	r2, [pc, #124]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002fa0:	4b1c      	ldr	r3, [pc, #112]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa6:	4a1b      	ldr	r2, [pc, #108]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002fb0:	4a18      	ldr	r2, [pc, #96]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d016      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc2:	f7fd fe5b 	bl	8000c7c <HAL_GetTick>
 8002fc6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fc8:	e00b      	b.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fca:	f7fd fe57 	bl	8000c7c <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d902      	bls.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	74fb      	strb	r3, [r7, #19]
            break;
 8002fe0:	e006      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fe2:	4b0c      	ldr	r3, [pc, #48]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0ec      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002ff0:	7cfb      	ldrb	r3, [r7, #19]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10b      	bne.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ff6:	4b07      	ldr	r3, [pc, #28]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ffc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003004:	4903      	ldr	r1, [pc, #12]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003006:	4313      	orrs	r3, r2
 8003008:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800300c:	e008      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800300e:	7cfb      	ldrb	r3, [r7, #19]
 8003010:	74bb      	strb	r3, [r7, #18]
 8003012:	e005      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003014:	40021000 	.word	0x40021000
 8003018:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800301c:	7cfb      	ldrb	r3, [r7, #19]
 800301e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003020:	7c7b      	ldrb	r3, [r7, #17]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d105      	bne.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003026:	4baf      	ldr	r3, [pc, #700]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800302a:	4aae      	ldr	r2, [pc, #696]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800302c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003030:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00a      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800303e:	4ba9      	ldr	r3, [pc, #676]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003044:	f023 0203 	bic.w	r2, r3, #3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	49a5      	ldr	r1, [pc, #660]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800304e:	4313      	orrs	r3, r2
 8003050:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00a      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003060:	4ba0      	ldr	r3, [pc, #640]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003066:	f023 020c 	bic.w	r2, r3, #12
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	499d      	ldr	r1, [pc, #628]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003070:	4313      	orrs	r3, r2
 8003072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0304 	and.w	r3, r3, #4
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00a      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003082:	4b98      	ldr	r3, [pc, #608]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003088:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	4994      	ldr	r1, [pc, #592]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003092:	4313      	orrs	r3, r2
 8003094:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0308 	and.w	r3, r3, #8
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00a      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80030a4:	4b8f      	ldr	r3, [pc, #572]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80030a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	498c      	ldr	r1, [pc, #560]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0310 	and.w	r3, r3, #16
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00a      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80030c6:	4b87      	ldr	r3, [pc, #540]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80030c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	4983      	ldr	r1, [pc, #524]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0320 	and.w	r3, r3, #32
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00a      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030e8:	4b7e      	ldr	r3, [pc, #504]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80030ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	497b      	ldr	r1, [pc, #492]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00a      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800310a:	4b76      	ldr	r3, [pc, #472]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800310c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003110:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	69db      	ldr	r3, [r3, #28]
 8003118:	4972      	ldr	r1, [pc, #456]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800311a:	4313      	orrs	r3, r2
 800311c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00a      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800312c:	4b6d      	ldr	r3, [pc, #436]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800312e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003132:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	496a      	ldr	r1, [pc, #424]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800313c:	4313      	orrs	r3, r2
 800313e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00a      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800314e:	4b65      	ldr	r3, [pc, #404]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003154:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	4961      	ldr	r1, [pc, #388]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800315e:	4313      	orrs	r3, r2
 8003160:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d00a      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003170:	4b5c      	ldr	r3, [pc, #368]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003172:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003176:	f023 0203 	bic.w	r2, r3, #3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317e:	4959      	ldr	r1, [pc, #356]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003180:	4313      	orrs	r3, r2
 8003182:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00a      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003192:	4b54      	ldr	r3, [pc, #336]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003198:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a0:	4950      	ldr	r1, [pc, #320]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d015      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031b4:	4b4b      	ldr	r3, [pc, #300]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80031b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	4948      	ldr	r1, [pc, #288]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031d2:	d105      	bne.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031d4:	4b43      	ldr	r3, [pc, #268]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	4a42      	ldr	r2, [pc, #264]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80031da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031de:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d015      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80031ec:	4b3d      	ldr	r3, [pc, #244]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80031ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031fa:	493a      	ldr	r1, [pc, #232]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003206:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800320a:	d105      	bne.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800320c:	4b35      	ldr	r3, [pc, #212]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	4a34      	ldr	r2, [pc, #208]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003212:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003216:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d015      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003224:	4b2f      	ldr	r3, [pc, #188]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003232:	492c      	ldr	r1, [pc, #176]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003234:	4313      	orrs	r3, r2
 8003236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003242:	d105      	bne.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003244:	4b27      	ldr	r3, [pc, #156]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	4a26      	ldr	r2, [pc, #152]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800324a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800324e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d015      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800325c:	4b21      	ldr	r3, [pc, #132]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800325e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003262:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800326a:	491e      	ldr	r1, [pc, #120]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800326c:	4313      	orrs	r3, r2
 800326e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003276:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800327a:	d105      	bne.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800327c:	4b19      	ldr	r3, [pc, #100]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	4a18      	ldr	r2, [pc, #96]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003282:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003286:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d015      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003294:	4b13      	ldr	r3, [pc, #76]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8003296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	4910      	ldr	r1, [pc, #64]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032b2:	d105      	bne.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032b4:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	4a0a      	ldr	r2, [pc, #40]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80032ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032be:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d018      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80032cc:	4b05      	ldr	r3, [pc, #20]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80032ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032da:	4902      	ldr	r1, [pc, #8]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80032e2:	e001      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80032e4:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032f0:	d105      	bne.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80032f2:	4b21      	ldr	r3, [pc, #132]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	4a20      	ldr	r2, [pc, #128]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80032f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032fc:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d015      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800330a:	4b1b      	ldr	r3, [pc, #108]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800330c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003310:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003318:	4917      	ldr	r1, [pc, #92]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800331a:	4313      	orrs	r3, r2
 800331c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003328:	d105      	bne.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800332a:	4b13      	ldr	r3, [pc, #76]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	4a12      	ldr	r2, [pc, #72]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003334:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d015      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003342:	4b0d      	ldr	r3, [pc, #52]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003344:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003348:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003350:	4909      	ldr	r1, [pc, #36]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003352:	4313      	orrs	r3, r2
 8003354:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800335c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003360:	d105      	bne.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003362:	4b05      	ldr	r3, [pc, #20]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	4a04      	ldr	r2, [pc, #16]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8003368:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800336c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800336e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003370:	4618      	mov	r0, r3
 8003372:	3718      	adds	r7, #24
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40021000 	.word	0x40021000

0800337c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e042      	b.n	8003414 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003394:	2b00      	cmp	r3, #0
 8003396:	d106      	bne.n	80033a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f7fd fb01 	bl	80009a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2224      	movs	r2, #36	; 0x24
 80033aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 0201 	bic.w	r2, r2, #1
 80033bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f82e 	bl	8003420 <UART_SetConfig>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d101      	bne.n	80033ce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e022      	b.n	8003414 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d002      	beq.n	80033dc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f001 fa10 	bl	80047fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689a      	ldr	r2, [r3, #8]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f042 0201 	orr.w	r2, r2, #1
 800340a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f001 fa97 	bl	8004940 <UART_CheckIdleState>
 8003412:	4603      	mov	r3, r0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3708      	adds	r7, #8
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	0000      	movs	r0, r0
	...

08003420 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003420:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003424:	b08a      	sub	sp, #40	; 0x28
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800342a:	2300      	movs	r3, #0
 800342c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800342e:	2300      	movs	r3, #0
 8003430:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003432:	2300      	movs	r3, #0
 8003434:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	689a      	ldr	r2, [r3, #8]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	431a      	orrs	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	431a      	orrs	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	4313      	orrs	r3, r2
 800344c:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003454:	4313      	orrs	r3, r2
 8003456:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	4baa      	ldr	r3, [pc, #680]	; (8003708 <UART_SetConfig+0x2e8>)
 8003460:	4013      	ands	r3, r2
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	6812      	ldr	r2, [r2, #0]
 8003466:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003468:	430b      	orrs	r3, r1
 800346a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68da      	ldr	r2, [r3, #12]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	430a      	orrs	r2, r1
 8003480:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a9f      	ldr	r2, [pc, #636]	; (800370c <UART_SetConfig+0x2ec>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d004      	beq.n	800349c <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003498:	4313      	orrs	r3, r2
 800349a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80034a6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6812      	ldr	r2, [r2, #0]
 80034ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034b0:	430b      	orrs	r3, r1
 80034b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ba:	f023 010f 	bic.w	r1, r3, #15
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a90      	ldr	r2, [pc, #576]	; (8003710 <UART_SetConfig+0x2f0>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d126      	bne.n	8003522 <UART_SetConfig+0x102>
 80034d4:	4b8f      	ldr	r3, [pc, #572]	; (8003714 <UART_SetConfig+0x2f4>)
 80034d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034da:	f003 0303 	and.w	r3, r3, #3
 80034de:	2b03      	cmp	r3, #3
 80034e0:	d81a      	bhi.n	8003518 <UART_SetConfig+0xf8>
 80034e2:	a201      	add	r2, pc, #4	; (adr r2, 80034e8 <UART_SetConfig+0xc8>)
 80034e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e8:	080034f9 	.word	0x080034f9
 80034ec:	08003509 	.word	0x08003509
 80034f0:	08003501 	.word	0x08003501
 80034f4:	08003511 	.word	0x08003511
 80034f8:	2301      	movs	r3, #1
 80034fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034fe:	e116      	b.n	800372e <UART_SetConfig+0x30e>
 8003500:	2302      	movs	r3, #2
 8003502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003506:	e112      	b.n	800372e <UART_SetConfig+0x30e>
 8003508:	2304      	movs	r3, #4
 800350a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800350e:	e10e      	b.n	800372e <UART_SetConfig+0x30e>
 8003510:	2308      	movs	r3, #8
 8003512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003516:	e10a      	b.n	800372e <UART_SetConfig+0x30e>
 8003518:	2310      	movs	r3, #16
 800351a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800351e:	bf00      	nop
 8003520:	e105      	b.n	800372e <UART_SetConfig+0x30e>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a7c      	ldr	r2, [pc, #496]	; (8003718 <UART_SetConfig+0x2f8>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d138      	bne.n	800359e <UART_SetConfig+0x17e>
 800352c:	4b79      	ldr	r3, [pc, #484]	; (8003714 <UART_SetConfig+0x2f4>)
 800352e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003532:	f003 030c 	and.w	r3, r3, #12
 8003536:	2b0c      	cmp	r3, #12
 8003538:	d82c      	bhi.n	8003594 <UART_SetConfig+0x174>
 800353a:	a201      	add	r2, pc, #4	; (adr r2, 8003540 <UART_SetConfig+0x120>)
 800353c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003540:	08003575 	.word	0x08003575
 8003544:	08003595 	.word	0x08003595
 8003548:	08003595 	.word	0x08003595
 800354c:	08003595 	.word	0x08003595
 8003550:	08003585 	.word	0x08003585
 8003554:	08003595 	.word	0x08003595
 8003558:	08003595 	.word	0x08003595
 800355c:	08003595 	.word	0x08003595
 8003560:	0800357d 	.word	0x0800357d
 8003564:	08003595 	.word	0x08003595
 8003568:	08003595 	.word	0x08003595
 800356c:	08003595 	.word	0x08003595
 8003570:	0800358d 	.word	0x0800358d
 8003574:	2300      	movs	r3, #0
 8003576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800357a:	e0d8      	b.n	800372e <UART_SetConfig+0x30e>
 800357c:	2302      	movs	r3, #2
 800357e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003582:	e0d4      	b.n	800372e <UART_SetConfig+0x30e>
 8003584:	2304      	movs	r3, #4
 8003586:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800358a:	e0d0      	b.n	800372e <UART_SetConfig+0x30e>
 800358c:	2308      	movs	r3, #8
 800358e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003592:	e0cc      	b.n	800372e <UART_SetConfig+0x30e>
 8003594:	2310      	movs	r3, #16
 8003596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800359a:	bf00      	nop
 800359c:	e0c7      	b.n	800372e <UART_SetConfig+0x30e>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a5e      	ldr	r2, [pc, #376]	; (800371c <UART_SetConfig+0x2fc>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d125      	bne.n	80035f4 <UART_SetConfig+0x1d4>
 80035a8:	4b5a      	ldr	r3, [pc, #360]	; (8003714 <UART_SetConfig+0x2f4>)
 80035aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80035b2:	2b10      	cmp	r3, #16
 80035b4:	d011      	beq.n	80035da <UART_SetConfig+0x1ba>
 80035b6:	2b10      	cmp	r3, #16
 80035b8:	d802      	bhi.n	80035c0 <UART_SetConfig+0x1a0>
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d005      	beq.n	80035ca <UART_SetConfig+0x1aa>
 80035be:	e014      	b.n	80035ea <UART_SetConfig+0x1ca>
 80035c0:	2b20      	cmp	r3, #32
 80035c2:	d006      	beq.n	80035d2 <UART_SetConfig+0x1b2>
 80035c4:	2b30      	cmp	r3, #48	; 0x30
 80035c6:	d00c      	beq.n	80035e2 <UART_SetConfig+0x1c2>
 80035c8:	e00f      	b.n	80035ea <UART_SetConfig+0x1ca>
 80035ca:	2300      	movs	r3, #0
 80035cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035d0:	e0ad      	b.n	800372e <UART_SetConfig+0x30e>
 80035d2:	2302      	movs	r3, #2
 80035d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035d8:	e0a9      	b.n	800372e <UART_SetConfig+0x30e>
 80035da:	2304      	movs	r3, #4
 80035dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035e0:	e0a5      	b.n	800372e <UART_SetConfig+0x30e>
 80035e2:	2308      	movs	r3, #8
 80035e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035e8:	e0a1      	b.n	800372e <UART_SetConfig+0x30e>
 80035ea:	2310      	movs	r3, #16
 80035ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035f0:	bf00      	nop
 80035f2:	e09c      	b.n	800372e <UART_SetConfig+0x30e>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a49      	ldr	r2, [pc, #292]	; (8003720 <UART_SetConfig+0x300>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d125      	bne.n	800364a <UART_SetConfig+0x22a>
 80035fe:	4b45      	ldr	r3, [pc, #276]	; (8003714 <UART_SetConfig+0x2f4>)
 8003600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003604:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003608:	2b40      	cmp	r3, #64	; 0x40
 800360a:	d011      	beq.n	8003630 <UART_SetConfig+0x210>
 800360c:	2b40      	cmp	r3, #64	; 0x40
 800360e:	d802      	bhi.n	8003616 <UART_SetConfig+0x1f6>
 8003610:	2b00      	cmp	r3, #0
 8003612:	d005      	beq.n	8003620 <UART_SetConfig+0x200>
 8003614:	e014      	b.n	8003640 <UART_SetConfig+0x220>
 8003616:	2b80      	cmp	r3, #128	; 0x80
 8003618:	d006      	beq.n	8003628 <UART_SetConfig+0x208>
 800361a:	2bc0      	cmp	r3, #192	; 0xc0
 800361c:	d00c      	beq.n	8003638 <UART_SetConfig+0x218>
 800361e:	e00f      	b.n	8003640 <UART_SetConfig+0x220>
 8003620:	2300      	movs	r3, #0
 8003622:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003626:	e082      	b.n	800372e <UART_SetConfig+0x30e>
 8003628:	2302      	movs	r3, #2
 800362a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800362e:	e07e      	b.n	800372e <UART_SetConfig+0x30e>
 8003630:	2304      	movs	r3, #4
 8003632:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003636:	e07a      	b.n	800372e <UART_SetConfig+0x30e>
 8003638:	2308      	movs	r3, #8
 800363a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800363e:	e076      	b.n	800372e <UART_SetConfig+0x30e>
 8003640:	2310      	movs	r3, #16
 8003642:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003646:	bf00      	nop
 8003648:	e071      	b.n	800372e <UART_SetConfig+0x30e>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a35      	ldr	r2, [pc, #212]	; (8003724 <UART_SetConfig+0x304>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d129      	bne.n	80036a8 <UART_SetConfig+0x288>
 8003654:	4b2f      	ldr	r3, [pc, #188]	; (8003714 <UART_SetConfig+0x2f4>)
 8003656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800365a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800365e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003662:	d014      	beq.n	800368e <UART_SetConfig+0x26e>
 8003664:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003668:	d802      	bhi.n	8003670 <UART_SetConfig+0x250>
 800366a:	2b00      	cmp	r3, #0
 800366c:	d007      	beq.n	800367e <UART_SetConfig+0x25e>
 800366e:	e016      	b.n	800369e <UART_SetConfig+0x27e>
 8003670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003674:	d007      	beq.n	8003686 <UART_SetConfig+0x266>
 8003676:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800367a:	d00c      	beq.n	8003696 <UART_SetConfig+0x276>
 800367c:	e00f      	b.n	800369e <UART_SetConfig+0x27e>
 800367e:	2300      	movs	r3, #0
 8003680:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003684:	e053      	b.n	800372e <UART_SetConfig+0x30e>
 8003686:	2302      	movs	r3, #2
 8003688:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800368c:	e04f      	b.n	800372e <UART_SetConfig+0x30e>
 800368e:	2304      	movs	r3, #4
 8003690:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003694:	e04b      	b.n	800372e <UART_SetConfig+0x30e>
 8003696:	2308      	movs	r3, #8
 8003698:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800369c:	e047      	b.n	800372e <UART_SetConfig+0x30e>
 800369e:	2310      	movs	r3, #16
 80036a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036a4:	bf00      	nop
 80036a6:	e042      	b.n	800372e <UART_SetConfig+0x30e>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a17      	ldr	r2, [pc, #92]	; (800370c <UART_SetConfig+0x2ec>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d13a      	bne.n	8003728 <UART_SetConfig+0x308>
 80036b2:	4b18      	ldr	r3, [pc, #96]	; (8003714 <UART_SetConfig+0x2f4>)
 80036b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80036bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036c0:	d014      	beq.n	80036ec <UART_SetConfig+0x2cc>
 80036c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036c6:	d802      	bhi.n	80036ce <UART_SetConfig+0x2ae>
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d007      	beq.n	80036dc <UART_SetConfig+0x2bc>
 80036cc:	e016      	b.n	80036fc <UART_SetConfig+0x2dc>
 80036ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036d2:	d007      	beq.n	80036e4 <UART_SetConfig+0x2c4>
 80036d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036d8:	d00c      	beq.n	80036f4 <UART_SetConfig+0x2d4>
 80036da:	e00f      	b.n	80036fc <UART_SetConfig+0x2dc>
 80036dc:	2300      	movs	r3, #0
 80036de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036e2:	e024      	b.n	800372e <UART_SetConfig+0x30e>
 80036e4:	2302      	movs	r3, #2
 80036e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ea:	e020      	b.n	800372e <UART_SetConfig+0x30e>
 80036ec:	2304      	movs	r3, #4
 80036ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036f2:	e01c      	b.n	800372e <UART_SetConfig+0x30e>
 80036f4:	2308      	movs	r3, #8
 80036f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036fa:	e018      	b.n	800372e <UART_SetConfig+0x30e>
 80036fc:	2310      	movs	r3, #16
 80036fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003702:	bf00      	nop
 8003704:	e013      	b.n	800372e <UART_SetConfig+0x30e>
 8003706:	bf00      	nop
 8003708:	cfff69f3 	.word	0xcfff69f3
 800370c:	40008000 	.word	0x40008000
 8003710:	40013800 	.word	0x40013800
 8003714:	40021000 	.word	0x40021000
 8003718:	40004400 	.word	0x40004400
 800371c:	40004800 	.word	0x40004800
 8003720:	40004c00 	.word	0x40004c00
 8003724:	40005000 	.word	0x40005000
 8003728:	2310      	movs	r3, #16
 800372a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a86      	ldr	r2, [pc, #536]	; (800394c <UART_SetConfig+0x52c>)
 8003734:	4293      	cmp	r3, r2
 8003736:	f040 8422 	bne.w	8003f7e <UART_SetConfig+0xb5e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800373a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800373e:	2b08      	cmp	r3, #8
 8003740:	f200 8173 	bhi.w	8003a2a <UART_SetConfig+0x60a>
 8003744:	a201      	add	r2, pc, #4	; (adr r2, 800374c <UART_SetConfig+0x32c>)
 8003746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800374a:	bf00      	nop
 800374c:	08003771 	.word	0x08003771
 8003750:	08003a2b 	.word	0x08003a2b
 8003754:	08003813 	.word	0x08003813
 8003758:	08003a2b 	.word	0x08003a2b
 800375c:	080038ab 	.word	0x080038ab
 8003760:	08003a2b 	.word	0x08003a2b
 8003764:	08003a2b 	.word	0x08003a2b
 8003768:	08003a2b 	.word	0x08003a2b
 800376c:	0800397d 	.word	0x0800397d
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003770:	f7ff fb46 	bl	8002e00 <HAL_RCC_GetPCLK1Freq>
 8003774:	4602      	mov	r2, r0
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377a:	2b00      	cmp	r3, #0
 800377c:	d044      	beq.n	8003808 <UART_SetConfig+0x3e8>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	2b01      	cmp	r3, #1
 8003784:	d03e      	beq.n	8003804 <UART_SetConfig+0x3e4>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378a:	2b02      	cmp	r3, #2
 800378c:	d038      	beq.n	8003800 <UART_SetConfig+0x3e0>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	2b03      	cmp	r3, #3
 8003794:	d032      	beq.n	80037fc <UART_SetConfig+0x3dc>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379a:	2b04      	cmp	r3, #4
 800379c:	d02c      	beq.n	80037f8 <UART_SetConfig+0x3d8>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	2b05      	cmp	r3, #5
 80037a4:	d026      	beq.n	80037f4 <UART_SetConfig+0x3d4>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037aa:	2b06      	cmp	r3, #6
 80037ac:	d020      	beq.n	80037f0 <UART_SetConfig+0x3d0>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b2:	2b07      	cmp	r3, #7
 80037b4:	d01a      	beq.n	80037ec <UART_SetConfig+0x3cc>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ba:	2b08      	cmp	r3, #8
 80037bc:	d014      	beq.n	80037e8 <UART_SetConfig+0x3c8>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c2:	2b09      	cmp	r3, #9
 80037c4:	d00e      	beq.n	80037e4 <UART_SetConfig+0x3c4>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ca:	2b0a      	cmp	r3, #10
 80037cc:	d008      	beq.n	80037e0 <UART_SetConfig+0x3c0>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d2:	2b0b      	cmp	r3, #11
 80037d4:	d102      	bne.n	80037dc <UART_SetConfig+0x3bc>
 80037d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037da:	e016      	b.n	800380a <UART_SetConfig+0x3ea>
 80037dc:	2301      	movs	r3, #1
 80037de:	e014      	b.n	800380a <UART_SetConfig+0x3ea>
 80037e0:	2380      	movs	r3, #128	; 0x80
 80037e2:	e012      	b.n	800380a <UART_SetConfig+0x3ea>
 80037e4:	2340      	movs	r3, #64	; 0x40
 80037e6:	e010      	b.n	800380a <UART_SetConfig+0x3ea>
 80037e8:	2320      	movs	r3, #32
 80037ea:	e00e      	b.n	800380a <UART_SetConfig+0x3ea>
 80037ec:	2310      	movs	r3, #16
 80037ee:	e00c      	b.n	800380a <UART_SetConfig+0x3ea>
 80037f0:	230c      	movs	r3, #12
 80037f2:	e00a      	b.n	800380a <UART_SetConfig+0x3ea>
 80037f4:	230a      	movs	r3, #10
 80037f6:	e008      	b.n	800380a <UART_SetConfig+0x3ea>
 80037f8:	2308      	movs	r3, #8
 80037fa:	e006      	b.n	800380a <UART_SetConfig+0x3ea>
 80037fc:	2306      	movs	r3, #6
 80037fe:	e004      	b.n	800380a <UART_SetConfig+0x3ea>
 8003800:	2304      	movs	r3, #4
 8003802:	e002      	b.n	800380a <UART_SetConfig+0x3ea>
 8003804:	2302      	movs	r3, #2
 8003806:	e000      	b.n	800380a <UART_SetConfig+0x3ea>
 8003808:	2301      	movs	r3, #1
 800380a:	fbb2 f3f3 	udiv	r3, r2, r3
 800380e:	617b      	str	r3, [r7, #20]
        break;
 8003810:	e10e      	b.n	8003a30 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003816:	2b00      	cmp	r3, #0
 8003818:	d044      	beq.n	80038a4 <UART_SetConfig+0x484>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	2b01      	cmp	r3, #1
 8003820:	d03e      	beq.n	80038a0 <UART_SetConfig+0x480>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	2b02      	cmp	r3, #2
 8003828:	d038      	beq.n	800389c <UART_SetConfig+0x47c>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	2b03      	cmp	r3, #3
 8003830:	d032      	beq.n	8003898 <UART_SetConfig+0x478>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003836:	2b04      	cmp	r3, #4
 8003838:	d02c      	beq.n	8003894 <UART_SetConfig+0x474>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383e:	2b05      	cmp	r3, #5
 8003840:	d026      	beq.n	8003890 <UART_SetConfig+0x470>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003846:	2b06      	cmp	r3, #6
 8003848:	d020      	beq.n	800388c <UART_SetConfig+0x46c>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384e:	2b07      	cmp	r3, #7
 8003850:	d01a      	beq.n	8003888 <UART_SetConfig+0x468>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	2b08      	cmp	r3, #8
 8003858:	d014      	beq.n	8003884 <UART_SetConfig+0x464>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385e:	2b09      	cmp	r3, #9
 8003860:	d00e      	beq.n	8003880 <UART_SetConfig+0x460>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003866:	2b0a      	cmp	r3, #10
 8003868:	d008      	beq.n	800387c <UART_SetConfig+0x45c>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386e:	2b0b      	cmp	r3, #11
 8003870:	d102      	bne.n	8003878 <UART_SetConfig+0x458>
 8003872:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003876:	e016      	b.n	80038a6 <UART_SetConfig+0x486>
 8003878:	4b35      	ldr	r3, [pc, #212]	; (8003950 <UART_SetConfig+0x530>)
 800387a:	e014      	b.n	80038a6 <UART_SetConfig+0x486>
 800387c:	4b35      	ldr	r3, [pc, #212]	; (8003954 <UART_SetConfig+0x534>)
 800387e:	e012      	b.n	80038a6 <UART_SetConfig+0x486>
 8003880:	4b35      	ldr	r3, [pc, #212]	; (8003958 <UART_SetConfig+0x538>)
 8003882:	e010      	b.n	80038a6 <UART_SetConfig+0x486>
 8003884:	4b35      	ldr	r3, [pc, #212]	; (800395c <UART_SetConfig+0x53c>)
 8003886:	e00e      	b.n	80038a6 <UART_SetConfig+0x486>
 8003888:	4b35      	ldr	r3, [pc, #212]	; (8003960 <UART_SetConfig+0x540>)
 800388a:	e00c      	b.n	80038a6 <UART_SetConfig+0x486>
 800388c:	4b35      	ldr	r3, [pc, #212]	; (8003964 <UART_SetConfig+0x544>)
 800388e:	e00a      	b.n	80038a6 <UART_SetConfig+0x486>
 8003890:	4b35      	ldr	r3, [pc, #212]	; (8003968 <UART_SetConfig+0x548>)
 8003892:	e008      	b.n	80038a6 <UART_SetConfig+0x486>
 8003894:	4b35      	ldr	r3, [pc, #212]	; (800396c <UART_SetConfig+0x54c>)
 8003896:	e006      	b.n	80038a6 <UART_SetConfig+0x486>
 8003898:	4b35      	ldr	r3, [pc, #212]	; (8003970 <UART_SetConfig+0x550>)
 800389a:	e004      	b.n	80038a6 <UART_SetConfig+0x486>
 800389c:	4b35      	ldr	r3, [pc, #212]	; (8003974 <UART_SetConfig+0x554>)
 800389e:	e002      	b.n	80038a6 <UART_SetConfig+0x486>
 80038a0:	4b35      	ldr	r3, [pc, #212]	; (8003978 <UART_SetConfig+0x558>)
 80038a2:	e000      	b.n	80038a6 <UART_SetConfig+0x486>
 80038a4:	4b2a      	ldr	r3, [pc, #168]	; (8003950 <UART_SetConfig+0x530>)
 80038a6:	617b      	str	r3, [r7, #20]
        break;
 80038a8:	e0c2      	b.n	8003a30 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80038aa:	f7ff fa3b 	bl	8002d24 <HAL_RCC_GetSysClockFreq>
 80038ae:	4602      	mov	r2, r0
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d044      	beq.n	8003942 <UART_SetConfig+0x522>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d03e      	beq.n	800393e <UART_SetConfig+0x51e>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d038      	beq.n	800393a <UART_SetConfig+0x51a>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038cc:	2b03      	cmp	r3, #3
 80038ce:	d032      	beq.n	8003936 <UART_SetConfig+0x516>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d4:	2b04      	cmp	r3, #4
 80038d6:	d02c      	beq.n	8003932 <UART_SetConfig+0x512>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038dc:	2b05      	cmp	r3, #5
 80038de:	d026      	beq.n	800392e <UART_SetConfig+0x50e>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e4:	2b06      	cmp	r3, #6
 80038e6:	d020      	beq.n	800392a <UART_SetConfig+0x50a>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ec:	2b07      	cmp	r3, #7
 80038ee:	d01a      	beq.n	8003926 <UART_SetConfig+0x506>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	2b08      	cmp	r3, #8
 80038f6:	d014      	beq.n	8003922 <UART_SetConfig+0x502>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fc:	2b09      	cmp	r3, #9
 80038fe:	d00e      	beq.n	800391e <UART_SetConfig+0x4fe>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	2b0a      	cmp	r3, #10
 8003906:	d008      	beq.n	800391a <UART_SetConfig+0x4fa>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	2b0b      	cmp	r3, #11
 800390e:	d102      	bne.n	8003916 <UART_SetConfig+0x4f6>
 8003910:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003914:	e016      	b.n	8003944 <UART_SetConfig+0x524>
 8003916:	2301      	movs	r3, #1
 8003918:	e014      	b.n	8003944 <UART_SetConfig+0x524>
 800391a:	2380      	movs	r3, #128	; 0x80
 800391c:	e012      	b.n	8003944 <UART_SetConfig+0x524>
 800391e:	2340      	movs	r3, #64	; 0x40
 8003920:	e010      	b.n	8003944 <UART_SetConfig+0x524>
 8003922:	2320      	movs	r3, #32
 8003924:	e00e      	b.n	8003944 <UART_SetConfig+0x524>
 8003926:	2310      	movs	r3, #16
 8003928:	e00c      	b.n	8003944 <UART_SetConfig+0x524>
 800392a:	230c      	movs	r3, #12
 800392c:	e00a      	b.n	8003944 <UART_SetConfig+0x524>
 800392e:	230a      	movs	r3, #10
 8003930:	e008      	b.n	8003944 <UART_SetConfig+0x524>
 8003932:	2308      	movs	r3, #8
 8003934:	e006      	b.n	8003944 <UART_SetConfig+0x524>
 8003936:	2306      	movs	r3, #6
 8003938:	e004      	b.n	8003944 <UART_SetConfig+0x524>
 800393a:	2304      	movs	r3, #4
 800393c:	e002      	b.n	8003944 <UART_SetConfig+0x524>
 800393e:	2302      	movs	r3, #2
 8003940:	e000      	b.n	8003944 <UART_SetConfig+0x524>
 8003942:	2301      	movs	r3, #1
 8003944:	fbb2 f3f3 	udiv	r3, r2, r3
 8003948:	617b      	str	r3, [r7, #20]
        break;
 800394a:	e071      	b.n	8003a30 <UART_SetConfig+0x610>
 800394c:	40008000 	.word	0x40008000
 8003950:	00f42400 	.word	0x00f42400
 8003954:	0001e848 	.word	0x0001e848
 8003958:	0003d090 	.word	0x0003d090
 800395c:	0007a120 	.word	0x0007a120
 8003960:	000f4240 	.word	0x000f4240
 8003964:	00145855 	.word	0x00145855
 8003968:	00186a00 	.word	0x00186a00
 800396c:	001e8480 	.word	0x001e8480
 8003970:	0028b0aa 	.word	0x0028b0aa
 8003974:	003d0900 	.word	0x003d0900
 8003978:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	2b00      	cmp	r3, #0
 8003982:	d04e      	beq.n	8003a22 <UART_SetConfig+0x602>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	2b01      	cmp	r3, #1
 800398a:	d047      	beq.n	8003a1c <UART_SetConfig+0x5fc>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	2b02      	cmp	r3, #2
 8003992:	d040      	beq.n	8003a16 <UART_SetConfig+0x5f6>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003998:	2b03      	cmp	r3, #3
 800399a:	d039      	beq.n	8003a10 <UART_SetConfig+0x5f0>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	2b04      	cmp	r3, #4
 80039a2:	d032      	beq.n	8003a0a <UART_SetConfig+0x5ea>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a8:	2b05      	cmp	r3, #5
 80039aa:	d02b      	beq.n	8003a04 <UART_SetConfig+0x5e4>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b0:	2b06      	cmp	r3, #6
 80039b2:	d024      	beq.n	80039fe <UART_SetConfig+0x5de>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	2b07      	cmp	r3, #7
 80039ba:	d01d      	beq.n	80039f8 <UART_SetConfig+0x5d8>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	d016      	beq.n	80039f2 <UART_SetConfig+0x5d2>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	2b09      	cmp	r3, #9
 80039ca:	d00f      	beq.n	80039ec <UART_SetConfig+0x5cc>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d0:	2b0a      	cmp	r3, #10
 80039d2:	d008      	beq.n	80039e6 <UART_SetConfig+0x5c6>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	2b0b      	cmp	r3, #11
 80039da:	d101      	bne.n	80039e0 <UART_SetConfig+0x5c0>
 80039dc:	2380      	movs	r3, #128	; 0x80
 80039de:	e022      	b.n	8003a26 <UART_SetConfig+0x606>
 80039e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039e4:	e01f      	b.n	8003a26 <UART_SetConfig+0x606>
 80039e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039ea:	e01c      	b.n	8003a26 <UART_SetConfig+0x606>
 80039ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039f0:	e019      	b.n	8003a26 <UART_SetConfig+0x606>
 80039f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039f6:	e016      	b.n	8003a26 <UART_SetConfig+0x606>
 80039f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80039fc:	e013      	b.n	8003a26 <UART_SetConfig+0x606>
 80039fe:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8003a02:	e010      	b.n	8003a26 <UART_SetConfig+0x606>
 8003a04:	f640 43cc 	movw	r3, #3276	; 0xccc
 8003a08:	e00d      	b.n	8003a26 <UART_SetConfig+0x606>
 8003a0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a0e:	e00a      	b.n	8003a26 <UART_SetConfig+0x606>
 8003a10:	f241 5355 	movw	r3, #5461	; 0x1555
 8003a14:	e007      	b.n	8003a26 <UART_SetConfig+0x606>
 8003a16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a1a:	e004      	b.n	8003a26 <UART_SetConfig+0x606>
 8003a1c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a20:	e001      	b.n	8003a26 <UART_SetConfig+0x606>
 8003a22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a26:	617b      	str	r3, [r7, #20]
        break;
 8003a28:	e002      	b.n	8003a30 <UART_SetConfig+0x610>
      default:
        ret = HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	76fb      	strb	r3, [r7, #27]
        break;
 8003a2e:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f000 86b7 	beq.w	80047a6 <UART_SetConfig+0x1386>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	4413      	add	r3, r2
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d305      	bcc.n	8003a54 <UART_SetConfig+0x634>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d903      	bls.n	8003a5c <UART_SetConfig+0x63c>
      {
        ret = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	76fb      	strb	r3, [r7, #27]
 8003a58:	f000 bea5 	b.w	80047a6 <UART_SetConfig+0x1386>
      }
      else
      {
        switch (clocksource)
 8003a5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a60:	2b08      	cmp	r3, #8
 8003a62:	f200 8277 	bhi.w	8003f54 <UART_SetConfig+0xb34>
 8003a66:	a201      	add	r2, pc, #4	; (adr r2, 8003a6c <UART_SetConfig+0x64c>)
 8003a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6c:	08003a91 	.word	0x08003a91
 8003a70:	08003f55 	.word	0x08003f55
 8003a74:	08003bcf 	.word	0x08003bcf
 8003a78:	08003f55 	.word	0x08003f55
 8003a7c:	08003cc5 	.word	0x08003cc5
 8003a80:	08003f55 	.word	0x08003f55
 8003a84:	08003f55 	.word	0x08003f55
 8003a88:	08003f55 	.word	0x08003f55
 8003a8c:	08003e03 	.word	0x08003e03
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8003a90:	f7ff f9b6 	bl	8002e00 <HAL_RCC_GetPCLK1Freq>
 8003a94:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f04f 0100 	mov.w	r1, #0
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d067      	beq.n	8003b76 <UART_SetConfig+0x756>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d05e      	beq.n	8003b6c <UART_SetConfig+0x74c>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d055      	beq.n	8003b62 <UART_SetConfig+0x742>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aba:	2b03      	cmp	r3, #3
 8003abc:	d04c      	beq.n	8003b58 <UART_SetConfig+0x738>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac2:	2b04      	cmp	r3, #4
 8003ac4:	d043      	beq.n	8003b4e <UART_SetConfig+0x72e>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aca:	2b05      	cmp	r3, #5
 8003acc:	d03a      	beq.n	8003b44 <UART_SetConfig+0x724>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad2:	2b06      	cmp	r3, #6
 8003ad4:	d031      	beq.n	8003b3a <UART_SetConfig+0x71a>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ada:	2b07      	cmp	r3, #7
 8003adc:	d028      	beq.n	8003b30 <UART_SetConfig+0x710>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae2:	2b08      	cmp	r3, #8
 8003ae4:	d01f      	beq.n	8003b26 <UART_SetConfig+0x706>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aea:	2b09      	cmp	r3, #9
 8003aec:	d016      	beq.n	8003b1c <UART_SetConfig+0x6fc>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af2:	2b0a      	cmp	r3, #10
 8003af4:	d00d      	beq.n	8003b12 <UART_SetConfig+0x6f2>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afa:	2b0b      	cmp	r3, #11
 8003afc:	d104      	bne.n	8003b08 <UART_SetConfig+0x6e8>
 8003afe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b02:	f04f 0400 	mov.w	r4, #0
 8003b06:	e03a      	b.n	8003b7e <UART_SetConfig+0x75e>
 8003b08:	f04f 0301 	mov.w	r3, #1
 8003b0c:	f04f 0400 	mov.w	r4, #0
 8003b10:	e035      	b.n	8003b7e <UART_SetConfig+0x75e>
 8003b12:	f04f 0380 	mov.w	r3, #128	; 0x80
 8003b16:	f04f 0400 	mov.w	r4, #0
 8003b1a:	e030      	b.n	8003b7e <UART_SetConfig+0x75e>
 8003b1c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003b20:	f04f 0400 	mov.w	r4, #0
 8003b24:	e02b      	b.n	8003b7e <UART_SetConfig+0x75e>
 8003b26:	f04f 0320 	mov.w	r3, #32
 8003b2a:	f04f 0400 	mov.w	r4, #0
 8003b2e:	e026      	b.n	8003b7e <UART_SetConfig+0x75e>
 8003b30:	f04f 0310 	mov.w	r3, #16
 8003b34:	f04f 0400 	mov.w	r4, #0
 8003b38:	e021      	b.n	8003b7e <UART_SetConfig+0x75e>
 8003b3a:	f04f 030c 	mov.w	r3, #12
 8003b3e:	f04f 0400 	mov.w	r4, #0
 8003b42:	e01c      	b.n	8003b7e <UART_SetConfig+0x75e>
 8003b44:	f04f 030a 	mov.w	r3, #10
 8003b48:	f04f 0400 	mov.w	r4, #0
 8003b4c:	e017      	b.n	8003b7e <UART_SetConfig+0x75e>
 8003b4e:	f04f 0308 	mov.w	r3, #8
 8003b52:	f04f 0400 	mov.w	r4, #0
 8003b56:	e012      	b.n	8003b7e <UART_SetConfig+0x75e>
 8003b58:	f04f 0306 	mov.w	r3, #6
 8003b5c:	f04f 0400 	mov.w	r4, #0
 8003b60:	e00d      	b.n	8003b7e <UART_SetConfig+0x75e>
 8003b62:	f04f 0304 	mov.w	r3, #4
 8003b66:	f04f 0400 	mov.w	r4, #0
 8003b6a:	e008      	b.n	8003b7e <UART_SetConfig+0x75e>
 8003b6c:	f04f 0302 	mov.w	r3, #2
 8003b70:	f04f 0400 	mov.w	r4, #0
 8003b74:	e003      	b.n	8003b7e <UART_SetConfig+0x75e>
 8003b76:	f04f 0301 	mov.w	r3, #1
 8003b7a:	f04f 0400 	mov.w	r4, #0
 8003b7e:	461a      	mov	r2, r3
 8003b80:	4623      	mov	r3, r4
 8003b82:	f7fc fb49 	bl	8000218 <__aeabi_uldivmod>
 8003b86:	4603      	mov	r3, r0
 8003b88:	460c      	mov	r4, r1
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	4622      	mov	r2, r4
 8003b8e:	f04f 0300 	mov.w	r3, #0
 8003b92:	f04f 0400 	mov.w	r4, #0
 8003b96:	0214      	lsls	r4, r2, #8
 8003b98:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003b9c:	020b      	lsls	r3, r1, #8
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	6852      	ldr	r2, [r2, #4]
 8003ba2:	0852      	lsrs	r2, r2, #1
 8003ba4:	4611      	mov	r1, r2
 8003ba6:	f04f 0200 	mov.w	r2, #0
 8003baa:	eb13 0b01 	adds.w	fp, r3, r1
 8003bae:	eb44 0c02 	adc.w	ip, r4, r2
 8003bb2:	4658      	mov	r0, fp
 8003bb4:	4661      	mov	r1, ip
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f04f 0400 	mov.w	r4, #0
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	4623      	mov	r3, r4
 8003bc2:	f7fc fb29 	bl	8000218 <__aeabi_uldivmod>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	460c      	mov	r4, r1
 8003bca:	61fb      	str	r3, [r7, #28]
            break;
 8003bcc:	e1c5      	b.n	8003f5a <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d05b      	beq.n	8003c8e <UART_SetConfig+0x86e>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d053      	beq.n	8003c86 <UART_SetConfig+0x866>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d04b      	beq.n	8003c7e <UART_SetConfig+0x85e>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bea:	2b03      	cmp	r3, #3
 8003bec:	d043      	beq.n	8003c76 <UART_SetConfig+0x856>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf2:	2b04      	cmp	r3, #4
 8003bf4:	d03b      	beq.n	8003c6e <UART_SetConfig+0x84e>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfa:	2b05      	cmp	r3, #5
 8003bfc:	d033      	beq.n	8003c66 <UART_SetConfig+0x846>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c02:	2b06      	cmp	r3, #6
 8003c04:	d02b      	beq.n	8003c5e <UART_SetConfig+0x83e>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0a:	2b07      	cmp	r3, #7
 8003c0c:	d023      	beq.n	8003c56 <UART_SetConfig+0x836>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c12:	2b08      	cmp	r3, #8
 8003c14:	d01b      	beq.n	8003c4e <UART_SetConfig+0x82e>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1a:	2b09      	cmp	r3, #9
 8003c1c:	d013      	beq.n	8003c46 <UART_SetConfig+0x826>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c22:	2b0a      	cmp	r3, #10
 8003c24:	d00b      	beq.n	8003c3e <UART_SetConfig+0x81e>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2a:	2b0b      	cmp	r3, #11
 8003c2c:	d103      	bne.n	8003c36 <UART_SetConfig+0x816>
 8003c2e:	4bae      	ldr	r3, [pc, #696]	; (8003ee8 <UART_SetConfig+0xac8>)
 8003c30:	f04f 0400 	mov.w	r4, #0
 8003c34:	e02e      	b.n	8003c94 <UART_SetConfig+0x874>
 8003c36:	4bad      	ldr	r3, [pc, #692]	; (8003eec <UART_SetConfig+0xacc>)
 8003c38:	f04f 0400 	mov.w	r4, #0
 8003c3c:	e02a      	b.n	8003c94 <UART_SetConfig+0x874>
 8003c3e:	4bac      	ldr	r3, [pc, #688]	; (8003ef0 <UART_SetConfig+0xad0>)
 8003c40:	f04f 0400 	mov.w	r4, #0
 8003c44:	e026      	b.n	8003c94 <UART_SetConfig+0x874>
 8003c46:	4bab      	ldr	r3, [pc, #684]	; (8003ef4 <UART_SetConfig+0xad4>)
 8003c48:	f04f 0400 	mov.w	r4, #0
 8003c4c:	e022      	b.n	8003c94 <UART_SetConfig+0x874>
 8003c4e:	4baa      	ldr	r3, [pc, #680]	; (8003ef8 <UART_SetConfig+0xad8>)
 8003c50:	f04f 0400 	mov.w	r4, #0
 8003c54:	e01e      	b.n	8003c94 <UART_SetConfig+0x874>
 8003c56:	4ba9      	ldr	r3, [pc, #676]	; (8003efc <UART_SetConfig+0xadc>)
 8003c58:	f04f 0400 	mov.w	r4, #0
 8003c5c:	e01a      	b.n	8003c94 <UART_SetConfig+0x874>
 8003c5e:	a49e      	add	r4, pc, #632	; (adr r4, 8003ed8 <UART_SetConfig+0xab8>)
 8003c60:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003c64:	e016      	b.n	8003c94 <UART_SetConfig+0x874>
 8003c66:	4ba6      	ldr	r3, [pc, #664]	; (8003f00 <UART_SetConfig+0xae0>)
 8003c68:	f04f 0400 	mov.w	r4, #0
 8003c6c:	e012      	b.n	8003c94 <UART_SetConfig+0x874>
 8003c6e:	4ba5      	ldr	r3, [pc, #660]	; (8003f04 <UART_SetConfig+0xae4>)
 8003c70:	f04f 0400 	mov.w	r4, #0
 8003c74:	e00e      	b.n	8003c94 <UART_SetConfig+0x874>
 8003c76:	a49a      	add	r4, pc, #616	; (adr r4, 8003ee0 <UART_SetConfig+0xac0>)
 8003c78:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003c7c:	e00a      	b.n	8003c94 <UART_SetConfig+0x874>
 8003c7e:	4ba2      	ldr	r3, [pc, #648]	; (8003f08 <UART_SetConfig+0xae8>)
 8003c80:	f04f 0400 	mov.w	r4, #0
 8003c84:	e006      	b.n	8003c94 <UART_SetConfig+0x874>
 8003c86:	4ba1      	ldr	r3, [pc, #644]	; (8003f0c <UART_SetConfig+0xaec>)
 8003c88:	f04f 0400 	mov.w	r4, #0
 8003c8c:	e002      	b.n	8003c94 <UART_SetConfig+0x874>
 8003c8e:	4b97      	ldr	r3, [pc, #604]	; (8003eec <UART_SetConfig+0xacc>)
 8003c90:	f04f 0400 	mov.w	r4, #0
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	6852      	ldr	r2, [r2, #4]
 8003c98:	0852      	lsrs	r2, r2, #1
 8003c9a:	4611      	mov	r1, r2
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	eb13 0b01 	adds.w	fp, r3, r1
 8003ca4:	eb44 0c02 	adc.w	ip, r4, r2
 8003ca8:	4658      	mov	r0, fp
 8003caa:	4661      	mov	r1, ip
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f04f 0400 	mov.w	r4, #0
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	4623      	mov	r3, r4
 8003cb8:	f7fc faae 	bl	8000218 <__aeabi_uldivmod>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	460c      	mov	r4, r1
 8003cc0:	61fb      	str	r3, [r7, #28]
            break;
 8003cc2:	e14a      	b.n	8003f5a <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8003cc4:	f7ff f82e 	bl	8002d24 <HAL_RCC_GetSysClockFreq>
 8003cc8:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f04f 0100 	mov.w	r1, #0
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d067      	beq.n	8003daa <UART_SetConfig+0x98a>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d05e      	beq.n	8003da0 <UART_SetConfig+0x980>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d055      	beq.n	8003d96 <UART_SetConfig+0x976>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cee:	2b03      	cmp	r3, #3
 8003cf0:	d04c      	beq.n	8003d8c <UART_SetConfig+0x96c>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf6:	2b04      	cmp	r3, #4
 8003cf8:	d043      	beq.n	8003d82 <UART_SetConfig+0x962>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfe:	2b05      	cmp	r3, #5
 8003d00:	d03a      	beq.n	8003d78 <UART_SetConfig+0x958>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	2b06      	cmp	r3, #6
 8003d08:	d031      	beq.n	8003d6e <UART_SetConfig+0x94e>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	2b07      	cmp	r3, #7
 8003d10:	d028      	beq.n	8003d64 <UART_SetConfig+0x944>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d16:	2b08      	cmp	r3, #8
 8003d18:	d01f      	beq.n	8003d5a <UART_SetConfig+0x93a>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1e:	2b09      	cmp	r3, #9
 8003d20:	d016      	beq.n	8003d50 <UART_SetConfig+0x930>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d26:	2b0a      	cmp	r3, #10
 8003d28:	d00d      	beq.n	8003d46 <UART_SetConfig+0x926>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2e:	2b0b      	cmp	r3, #11
 8003d30:	d104      	bne.n	8003d3c <UART_SetConfig+0x91c>
 8003d32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d36:	f04f 0400 	mov.w	r4, #0
 8003d3a:	e03a      	b.n	8003db2 <UART_SetConfig+0x992>
 8003d3c:	f04f 0301 	mov.w	r3, #1
 8003d40:	f04f 0400 	mov.w	r4, #0
 8003d44:	e035      	b.n	8003db2 <UART_SetConfig+0x992>
 8003d46:	f04f 0380 	mov.w	r3, #128	; 0x80
 8003d4a:	f04f 0400 	mov.w	r4, #0
 8003d4e:	e030      	b.n	8003db2 <UART_SetConfig+0x992>
 8003d50:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003d54:	f04f 0400 	mov.w	r4, #0
 8003d58:	e02b      	b.n	8003db2 <UART_SetConfig+0x992>
 8003d5a:	f04f 0320 	mov.w	r3, #32
 8003d5e:	f04f 0400 	mov.w	r4, #0
 8003d62:	e026      	b.n	8003db2 <UART_SetConfig+0x992>
 8003d64:	f04f 0310 	mov.w	r3, #16
 8003d68:	f04f 0400 	mov.w	r4, #0
 8003d6c:	e021      	b.n	8003db2 <UART_SetConfig+0x992>
 8003d6e:	f04f 030c 	mov.w	r3, #12
 8003d72:	f04f 0400 	mov.w	r4, #0
 8003d76:	e01c      	b.n	8003db2 <UART_SetConfig+0x992>
 8003d78:	f04f 030a 	mov.w	r3, #10
 8003d7c:	f04f 0400 	mov.w	r4, #0
 8003d80:	e017      	b.n	8003db2 <UART_SetConfig+0x992>
 8003d82:	f04f 0308 	mov.w	r3, #8
 8003d86:	f04f 0400 	mov.w	r4, #0
 8003d8a:	e012      	b.n	8003db2 <UART_SetConfig+0x992>
 8003d8c:	f04f 0306 	mov.w	r3, #6
 8003d90:	f04f 0400 	mov.w	r4, #0
 8003d94:	e00d      	b.n	8003db2 <UART_SetConfig+0x992>
 8003d96:	f04f 0304 	mov.w	r3, #4
 8003d9a:	f04f 0400 	mov.w	r4, #0
 8003d9e:	e008      	b.n	8003db2 <UART_SetConfig+0x992>
 8003da0:	f04f 0302 	mov.w	r3, #2
 8003da4:	f04f 0400 	mov.w	r4, #0
 8003da8:	e003      	b.n	8003db2 <UART_SetConfig+0x992>
 8003daa:	f04f 0301 	mov.w	r3, #1
 8003dae:	f04f 0400 	mov.w	r4, #0
 8003db2:	461a      	mov	r2, r3
 8003db4:	4623      	mov	r3, r4
 8003db6:	f7fc fa2f 	bl	8000218 <__aeabi_uldivmod>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	460c      	mov	r4, r1
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	4622      	mov	r2, r4
 8003dc2:	f04f 0300 	mov.w	r3, #0
 8003dc6:	f04f 0400 	mov.w	r4, #0
 8003dca:	0214      	lsls	r4, r2, #8
 8003dcc:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003dd0:	020b      	lsls	r3, r1, #8
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	6852      	ldr	r2, [r2, #4]
 8003dd6:	0852      	lsrs	r2, r2, #1
 8003dd8:	4611      	mov	r1, r2
 8003dda:	f04f 0200 	mov.w	r2, #0
 8003dde:	eb13 0b01 	adds.w	fp, r3, r1
 8003de2:	eb44 0c02 	adc.w	ip, r4, r2
 8003de6:	4658      	mov	r0, fp
 8003de8:	4661      	mov	r1, ip
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f04f 0400 	mov.w	r4, #0
 8003df2:	461a      	mov	r2, r3
 8003df4:	4623      	mov	r3, r4
 8003df6:	f7fc fa0f 	bl	8000218 <__aeabi_uldivmod>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	460c      	mov	r4, r1
 8003dfe:	61fb      	str	r3, [r7, #28]
            break;
 8003e00:	e0ab      	b.n	8003f5a <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f000 8088 	beq.w	8003f1c <UART_SetConfig+0xafc>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d05b      	beq.n	8003ecc <UART_SetConfig+0xaac>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d052      	beq.n	8003ec2 <UART_SetConfig+0xaa2>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	2b03      	cmp	r3, #3
 8003e22:	d04a      	beq.n	8003eba <UART_SetConfig+0xa9a>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	d041      	beq.n	8003eb0 <UART_SetConfig+0xa90>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e30:	2b05      	cmp	r3, #5
 8003e32:	d039      	beq.n	8003ea8 <UART_SetConfig+0xa88>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	2b06      	cmp	r3, #6
 8003e3a:	d031      	beq.n	8003ea0 <UART_SetConfig+0xa80>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e40:	2b07      	cmp	r3, #7
 8003e42:	d028      	beq.n	8003e96 <UART_SetConfig+0xa76>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	2b08      	cmp	r3, #8
 8003e4a:	d01f      	beq.n	8003e8c <UART_SetConfig+0xa6c>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e50:	2b09      	cmp	r3, #9
 8003e52:	d016      	beq.n	8003e82 <UART_SetConfig+0xa62>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e58:	2b0a      	cmp	r3, #10
 8003e5a:	d00d      	beq.n	8003e78 <UART_SetConfig+0xa58>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e60:	2b0b      	cmp	r3, #11
 8003e62:	d104      	bne.n	8003e6e <UART_SetConfig+0xa4e>
 8003e64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e68:	f04f 0400 	mov.w	r4, #0
 8003e6c:	e05a      	b.n	8003f24 <UART_SetConfig+0xb04>
 8003e6e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003e72:	f04f 0400 	mov.w	r4, #0
 8003e76:	e055      	b.n	8003f24 <UART_SetConfig+0xb04>
 8003e78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e7c:	f04f 0400 	mov.w	r4, #0
 8003e80:	e050      	b.n	8003f24 <UART_SetConfig+0xb04>
 8003e82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e86:	f04f 0400 	mov.w	r4, #0
 8003e8a:	e04b      	b.n	8003f24 <UART_SetConfig+0xb04>
 8003e8c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003e90:	f04f 0400 	mov.w	r4, #0
 8003e94:	e046      	b.n	8003f24 <UART_SetConfig+0xb04>
 8003e96:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003e9a:	f04f 0400 	mov.w	r4, #0
 8003e9e:	e041      	b.n	8003f24 <UART_SetConfig+0xb04>
 8003ea0:	4b1b      	ldr	r3, [pc, #108]	; (8003f10 <UART_SetConfig+0xaf0>)
 8003ea2:	f04f 0400 	mov.w	r4, #0
 8003ea6:	e03d      	b.n	8003f24 <UART_SetConfig+0xb04>
 8003ea8:	4b1a      	ldr	r3, [pc, #104]	; (8003f14 <UART_SetConfig+0xaf4>)
 8003eaa:	f04f 0400 	mov.w	r4, #0
 8003eae:	e039      	b.n	8003f24 <UART_SetConfig+0xb04>
 8003eb0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003eb4:	f04f 0400 	mov.w	r4, #0
 8003eb8:	e034      	b.n	8003f24 <UART_SetConfig+0xb04>
 8003eba:	4b17      	ldr	r3, [pc, #92]	; (8003f18 <UART_SetConfig+0xaf8>)
 8003ebc:	f04f 0400 	mov.w	r4, #0
 8003ec0:	e030      	b.n	8003f24 <UART_SetConfig+0xb04>
 8003ec2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003ec6:	f04f 0400 	mov.w	r4, #0
 8003eca:	e02b      	b.n	8003f24 <UART_SetConfig+0xb04>
 8003ecc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003ed0:	f04f 0400 	mov.w	r4, #0
 8003ed4:	e026      	b.n	8003f24 <UART_SetConfig+0xb04>
 8003ed6:	bf00      	nop
 8003ed8:	14585500 	.word	0x14585500
 8003edc:	00000000 	.word	0x00000000
 8003ee0:	28b0aa00 	.word	0x28b0aa00
 8003ee4:	00000000 	.word	0x00000000
 8003ee8:	00f42400 	.word	0x00f42400
 8003eec:	f4240000 	.word	0xf4240000
 8003ef0:	01e84800 	.word	0x01e84800
 8003ef4:	03d09000 	.word	0x03d09000
 8003ef8:	07a12000 	.word	0x07a12000
 8003efc:	0f424000 	.word	0x0f424000
 8003f00:	186a0000 	.word	0x186a0000
 8003f04:	1e848000 	.word	0x1e848000
 8003f08:	3d090000 	.word	0x3d090000
 8003f0c:	7a120000 	.word	0x7a120000
 8003f10:	000aaa00 	.word	0x000aaa00
 8003f14:	000ccc00 	.word	0x000ccc00
 8003f18:	00155500 	.word	0x00155500
 8003f1c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003f20:	f04f 0400 	mov.w	r4, #0
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	6852      	ldr	r2, [r2, #4]
 8003f28:	0852      	lsrs	r2, r2, #1
 8003f2a:	4611      	mov	r1, r2
 8003f2c:	f04f 0200 	mov.w	r2, #0
 8003f30:	eb13 0b01 	adds.w	fp, r3, r1
 8003f34:	eb44 0c02 	adc.w	ip, r4, r2
 8003f38:	4658      	mov	r0, fp
 8003f3a:	4661      	mov	r1, ip
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f04f 0400 	mov.w	r4, #0
 8003f44:	461a      	mov	r2, r3
 8003f46:	4623      	mov	r3, r4
 8003f48:	f7fc f966 	bl	8000218 <__aeabi_uldivmod>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	460c      	mov	r4, r1
 8003f50:	61fb      	str	r3, [r7, #28]
            break;
 8003f52:	e002      	b.n	8003f5a <UART_SetConfig+0xb3a>
          default:
            ret = HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	76fb      	strb	r3, [r7, #27]
            break;
 8003f58:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f60:	d309      	bcc.n	8003f76 <UART_SetConfig+0xb56>
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f68:	d205      	bcs.n	8003f76 <UART_SetConfig+0xb56>
        {
          huart->Instance->BRR = usartdiv;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	69fa      	ldr	r2, [r7, #28]
 8003f70:	60da      	str	r2, [r3, #12]
 8003f72:	f000 bc18 	b.w	80047a6 <UART_SetConfig+0x1386>
        }
        else
        {
          ret = HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	76fb      	strb	r3, [r7, #27]
 8003f7a:	f000 bc14 	b.w	80047a6 <UART_SetConfig+0x1386>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	69db      	ldr	r3, [r3, #28]
 8003f82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f86:	f040 8204 	bne.w	8004392 <UART_SetConfig+0xf72>
  {
    switch (clocksource)
 8003f8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f8e:	2b08      	cmp	r3, #8
 8003f90:	f200 81df 	bhi.w	8004352 <UART_SetConfig+0xf32>
 8003f94:	a201      	add	r2, pc, #4	; (adr r2, 8003f9c <UART_SetConfig+0xb7c>)
 8003f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f9a:	bf00      	nop
 8003f9c:	08003fc1 	.word	0x08003fc1
 8003fa0:	08004079 	.word	0x08004079
 8003fa4:	08004131 	.word	0x08004131
 8003fa8:	08004353 	.word	0x08004353
 8003fac:	080041d9 	.word	0x080041d9
 8003fb0:	08004353 	.word	0x08004353
 8003fb4:	08004353 	.word	0x08004353
 8003fb8:	08004353 	.word	0x08004353
 8003fbc:	08004291 	.word	0x08004291
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fc0:	f7fe ff1e 	bl	8002e00 <HAL_RCC_GetPCLK1Freq>
 8003fc4:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d044      	beq.n	8004058 <UART_SetConfig+0xc38>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d03e      	beq.n	8004054 <UART_SetConfig+0xc34>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d038      	beq.n	8004050 <UART_SetConfig+0xc30>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	2b03      	cmp	r3, #3
 8003fe4:	d032      	beq.n	800404c <UART_SetConfig+0xc2c>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fea:	2b04      	cmp	r3, #4
 8003fec:	d02c      	beq.n	8004048 <UART_SetConfig+0xc28>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff2:	2b05      	cmp	r3, #5
 8003ff4:	d026      	beq.n	8004044 <UART_SetConfig+0xc24>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffa:	2b06      	cmp	r3, #6
 8003ffc:	d020      	beq.n	8004040 <UART_SetConfig+0xc20>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004002:	2b07      	cmp	r3, #7
 8004004:	d01a      	beq.n	800403c <UART_SetConfig+0xc1c>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	2b08      	cmp	r3, #8
 800400c:	d014      	beq.n	8004038 <UART_SetConfig+0xc18>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004012:	2b09      	cmp	r3, #9
 8004014:	d00e      	beq.n	8004034 <UART_SetConfig+0xc14>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401a:	2b0a      	cmp	r3, #10
 800401c:	d008      	beq.n	8004030 <UART_SetConfig+0xc10>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004022:	2b0b      	cmp	r3, #11
 8004024:	d102      	bne.n	800402c <UART_SetConfig+0xc0c>
 8004026:	f44f 7380 	mov.w	r3, #256	; 0x100
 800402a:	e016      	b.n	800405a <UART_SetConfig+0xc3a>
 800402c:	2301      	movs	r3, #1
 800402e:	e014      	b.n	800405a <UART_SetConfig+0xc3a>
 8004030:	2380      	movs	r3, #128	; 0x80
 8004032:	e012      	b.n	800405a <UART_SetConfig+0xc3a>
 8004034:	2340      	movs	r3, #64	; 0x40
 8004036:	e010      	b.n	800405a <UART_SetConfig+0xc3a>
 8004038:	2320      	movs	r3, #32
 800403a:	e00e      	b.n	800405a <UART_SetConfig+0xc3a>
 800403c:	2310      	movs	r3, #16
 800403e:	e00c      	b.n	800405a <UART_SetConfig+0xc3a>
 8004040:	230c      	movs	r3, #12
 8004042:	e00a      	b.n	800405a <UART_SetConfig+0xc3a>
 8004044:	230a      	movs	r3, #10
 8004046:	e008      	b.n	800405a <UART_SetConfig+0xc3a>
 8004048:	2308      	movs	r3, #8
 800404a:	e006      	b.n	800405a <UART_SetConfig+0xc3a>
 800404c:	2306      	movs	r3, #6
 800404e:	e004      	b.n	800405a <UART_SetConfig+0xc3a>
 8004050:	2304      	movs	r3, #4
 8004052:	e002      	b.n	800405a <UART_SetConfig+0xc3a>
 8004054:	2302      	movs	r3, #2
 8004056:	e000      	b.n	800405a <UART_SetConfig+0xc3a>
 8004058:	2301      	movs	r3, #1
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004060:	005a      	lsls	r2, r3, #1
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	085b      	lsrs	r3, r3, #1
 8004068:	441a      	add	r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004072:	b29b      	uxth	r3, r3
 8004074:	61fb      	str	r3, [r7, #28]
        break;
 8004076:	e16f      	b.n	8004358 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004078:	f7fe fed8 	bl	8002e2c <HAL_RCC_GetPCLK2Freq>
 800407c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004082:	2b00      	cmp	r3, #0
 8004084:	d044      	beq.n	8004110 <UART_SetConfig+0xcf0>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	2b01      	cmp	r3, #1
 800408c:	d03e      	beq.n	800410c <UART_SetConfig+0xcec>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004092:	2b02      	cmp	r3, #2
 8004094:	d038      	beq.n	8004108 <UART_SetConfig+0xce8>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409a:	2b03      	cmp	r3, #3
 800409c:	d032      	beq.n	8004104 <UART_SetConfig+0xce4>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a2:	2b04      	cmp	r3, #4
 80040a4:	d02c      	beq.n	8004100 <UART_SetConfig+0xce0>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040aa:	2b05      	cmp	r3, #5
 80040ac:	d026      	beq.n	80040fc <UART_SetConfig+0xcdc>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	2b06      	cmp	r3, #6
 80040b4:	d020      	beq.n	80040f8 <UART_SetConfig+0xcd8>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ba:	2b07      	cmp	r3, #7
 80040bc:	d01a      	beq.n	80040f4 <UART_SetConfig+0xcd4>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c2:	2b08      	cmp	r3, #8
 80040c4:	d014      	beq.n	80040f0 <UART_SetConfig+0xcd0>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ca:	2b09      	cmp	r3, #9
 80040cc:	d00e      	beq.n	80040ec <UART_SetConfig+0xccc>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d2:	2b0a      	cmp	r3, #10
 80040d4:	d008      	beq.n	80040e8 <UART_SetConfig+0xcc8>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	2b0b      	cmp	r3, #11
 80040dc:	d102      	bne.n	80040e4 <UART_SetConfig+0xcc4>
 80040de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040e2:	e016      	b.n	8004112 <UART_SetConfig+0xcf2>
 80040e4:	2301      	movs	r3, #1
 80040e6:	e014      	b.n	8004112 <UART_SetConfig+0xcf2>
 80040e8:	2380      	movs	r3, #128	; 0x80
 80040ea:	e012      	b.n	8004112 <UART_SetConfig+0xcf2>
 80040ec:	2340      	movs	r3, #64	; 0x40
 80040ee:	e010      	b.n	8004112 <UART_SetConfig+0xcf2>
 80040f0:	2320      	movs	r3, #32
 80040f2:	e00e      	b.n	8004112 <UART_SetConfig+0xcf2>
 80040f4:	2310      	movs	r3, #16
 80040f6:	e00c      	b.n	8004112 <UART_SetConfig+0xcf2>
 80040f8:	230c      	movs	r3, #12
 80040fa:	e00a      	b.n	8004112 <UART_SetConfig+0xcf2>
 80040fc:	230a      	movs	r3, #10
 80040fe:	e008      	b.n	8004112 <UART_SetConfig+0xcf2>
 8004100:	2308      	movs	r3, #8
 8004102:	e006      	b.n	8004112 <UART_SetConfig+0xcf2>
 8004104:	2306      	movs	r3, #6
 8004106:	e004      	b.n	8004112 <UART_SetConfig+0xcf2>
 8004108:	2304      	movs	r3, #4
 800410a:	e002      	b.n	8004112 <UART_SetConfig+0xcf2>
 800410c:	2302      	movs	r3, #2
 800410e:	e000      	b.n	8004112 <UART_SetConfig+0xcf2>
 8004110:	2301      	movs	r3, #1
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	fbb2 f3f3 	udiv	r3, r2, r3
 8004118:	005a      	lsls	r2, r3, #1
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	085b      	lsrs	r3, r3, #1
 8004120:	441a      	add	r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	fbb2 f3f3 	udiv	r3, r2, r3
 800412a:	b29b      	uxth	r3, r3
 800412c:	61fb      	str	r3, [r7, #28]
        break;
 800412e:	e113      	b.n	8004358 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	2b00      	cmp	r3, #0
 8004136:	d043      	beq.n	80041c0 <UART_SetConfig+0xda0>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413c:	2b01      	cmp	r3, #1
 800413e:	d03d      	beq.n	80041bc <UART_SetConfig+0xd9c>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004144:	2b02      	cmp	r3, #2
 8004146:	d037      	beq.n	80041b8 <UART_SetConfig+0xd98>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414c:	2b03      	cmp	r3, #3
 800414e:	d031      	beq.n	80041b4 <UART_SetConfig+0xd94>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	2b04      	cmp	r3, #4
 8004156:	d02b      	beq.n	80041b0 <UART_SetConfig+0xd90>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	2b05      	cmp	r3, #5
 800415e:	d025      	beq.n	80041ac <UART_SetConfig+0xd8c>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004164:	2b06      	cmp	r3, #6
 8004166:	d01f      	beq.n	80041a8 <UART_SetConfig+0xd88>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	2b07      	cmp	r3, #7
 800416e:	d019      	beq.n	80041a4 <UART_SetConfig+0xd84>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004174:	2b08      	cmp	r3, #8
 8004176:	d013      	beq.n	80041a0 <UART_SetConfig+0xd80>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417c:	2b09      	cmp	r3, #9
 800417e:	d00d      	beq.n	800419c <UART_SetConfig+0xd7c>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004184:	2b0a      	cmp	r3, #10
 8004186:	d007      	beq.n	8004198 <UART_SetConfig+0xd78>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418c:	2b0b      	cmp	r3, #11
 800418e:	d101      	bne.n	8004194 <UART_SetConfig+0xd74>
 8004190:	4b8d      	ldr	r3, [pc, #564]	; (80043c8 <UART_SetConfig+0xfa8>)
 8004192:	e016      	b.n	80041c2 <UART_SetConfig+0xda2>
 8004194:	4b8d      	ldr	r3, [pc, #564]	; (80043cc <UART_SetConfig+0xfac>)
 8004196:	e014      	b.n	80041c2 <UART_SetConfig+0xda2>
 8004198:	4b8d      	ldr	r3, [pc, #564]	; (80043d0 <UART_SetConfig+0xfb0>)
 800419a:	e012      	b.n	80041c2 <UART_SetConfig+0xda2>
 800419c:	4b8d      	ldr	r3, [pc, #564]	; (80043d4 <UART_SetConfig+0xfb4>)
 800419e:	e010      	b.n	80041c2 <UART_SetConfig+0xda2>
 80041a0:	4b8d      	ldr	r3, [pc, #564]	; (80043d8 <UART_SetConfig+0xfb8>)
 80041a2:	e00e      	b.n	80041c2 <UART_SetConfig+0xda2>
 80041a4:	4b8d      	ldr	r3, [pc, #564]	; (80043dc <UART_SetConfig+0xfbc>)
 80041a6:	e00c      	b.n	80041c2 <UART_SetConfig+0xda2>
 80041a8:	4b8d      	ldr	r3, [pc, #564]	; (80043e0 <UART_SetConfig+0xfc0>)
 80041aa:	e00a      	b.n	80041c2 <UART_SetConfig+0xda2>
 80041ac:	4b8d      	ldr	r3, [pc, #564]	; (80043e4 <UART_SetConfig+0xfc4>)
 80041ae:	e008      	b.n	80041c2 <UART_SetConfig+0xda2>
 80041b0:	4b8d      	ldr	r3, [pc, #564]	; (80043e8 <UART_SetConfig+0xfc8>)
 80041b2:	e006      	b.n	80041c2 <UART_SetConfig+0xda2>
 80041b4:	4b8d      	ldr	r3, [pc, #564]	; (80043ec <UART_SetConfig+0xfcc>)
 80041b6:	e004      	b.n	80041c2 <UART_SetConfig+0xda2>
 80041b8:	4b8d      	ldr	r3, [pc, #564]	; (80043f0 <UART_SetConfig+0xfd0>)
 80041ba:	e002      	b.n	80041c2 <UART_SetConfig+0xda2>
 80041bc:	4b8d      	ldr	r3, [pc, #564]	; (80043f4 <UART_SetConfig+0xfd4>)
 80041be:	e000      	b.n	80041c2 <UART_SetConfig+0xda2>
 80041c0:	4b82      	ldr	r3, [pc, #520]	; (80043cc <UART_SetConfig+0xfac>)
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	6852      	ldr	r2, [r2, #4]
 80041c6:	0852      	lsrs	r2, r2, #1
 80041c8:	441a      	add	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	61fb      	str	r3, [r7, #28]
        break;
 80041d6:	e0bf      	b.n	8004358 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041d8:	f7fe fda4 	bl	8002d24 <HAL_RCC_GetSysClockFreq>
 80041dc:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d044      	beq.n	8004270 <UART_SetConfig+0xe50>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d03e      	beq.n	800426c <UART_SetConfig+0xe4c>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d038      	beq.n	8004268 <UART_SetConfig+0xe48>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fa:	2b03      	cmp	r3, #3
 80041fc:	d032      	beq.n	8004264 <UART_SetConfig+0xe44>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004202:	2b04      	cmp	r3, #4
 8004204:	d02c      	beq.n	8004260 <UART_SetConfig+0xe40>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420a:	2b05      	cmp	r3, #5
 800420c:	d026      	beq.n	800425c <UART_SetConfig+0xe3c>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004212:	2b06      	cmp	r3, #6
 8004214:	d020      	beq.n	8004258 <UART_SetConfig+0xe38>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	2b07      	cmp	r3, #7
 800421c:	d01a      	beq.n	8004254 <UART_SetConfig+0xe34>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004222:	2b08      	cmp	r3, #8
 8004224:	d014      	beq.n	8004250 <UART_SetConfig+0xe30>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422a:	2b09      	cmp	r3, #9
 800422c:	d00e      	beq.n	800424c <UART_SetConfig+0xe2c>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004232:	2b0a      	cmp	r3, #10
 8004234:	d008      	beq.n	8004248 <UART_SetConfig+0xe28>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423a:	2b0b      	cmp	r3, #11
 800423c:	d102      	bne.n	8004244 <UART_SetConfig+0xe24>
 800423e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004242:	e016      	b.n	8004272 <UART_SetConfig+0xe52>
 8004244:	2301      	movs	r3, #1
 8004246:	e014      	b.n	8004272 <UART_SetConfig+0xe52>
 8004248:	2380      	movs	r3, #128	; 0x80
 800424a:	e012      	b.n	8004272 <UART_SetConfig+0xe52>
 800424c:	2340      	movs	r3, #64	; 0x40
 800424e:	e010      	b.n	8004272 <UART_SetConfig+0xe52>
 8004250:	2320      	movs	r3, #32
 8004252:	e00e      	b.n	8004272 <UART_SetConfig+0xe52>
 8004254:	2310      	movs	r3, #16
 8004256:	e00c      	b.n	8004272 <UART_SetConfig+0xe52>
 8004258:	230c      	movs	r3, #12
 800425a:	e00a      	b.n	8004272 <UART_SetConfig+0xe52>
 800425c:	230a      	movs	r3, #10
 800425e:	e008      	b.n	8004272 <UART_SetConfig+0xe52>
 8004260:	2308      	movs	r3, #8
 8004262:	e006      	b.n	8004272 <UART_SetConfig+0xe52>
 8004264:	2306      	movs	r3, #6
 8004266:	e004      	b.n	8004272 <UART_SetConfig+0xe52>
 8004268:	2304      	movs	r3, #4
 800426a:	e002      	b.n	8004272 <UART_SetConfig+0xe52>
 800426c:	2302      	movs	r3, #2
 800426e:	e000      	b.n	8004272 <UART_SetConfig+0xe52>
 8004270:	2301      	movs	r3, #1
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	fbb2 f3f3 	udiv	r3, r2, r3
 8004278:	005a      	lsls	r2, r3, #1
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	085b      	lsrs	r3, r3, #1
 8004280:	441a      	add	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	fbb2 f3f3 	udiv	r3, r2, r3
 800428a:	b29b      	uxth	r3, r3
 800428c:	61fb      	str	r3, [r7, #28]
        break;
 800428e:	e063      	b.n	8004358 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	2b00      	cmp	r3, #0
 8004296:	d04f      	beq.n	8004338 <UART_SetConfig+0xf18>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429c:	2b01      	cmp	r3, #1
 800429e:	d048      	beq.n	8004332 <UART_SetConfig+0xf12>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d041      	beq.n	800432c <UART_SetConfig+0xf0c>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ac:	2b03      	cmp	r3, #3
 80042ae:	d03a      	beq.n	8004326 <UART_SetConfig+0xf06>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	2b04      	cmp	r3, #4
 80042b6:	d033      	beq.n	8004320 <UART_SetConfig+0xf00>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	2b05      	cmp	r3, #5
 80042be:	d02c      	beq.n	800431a <UART_SetConfig+0xefa>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c4:	2b06      	cmp	r3, #6
 80042c6:	d025      	beq.n	8004314 <UART_SetConfig+0xef4>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042cc:	2b07      	cmp	r3, #7
 80042ce:	d01e      	beq.n	800430e <UART_SetConfig+0xeee>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	2b08      	cmp	r3, #8
 80042d6:	d017      	beq.n	8004308 <UART_SetConfig+0xee8>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042dc:	2b09      	cmp	r3, #9
 80042de:	d010      	beq.n	8004302 <UART_SetConfig+0xee2>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e4:	2b0a      	cmp	r3, #10
 80042e6:	d009      	beq.n	80042fc <UART_SetConfig+0xedc>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	2b0b      	cmp	r3, #11
 80042ee:	d102      	bne.n	80042f6 <UART_SetConfig+0xed6>
 80042f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042f4:	e022      	b.n	800433c <UART_SetConfig+0xf1c>
 80042f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80042fa:	e01f      	b.n	800433c <UART_SetConfig+0xf1c>
 80042fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004300:	e01c      	b.n	800433c <UART_SetConfig+0xf1c>
 8004302:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004306:	e019      	b.n	800433c <UART_SetConfig+0xf1c>
 8004308:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800430c:	e016      	b.n	800433c <UART_SetConfig+0xf1c>
 800430e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004312:	e013      	b.n	800433c <UART_SetConfig+0xf1c>
 8004314:	f241 5354 	movw	r3, #5460	; 0x1554
 8004318:	e010      	b.n	800433c <UART_SetConfig+0xf1c>
 800431a:	f641 1398 	movw	r3, #6552	; 0x1998
 800431e:	e00d      	b.n	800433c <UART_SetConfig+0xf1c>
 8004320:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004324:	e00a      	b.n	800433c <UART_SetConfig+0xf1c>
 8004326:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800432a:	e007      	b.n	800433c <UART_SetConfig+0xf1c>
 800432c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004330:	e004      	b.n	800433c <UART_SetConfig+0xf1c>
 8004332:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004336:	e001      	b.n	800433c <UART_SetConfig+0xf1c>
 8004338:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	6852      	ldr	r2, [r2, #4]
 8004340:	0852      	lsrs	r2, r2, #1
 8004342:	441a      	add	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	fbb2 f3f3 	udiv	r3, r2, r3
 800434c:	b29b      	uxth	r3, r3
 800434e:	61fb      	str	r3, [r7, #28]
        break;
 8004350:	e002      	b.n	8004358 <UART_SetConfig+0xf38>
      default:
        ret = HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	76fb      	strb	r3, [r7, #27]
        break;
 8004356:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	2b0f      	cmp	r3, #15
 800435c:	d916      	bls.n	800438c <UART_SetConfig+0xf6c>
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004364:	d212      	bcs.n	800438c <UART_SetConfig+0xf6c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	b29b      	uxth	r3, r3
 800436a:	f023 030f 	bic.w	r3, r3, #15
 800436e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	085b      	lsrs	r3, r3, #1
 8004374:	b29b      	uxth	r3, r3
 8004376:	f003 0307 	and.w	r3, r3, #7
 800437a:	b29a      	uxth	r2, r3
 800437c:	89fb      	ldrh	r3, [r7, #14]
 800437e:	4313      	orrs	r3, r2
 8004380:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	89fa      	ldrh	r2, [r7, #14]
 8004388:	60da      	str	r2, [r3, #12]
 800438a:	e20c      	b.n	80047a6 <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	76fb      	strb	r3, [r7, #27]
 8004390:	e209      	b.n	80047a6 <UART_SetConfig+0x1386>
    }
  }
  else
  {
    switch (clocksource)
 8004392:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004396:	2b08      	cmp	r3, #8
 8004398:	f200 81f4 	bhi.w	8004784 <UART_SetConfig+0x1364>
 800439c:	a201      	add	r2, pc, #4	; (adr r2, 80043a4 <UART_SetConfig+0xf84>)
 800439e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a2:	bf00      	nop
 80043a4:	080043f9 	.word	0x080043f9
 80043a8:	080044af 	.word	0x080044af
 80043ac:	08004565 	.word	0x08004565
 80043b0:	08004785 	.word	0x08004785
 80043b4:	0800460f 	.word	0x0800460f
 80043b8:	08004785 	.word	0x08004785
 80043bc:	08004785 	.word	0x08004785
 80043c0:	08004785 	.word	0x08004785
 80043c4:	080046c5 	.word	0x080046c5
 80043c8:	0001e848 	.word	0x0001e848
 80043cc:	01e84800 	.word	0x01e84800
 80043d0:	0003d090 	.word	0x0003d090
 80043d4:	0007a120 	.word	0x0007a120
 80043d8:	000f4240 	.word	0x000f4240
 80043dc:	001e8480 	.word	0x001e8480
 80043e0:	0028b0aa 	.word	0x0028b0aa
 80043e4:	0030d400 	.word	0x0030d400
 80043e8:	003d0900 	.word	0x003d0900
 80043ec:	00516154 	.word	0x00516154
 80043f0:	007a1200 	.word	0x007a1200
 80043f4:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043f8:	f7fe fd02 	bl	8002e00 <HAL_RCC_GetPCLK1Freq>
 80043fc:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004402:	2b00      	cmp	r3, #0
 8004404:	d044      	beq.n	8004490 <UART_SetConfig+0x1070>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440a:	2b01      	cmp	r3, #1
 800440c:	d03e      	beq.n	800448c <UART_SetConfig+0x106c>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004412:	2b02      	cmp	r3, #2
 8004414:	d038      	beq.n	8004488 <UART_SetConfig+0x1068>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441a:	2b03      	cmp	r3, #3
 800441c:	d032      	beq.n	8004484 <UART_SetConfig+0x1064>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004422:	2b04      	cmp	r3, #4
 8004424:	d02c      	beq.n	8004480 <UART_SetConfig+0x1060>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442a:	2b05      	cmp	r3, #5
 800442c:	d026      	beq.n	800447c <UART_SetConfig+0x105c>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004432:	2b06      	cmp	r3, #6
 8004434:	d020      	beq.n	8004478 <UART_SetConfig+0x1058>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443a:	2b07      	cmp	r3, #7
 800443c:	d01a      	beq.n	8004474 <UART_SetConfig+0x1054>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004442:	2b08      	cmp	r3, #8
 8004444:	d014      	beq.n	8004470 <UART_SetConfig+0x1050>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444a:	2b09      	cmp	r3, #9
 800444c:	d00e      	beq.n	800446c <UART_SetConfig+0x104c>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004452:	2b0a      	cmp	r3, #10
 8004454:	d008      	beq.n	8004468 <UART_SetConfig+0x1048>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445a:	2b0b      	cmp	r3, #11
 800445c:	d102      	bne.n	8004464 <UART_SetConfig+0x1044>
 800445e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004462:	e016      	b.n	8004492 <UART_SetConfig+0x1072>
 8004464:	2301      	movs	r3, #1
 8004466:	e014      	b.n	8004492 <UART_SetConfig+0x1072>
 8004468:	2380      	movs	r3, #128	; 0x80
 800446a:	e012      	b.n	8004492 <UART_SetConfig+0x1072>
 800446c:	2340      	movs	r3, #64	; 0x40
 800446e:	e010      	b.n	8004492 <UART_SetConfig+0x1072>
 8004470:	2320      	movs	r3, #32
 8004472:	e00e      	b.n	8004492 <UART_SetConfig+0x1072>
 8004474:	2310      	movs	r3, #16
 8004476:	e00c      	b.n	8004492 <UART_SetConfig+0x1072>
 8004478:	230c      	movs	r3, #12
 800447a:	e00a      	b.n	8004492 <UART_SetConfig+0x1072>
 800447c:	230a      	movs	r3, #10
 800447e:	e008      	b.n	8004492 <UART_SetConfig+0x1072>
 8004480:	2308      	movs	r3, #8
 8004482:	e006      	b.n	8004492 <UART_SetConfig+0x1072>
 8004484:	2306      	movs	r3, #6
 8004486:	e004      	b.n	8004492 <UART_SetConfig+0x1072>
 8004488:	2304      	movs	r3, #4
 800448a:	e002      	b.n	8004492 <UART_SetConfig+0x1072>
 800448c:	2302      	movs	r3, #2
 800448e:	e000      	b.n	8004492 <UART_SetConfig+0x1072>
 8004490:	2301      	movs	r3, #1
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	fbb2 f2f3 	udiv	r2, r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	085b      	lsrs	r3, r3, #1
 800449e:	441a      	add	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	61fb      	str	r3, [r7, #28]
        break;
 80044ac:	e16d      	b.n	800478a <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044ae:	f7fe fcbd 	bl	8002e2c <HAL_RCC_GetPCLK2Freq>
 80044b2:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d044      	beq.n	8004546 <UART_SetConfig+0x1126>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d03e      	beq.n	8004542 <UART_SetConfig+0x1122>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d038      	beq.n	800453e <UART_SetConfig+0x111e>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d0:	2b03      	cmp	r3, #3
 80044d2:	d032      	beq.n	800453a <UART_SetConfig+0x111a>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d8:	2b04      	cmp	r3, #4
 80044da:	d02c      	beq.n	8004536 <UART_SetConfig+0x1116>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e0:	2b05      	cmp	r3, #5
 80044e2:	d026      	beq.n	8004532 <UART_SetConfig+0x1112>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e8:	2b06      	cmp	r3, #6
 80044ea:	d020      	beq.n	800452e <UART_SetConfig+0x110e>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f0:	2b07      	cmp	r3, #7
 80044f2:	d01a      	beq.n	800452a <UART_SetConfig+0x110a>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f8:	2b08      	cmp	r3, #8
 80044fa:	d014      	beq.n	8004526 <UART_SetConfig+0x1106>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004500:	2b09      	cmp	r3, #9
 8004502:	d00e      	beq.n	8004522 <UART_SetConfig+0x1102>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	2b0a      	cmp	r3, #10
 800450a:	d008      	beq.n	800451e <UART_SetConfig+0x10fe>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004510:	2b0b      	cmp	r3, #11
 8004512:	d102      	bne.n	800451a <UART_SetConfig+0x10fa>
 8004514:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004518:	e016      	b.n	8004548 <UART_SetConfig+0x1128>
 800451a:	2301      	movs	r3, #1
 800451c:	e014      	b.n	8004548 <UART_SetConfig+0x1128>
 800451e:	2380      	movs	r3, #128	; 0x80
 8004520:	e012      	b.n	8004548 <UART_SetConfig+0x1128>
 8004522:	2340      	movs	r3, #64	; 0x40
 8004524:	e010      	b.n	8004548 <UART_SetConfig+0x1128>
 8004526:	2320      	movs	r3, #32
 8004528:	e00e      	b.n	8004548 <UART_SetConfig+0x1128>
 800452a:	2310      	movs	r3, #16
 800452c:	e00c      	b.n	8004548 <UART_SetConfig+0x1128>
 800452e:	230c      	movs	r3, #12
 8004530:	e00a      	b.n	8004548 <UART_SetConfig+0x1128>
 8004532:	230a      	movs	r3, #10
 8004534:	e008      	b.n	8004548 <UART_SetConfig+0x1128>
 8004536:	2308      	movs	r3, #8
 8004538:	e006      	b.n	8004548 <UART_SetConfig+0x1128>
 800453a:	2306      	movs	r3, #6
 800453c:	e004      	b.n	8004548 <UART_SetConfig+0x1128>
 800453e:	2304      	movs	r3, #4
 8004540:	e002      	b.n	8004548 <UART_SetConfig+0x1128>
 8004542:	2302      	movs	r3, #2
 8004544:	e000      	b.n	8004548 <UART_SetConfig+0x1128>
 8004546:	2301      	movs	r3, #1
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	fbb2 f2f3 	udiv	r2, r2, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	085b      	lsrs	r3, r3, #1
 8004554:	441a      	add	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	fbb2 f3f3 	udiv	r3, r2, r3
 800455e:	b29b      	uxth	r3, r3
 8004560:	61fb      	str	r3, [r7, #28]
        break;
 8004562:	e112      	b.n	800478a <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004568:	2b00      	cmp	r3, #0
 800456a:	d044      	beq.n	80045f6 <UART_SetConfig+0x11d6>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	2b01      	cmp	r3, #1
 8004572:	d03e      	beq.n	80045f2 <UART_SetConfig+0x11d2>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004578:	2b02      	cmp	r3, #2
 800457a:	d038      	beq.n	80045ee <UART_SetConfig+0x11ce>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	2b03      	cmp	r3, #3
 8004582:	d032      	beq.n	80045ea <UART_SetConfig+0x11ca>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004588:	2b04      	cmp	r3, #4
 800458a:	d02c      	beq.n	80045e6 <UART_SetConfig+0x11c6>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004590:	2b05      	cmp	r3, #5
 8004592:	d026      	beq.n	80045e2 <UART_SetConfig+0x11c2>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004598:	2b06      	cmp	r3, #6
 800459a:	d020      	beq.n	80045de <UART_SetConfig+0x11be>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a0:	2b07      	cmp	r3, #7
 80045a2:	d01a      	beq.n	80045da <UART_SetConfig+0x11ba>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a8:	2b08      	cmp	r3, #8
 80045aa:	d014      	beq.n	80045d6 <UART_SetConfig+0x11b6>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b0:	2b09      	cmp	r3, #9
 80045b2:	d00e      	beq.n	80045d2 <UART_SetConfig+0x11b2>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b8:	2b0a      	cmp	r3, #10
 80045ba:	d008      	beq.n	80045ce <UART_SetConfig+0x11ae>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c0:	2b0b      	cmp	r3, #11
 80045c2:	d102      	bne.n	80045ca <UART_SetConfig+0x11aa>
 80045c4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80045c8:	e016      	b.n	80045f8 <UART_SetConfig+0x11d8>
 80045ca:	4b81      	ldr	r3, [pc, #516]	; (80047d0 <UART_SetConfig+0x13b0>)
 80045cc:	e014      	b.n	80045f8 <UART_SetConfig+0x11d8>
 80045ce:	4b81      	ldr	r3, [pc, #516]	; (80047d4 <UART_SetConfig+0x13b4>)
 80045d0:	e012      	b.n	80045f8 <UART_SetConfig+0x11d8>
 80045d2:	4b81      	ldr	r3, [pc, #516]	; (80047d8 <UART_SetConfig+0x13b8>)
 80045d4:	e010      	b.n	80045f8 <UART_SetConfig+0x11d8>
 80045d6:	4b81      	ldr	r3, [pc, #516]	; (80047dc <UART_SetConfig+0x13bc>)
 80045d8:	e00e      	b.n	80045f8 <UART_SetConfig+0x11d8>
 80045da:	4b81      	ldr	r3, [pc, #516]	; (80047e0 <UART_SetConfig+0x13c0>)
 80045dc:	e00c      	b.n	80045f8 <UART_SetConfig+0x11d8>
 80045de:	4b81      	ldr	r3, [pc, #516]	; (80047e4 <UART_SetConfig+0x13c4>)
 80045e0:	e00a      	b.n	80045f8 <UART_SetConfig+0x11d8>
 80045e2:	4b81      	ldr	r3, [pc, #516]	; (80047e8 <UART_SetConfig+0x13c8>)
 80045e4:	e008      	b.n	80045f8 <UART_SetConfig+0x11d8>
 80045e6:	4b81      	ldr	r3, [pc, #516]	; (80047ec <UART_SetConfig+0x13cc>)
 80045e8:	e006      	b.n	80045f8 <UART_SetConfig+0x11d8>
 80045ea:	4b81      	ldr	r3, [pc, #516]	; (80047f0 <UART_SetConfig+0x13d0>)
 80045ec:	e004      	b.n	80045f8 <UART_SetConfig+0x11d8>
 80045ee:	4b81      	ldr	r3, [pc, #516]	; (80047f4 <UART_SetConfig+0x13d4>)
 80045f0:	e002      	b.n	80045f8 <UART_SetConfig+0x11d8>
 80045f2:	4b81      	ldr	r3, [pc, #516]	; (80047f8 <UART_SetConfig+0x13d8>)
 80045f4:	e000      	b.n	80045f8 <UART_SetConfig+0x11d8>
 80045f6:	4b76      	ldr	r3, [pc, #472]	; (80047d0 <UART_SetConfig+0x13b0>)
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	6852      	ldr	r2, [r2, #4]
 80045fc:	0852      	lsrs	r2, r2, #1
 80045fe:	441a      	add	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	fbb2 f3f3 	udiv	r3, r2, r3
 8004608:	b29b      	uxth	r3, r3
 800460a:	61fb      	str	r3, [r7, #28]
        break;
 800460c:	e0bd      	b.n	800478a <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800460e:	f7fe fb89 	bl	8002d24 <HAL_RCC_GetSysClockFreq>
 8004612:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004618:	2b00      	cmp	r3, #0
 800461a:	d044      	beq.n	80046a6 <UART_SetConfig+0x1286>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004620:	2b01      	cmp	r3, #1
 8004622:	d03e      	beq.n	80046a2 <UART_SetConfig+0x1282>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	2b02      	cmp	r3, #2
 800462a:	d038      	beq.n	800469e <UART_SetConfig+0x127e>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004630:	2b03      	cmp	r3, #3
 8004632:	d032      	beq.n	800469a <UART_SetConfig+0x127a>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004638:	2b04      	cmp	r3, #4
 800463a:	d02c      	beq.n	8004696 <UART_SetConfig+0x1276>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004640:	2b05      	cmp	r3, #5
 8004642:	d026      	beq.n	8004692 <UART_SetConfig+0x1272>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004648:	2b06      	cmp	r3, #6
 800464a:	d020      	beq.n	800468e <UART_SetConfig+0x126e>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004650:	2b07      	cmp	r3, #7
 8004652:	d01a      	beq.n	800468a <UART_SetConfig+0x126a>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004658:	2b08      	cmp	r3, #8
 800465a:	d014      	beq.n	8004686 <UART_SetConfig+0x1266>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004660:	2b09      	cmp	r3, #9
 8004662:	d00e      	beq.n	8004682 <UART_SetConfig+0x1262>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004668:	2b0a      	cmp	r3, #10
 800466a:	d008      	beq.n	800467e <UART_SetConfig+0x125e>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004670:	2b0b      	cmp	r3, #11
 8004672:	d102      	bne.n	800467a <UART_SetConfig+0x125a>
 8004674:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004678:	e016      	b.n	80046a8 <UART_SetConfig+0x1288>
 800467a:	2301      	movs	r3, #1
 800467c:	e014      	b.n	80046a8 <UART_SetConfig+0x1288>
 800467e:	2380      	movs	r3, #128	; 0x80
 8004680:	e012      	b.n	80046a8 <UART_SetConfig+0x1288>
 8004682:	2340      	movs	r3, #64	; 0x40
 8004684:	e010      	b.n	80046a8 <UART_SetConfig+0x1288>
 8004686:	2320      	movs	r3, #32
 8004688:	e00e      	b.n	80046a8 <UART_SetConfig+0x1288>
 800468a:	2310      	movs	r3, #16
 800468c:	e00c      	b.n	80046a8 <UART_SetConfig+0x1288>
 800468e:	230c      	movs	r3, #12
 8004690:	e00a      	b.n	80046a8 <UART_SetConfig+0x1288>
 8004692:	230a      	movs	r3, #10
 8004694:	e008      	b.n	80046a8 <UART_SetConfig+0x1288>
 8004696:	2308      	movs	r3, #8
 8004698:	e006      	b.n	80046a8 <UART_SetConfig+0x1288>
 800469a:	2306      	movs	r3, #6
 800469c:	e004      	b.n	80046a8 <UART_SetConfig+0x1288>
 800469e:	2304      	movs	r3, #4
 80046a0:	e002      	b.n	80046a8 <UART_SetConfig+0x1288>
 80046a2:	2302      	movs	r3, #2
 80046a4:	e000      	b.n	80046a8 <UART_SetConfig+0x1288>
 80046a6:	2301      	movs	r3, #1
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	085b      	lsrs	r3, r3, #1
 80046b4:	441a      	add	r2, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80046be:	b29b      	uxth	r3, r3
 80046c0:	61fb      	str	r3, [r7, #28]
        break;
 80046c2:	e062      	b.n	800478a <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d04e      	beq.n	800476a <UART_SetConfig+0x134a>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d047      	beq.n	8004764 <UART_SetConfig+0x1344>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d040      	beq.n	800475e <UART_SetConfig+0x133e>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e0:	2b03      	cmp	r3, #3
 80046e2:	d039      	beq.n	8004758 <UART_SetConfig+0x1338>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e8:	2b04      	cmp	r3, #4
 80046ea:	d032      	beq.n	8004752 <UART_SetConfig+0x1332>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f0:	2b05      	cmp	r3, #5
 80046f2:	d02b      	beq.n	800474c <UART_SetConfig+0x132c>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f8:	2b06      	cmp	r3, #6
 80046fa:	d024      	beq.n	8004746 <UART_SetConfig+0x1326>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004700:	2b07      	cmp	r3, #7
 8004702:	d01d      	beq.n	8004740 <UART_SetConfig+0x1320>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004708:	2b08      	cmp	r3, #8
 800470a:	d016      	beq.n	800473a <UART_SetConfig+0x131a>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004710:	2b09      	cmp	r3, #9
 8004712:	d00f      	beq.n	8004734 <UART_SetConfig+0x1314>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004718:	2b0a      	cmp	r3, #10
 800471a:	d008      	beq.n	800472e <UART_SetConfig+0x130e>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004720:	2b0b      	cmp	r3, #11
 8004722:	d101      	bne.n	8004728 <UART_SetConfig+0x1308>
 8004724:	2380      	movs	r3, #128	; 0x80
 8004726:	e022      	b.n	800476e <UART_SetConfig+0x134e>
 8004728:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800472c:	e01f      	b.n	800476e <UART_SetConfig+0x134e>
 800472e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004732:	e01c      	b.n	800476e <UART_SetConfig+0x134e>
 8004734:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004738:	e019      	b.n	800476e <UART_SetConfig+0x134e>
 800473a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800473e:	e016      	b.n	800476e <UART_SetConfig+0x134e>
 8004740:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004744:	e013      	b.n	800476e <UART_SetConfig+0x134e>
 8004746:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800474a:	e010      	b.n	800476e <UART_SetConfig+0x134e>
 800474c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8004750:	e00d      	b.n	800476e <UART_SetConfig+0x134e>
 8004752:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004756:	e00a      	b.n	800476e <UART_SetConfig+0x134e>
 8004758:	f241 5355 	movw	r3, #5461	; 0x1555
 800475c:	e007      	b.n	800476e <UART_SetConfig+0x134e>
 800475e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004762:	e004      	b.n	800476e <UART_SetConfig+0x134e>
 8004764:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004768:	e001      	b.n	800476e <UART_SetConfig+0x134e>
 800476a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	6852      	ldr	r2, [r2, #4]
 8004772:	0852      	lsrs	r2, r2, #1
 8004774:	441a      	add	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	fbb2 f3f3 	udiv	r3, r2, r3
 800477e:	b29b      	uxth	r3, r3
 8004780:	61fb      	str	r3, [r7, #28]
        break;
 8004782:	e002      	b.n	800478a <UART_SetConfig+0x136a>
      default:
        ret = HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	76fb      	strb	r3, [r7, #27]
        break;
 8004788:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	2b0f      	cmp	r3, #15
 800478e:	d908      	bls.n	80047a2 <UART_SetConfig+0x1382>
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004796:	d204      	bcs.n	80047a2 <UART_SetConfig+0x1382>
    {
      huart->Instance->BRR = usartdiv;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	69fa      	ldr	r2, [r7, #28]
 800479e:	60da      	str	r2, [r3, #12]
 80047a0:	e001      	b.n	80047a6 <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80047c2:	7efb      	ldrb	r3, [r7, #27]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3728      	adds	r7, #40	; 0x28
 80047c8:	46bd      	mov	sp, r7
 80047ca:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80047ce:	bf00      	nop
 80047d0:	00f42400 	.word	0x00f42400
 80047d4:	0001e848 	.word	0x0001e848
 80047d8:	0003d090 	.word	0x0003d090
 80047dc:	0007a120 	.word	0x0007a120
 80047e0:	000f4240 	.word	0x000f4240
 80047e4:	00145855 	.word	0x00145855
 80047e8:	00186a00 	.word	0x00186a00
 80047ec:	001e8480 	.word	0x001e8480
 80047f0:	0028b0aa 	.word	0x0028b0aa
 80047f4:	003d0900 	.word	0x003d0900
 80047f8:	007a1200 	.word	0x007a1200

080047fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00a      	beq.n	8004826 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	430a      	orrs	r2, r1
 8004824:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00a      	beq.n	8004848 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	430a      	orrs	r2, r1
 8004846:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484c:	f003 0304 	and.w	r3, r3, #4
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00a      	beq.n	800486a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	430a      	orrs	r2, r1
 8004868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486e:	f003 0308 	and.w	r3, r3, #8
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00a      	beq.n	800488c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	430a      	orrs	r2, r1
 800488a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004890:	f003 0310 	and.w	r3, r3, #16
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00a      	beq.n	80048ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	430a      	orrs	r2, r1
 80048ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b2:	f003 0320 	and.w	r3, r3, #32
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00a      	beq.n	80048d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	430a      	orrs	r2, r1
 80048ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d01a      	beq.n	8004912 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048fa:	d10a      	bne.n	8004912 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	430a      	orrs	r2, r1
 8004910:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00a      	beq.n	8004934 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	430a      	orrs	r2, r1
 8004932:	605a      	str	r2, [r3, #4]
  }
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b086      	sub	sp, #24
 8004944:	af02      	add	r7, sp, #8
 8004946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004950:	f7fc f994 	bl	8000c7c <HAL_GetTick>
 8004954:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0308 	and.w	r3, r3, #8
 8004960:	2b08      	cmp	r3, #8
 8004962:	d10e      	bne.n	8004982 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004964:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004968:	9300      	str	r3, [sp, #0]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 f82c 	bl	80049d0 <UART_WaitOnFlagUntilTimeout>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e022      	b.n	80049c8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0304 	and.w	r3, r3, #4
 800498c:	2b04      	cmp	r3, #4
 800498e:	d10e      	bne.n	80049ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004990:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004994:	9300      	str	r3, [sp, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 f816 	bl	80049d0 <UART_WaitOnFlagUntilTimeout>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d001      	beq.n	80049ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e00c      	b.n	80049c8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2220      	movs	r2, #32
 80049b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2220      	movs	r2, #32
 80049ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3710      	adds	r7, #16
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	603b      	str	r3, [r7, #0]
 80049dc:	4613      	mov	r3, r2
 80049de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049e0:	e02c      	b.n	8004a3c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049e8:	d028      	beq.n	8004a3c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ea:	f7fc f947 	bl	8000c7c <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d302      	bcc.n	8004a00 <UART_WaitOnFlagUntilTimeout+0x30>
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d11d      	bne.n	8004a3c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a0e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	689a      	ldr	r2, [r3, #8]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f022 0201 	bic.w	r2, r2, #1
 8004a1e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2220      	movs	r2, #32
 8004a24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e00f      	b.n	8004a5c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	69da      	ldr	r2, [r3, #28]
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	4013      	ands	r3, r2
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	bf0c      	ite	eq
 8004a4c:	2301      	moveq	r3, #1
 8004a4e:	2300      	movne	r3, #0
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	461a      	mov	r2, r3
 8004a54:	79fb      	ldrb	r3, [r7, #7]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d0c3      	beq.n	80049e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d101      	bne.n	8004a7a <HAL_UARTEx_DisableFifoMode+0x16>
 8004a76:	2302      	movs	r3, #2
 8004a78:	e027      	b.n	8004aca <HAL_UARTEx_DisableFifoMode+0x66>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2224      	movs	r2, #36	; 0x24
 8004a86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f022 0201 	bic.w	r2, r2, #1
 8004aa0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004aa8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2220      	movs	r2, #32
 8004abc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3714      	adds	r7, #20
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr

08004ad6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b084      	sub	sp, #16
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
 8004ade:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d101      	bne.n	8004aee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004aea:	2302      	movs	r3, #2
 8004aec:	e02d      	b.n	8004b4a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2224      	movs	r2, #36	; 0x24
 8004afa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f022 0201 	bic.w	r2, r2, #1
 8004b14:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	683a      	ldr	r2, [r7, #0]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f850 	bl	8004bd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b084      	sub	sp, #16
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
 8004b5a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d101      	bne.n	8004b6a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004b66:	2302      	movs	r3, #2
 8004b68:	e02d      	b.n	8004bc6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2224      	movs	r2, #36	; 0x24
 8004b76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f022 0201 	bic.w	r2, r2, #1
 8004b90:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f812 	bl	8004bd0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
	...

08004bd0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b089      	sub	sp, #36	; 0x24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004bd8:	4a2f      	ldr	r2, [pc, #188]	; (8004c98 <UARTEx_SetNbDataToProcess+0xc8>)
 8004bda:	f107 0314 	add.w	r3, r7, #20
 8004bde:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004be2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004be6:	4a2d      	ldr	r2, [pc, #180]	; (8004c9c <UARTEx_SetNbDataToProcess+0xcc>)
 8004be8:	f107 030c 	add.w	r3, r7, #12
 8004bec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004bf0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d108      	bne.n	8004c0e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004c0c:	e03d      	b.n	8004c8a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004c0e:	2308      	movs	r3, #8
 8004c10:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004c12:	2308      	movs	r3, #8
 8004c14:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	0e5b      	lsrs	r3, r3, #25
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	f003 0307 	and.w	r3, r3, #7
 8004c24:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	0f5b      	lsrs	r3, r3, #29
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	f003 0307 	and.w	r3, r3, #7
 8004c34:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004c36:	7fbb      	ldrb	r3, [r7, #30]
 8004c38:	7f3a      	ldrb	r2, [r7, #28]
 8004c3a:	f107 0120 	add.w	r1, r7, #32
 8004c3e:	440a      	add	r2, r1
 8004c40:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004c44:	fb02 f303 	mul.w	r3, r2, r3
 8004c48:	7f3a      	ldrb	r2, [r7, #28]
 8004c4a:	f107 0120 	add.w	r1, r7, #32
 8004c4e:	440a      	add	r2, r1
 8004c50:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004c54:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c58:	b29a      	uxth	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004c60:	7ffb      	ldrb	r3, [r7, #31]
 8004c62:	7f7a      	ldrb	r2, [r7, #29]
 8004c64:	f107 0120 	add.w	r1, r7, #32
 8004c68:	440a      	add	r2, r1
 8004c6a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004c6e:	fb02 f303 	mul.w	r3, r2, r3
 8004c72:	7f7a      	ldrb	r2, [r7, #29]
 8004c74:	f107 0120 	add.w	r1, r7, #32
 8004c78:	440a      	add	r2, r1
 8004c7a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004c7e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c82:	b29a      	uxth	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004c8a:	bf00      	nop
 8004c8c:	3724      	adds	r7, #36	; 0x24
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	08004d10 	.word	0x08004d10
 8004c9c:	08004d18 	.word	0x08004d18

08004ca0 <__libc_init_array>:
 8004ca0:	b570      	push	{r4, r5, r6, lr}
 8004ca2:	4e0d      	ldr	r6, [pc, #52]	; (8004cd8 <__libc_init_array+0x38>)
 8004ca4:	4c0d      	ldr	r4, [pc, #52]	; (8004cdc <__libc_init_array+0x3c>)
 8004ca6:	1ba4      	subs	r4, r4, r6
 8004ca8:	10a4      	asrs	r4, r4, #2
 8004caa:	2500      	movs	r5, #0
 8004cac:	42a5      	cmp	r5, r4
 8004cae:	d109      	bne.n	8004cc4 <__libc_init_array+0x24>
 8004cb0:	4e0b      	ldr	r6, [pc, #44]	; (8004ce0 <__libc_init_array+0x40>)
 8004cb2:	4c0c      	ldr	r4, [pc, #48]	; (8004ce4 <__libc_init_array+0x44>)
 8004cb4:	f000 f820 	bl	8004cf8 <_init>
 8004cb8:	1ba4      	subs	r4, r4, r6
 8004cba:	10a4      	asrs	r4, r4, #2
 8004cbc:	2500      	movs	r5, #0
 8004cbe:	42a5      	cmp	r5, r4
 8004cc0:	d105      	bne.n	8004cce <__libc_init_array+0x2e>
 8004cc2:	bd70      	pop	{r4, r5, r6, pc}
 8004cc4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004cc8:	4798      	blx	r3
 8004cca:	3501      	adds	r5, #1
 8004ccc:	e7ee      	b.n	8004cac <__libc_init_array+0xc>
 8004cce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004cd2:	4798      	blx	r3
 8004cd4:	3501      	adds	r5, #1
 8004cd6:	e7f2      	b.n	8004cbe <__libc_init_array+0x1e>
 8004cd8:	08004d40 	.word	0x08004d40
 8004cdc:	08004d40 	.word	0x08004d40
 8004ce0:	08004d40 	.word	0x08004d40
 8004ce4:	08004d44 	.word	0x08004d44

08004ce8 <memset>:
 8004ce8:	4402      	add	r2, r0
 8004cea:	4603      	mov	r3, r0
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d100      	bne.n	8004cf2 <memset+0xa>
 8004cf0:	4770      	bx	lr
 8004cf2:	f803 1b01 	strb.w	r1, [r3], #1
 8004cf6:	e7f9      	b.n	8004cec <memset+0x4>

08004cf8 <_init>:
 8004cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cfa:	bf00      	nop
 8004cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cfe:	bc08      	pop	{r3}
 8004d00:	469e      	mov	lr, r3
 8004d02:	4770      	bx	lr

08004d04 <_fini>:
 8004d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d06:	bf00      	nop
 8004d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d0a:	bc08      	pop	{r3}
 8004d0c:	469e      	mov	lr, r3
 8004d0e:	4770      	bx	lr
