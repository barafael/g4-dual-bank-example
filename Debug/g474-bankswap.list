
g474-bankswap.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045f0  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080047c8  080047c8  000147c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047f0  080047f0  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  080047f0  080047f0  000147f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047f8  080047f8  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047f8  080047f8  000147f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047fc  080047fc  000147fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08004800  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000002c  0800482c  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  0800482c  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000afd2  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c08  00000000  00000000  0002b02e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a60  00000000  00000000  0002cc38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000978  00000000  00000000  0002d698  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023d20  00000000  00000000  0002e010  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008cc7  00000000  00000000  00051d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e3786  00000000  00000000  0005a9f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013e17d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002978  00000000  00000000  0013e1f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000002c 	.word	0x2000002c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080047b0 	.word	0x080047b0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000030 	.word	0x20000030
 8000214:	080047b0 	.word	0x080047b0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <applyUpdateAndReset>:
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
void applyUpdateAndReset() {
 8000518:	b580      	push	{r7, lr}
 800051a:	b08e      	sub	sp, #56	; 0x38
 800051c:	af00      	add	r7, sp, #0
    FLASH_OBProgramInitTypeDef OBInit;
    HAL_FLASH_Unlock();
 800051e:	f000 fc59 	bl	8000dd4 <HAL_FLASH_Unlock>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000522:	4b20      	ldr	r3, [pc, #128]	; (80005a4 <applyUpdateAndReset+0x8c>)
 8000524:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000528:	611a      	str	r2, [r3, #16]
    HAL_FLASH_OB_Unlock();
 800052a:	f000 fc8f 	bl	8000e4c <HAL_FLASH_OB_Unlock>

    HAL_FLASHEx_OBGetConfig(&OBInit);
 800052e:	1d3b      	adds	r3, r7, #4
 8000530:	4618      	mov	r0, r3
 8000532:	f000 fdc3 	bl	80010bc <HAL_FLASHEx_OBGetConfig>

    OBInit.OptionType = OPTIONBYTE_USER;
 8000536:	2304      	movs	r3, #4
 8000538:	607b      	str	r3, [r7, #4]
    OBInit.USERType = OB_USER_BFB2;
 800053a:	2380      	movs	r3, #128	; 0x80
 800053c:	61bb      	str	r3, [r7, #24]

    if (((OBInit.USERConfig) & (OB_BFB2_ENABLE)) == OB_BFB2_ENABLE) {
 800053e:	69fb      	ldr	r3, [r7, #28]
 8000540:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000544:	2b00      	cmp	r3, #0
 8000546:	d002      	beq.n	800054e <applyUpdateAndReset+0x36>
        OBInit.USERConfig = OB_BFB2_DISABLE;
 8000548:	2300      	movs	r3, #0
 800054a:	61fb      	str	r3, [r7, #28]
 800054c:	e002      	b.n	8000554 <applyUpdateAndReset+0x3c>
    } else {
        OBInit.USERConfig = OB_BFB2_ENABLE;
 800054e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000552:	61fb      	str	r3, [r7, #28]
    }
    if (HAL_FLASHEx_OBProgram(&OBInit) != HAL_OK) {
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	4618      	mov	r0, r3
 8000558:	f000 fd20 	bl	8000f9c <HAL_FLASHEx_OBProgram>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d009      	beq.n	8000576 <applyUpdateAndReset+0x5e>
        // uint32_t errorCode = HAL_FLASH_GetError();
        while (1) {
            HAL_Delay(1000);
 8000562:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000566:	f000 fb03 	bl	8000b70 <HAL_Delay>
            HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800056a:	2120      	movs	r1, #32
 800056c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000570:	f001 fc0c 	bl	8001d8c <HAL_GPIO_TogglePin>
            HAL_Delay(1000);
 8000574:	e7f5      	b.n	8000562 <applyUpdateAndReset+0x4a>
        }
    }
    if (HAL_FLASH_OB_Launch() != HAL_OK) {
 8000576:	f000 fcab 	bl	8000ed0 <HAL_FLASH_OB_Launch>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d008      	beq.n	8000592 <applyUpdateAndReset+0x7a>
        //uint32_t errorCode = HAL_FLASH_GetError();
        while (1) {
            HAL_Delay(100);
 8000580:	2064      	movs	r0, #100	; 0x64
 8000582:	f000 faf5 	bl	8000b70 <HAL_Delay>
            HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000586:	2120      	movs	r1, #32
 8000588:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800058c:	f001 fbfe 	bl	8001d8c <HAL_GPIO_TogglePin>
            HAL_Delay(100);
 8000590:	e7f6      	b.n	8000580 <applyUpdateAndReset+0x68>
        }
    }
    HAL_FLASH_OB_Lock();
 8000592:	f000 fc81 	bl	8000e98 <HAL_FLASH_OB_Lock>
    HAL_FLASH_Lock();
 8000596:	f000 fc3f 	bl	8000e18 <HAL_FLASH_Lock>
}
 800059a:	bf00      	nop
 800059c:	3738      	adds	r7, #56	; 0x38
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40022000 	.word	0x40022000

080005a8 <getActiveBank>:

uint8_t getActiveBank() {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08e      	sub	sp, #56	; 0x38
 80005ac:	af00      	add	r7, sp, #0
    FLASH_OBProgramInitTypeDef OBInit;
    HAL_FLASH_Unlock();
 80005ae:	f000 fc11 	bl	8000dd4 <HAL_FLASH_Unlock>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80005b2:	4b12      	ldr	r3, [pc, #72]	; (80005fc <getActiveBank+0x54>)
 80005b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80005b8:	611a      	str	r2, [r3, #16]
    HAL_FLASH_OB_Unlock();
 80005ba:	f000 fc47 	bl	8000e4c <HAL_FLASH_OB_Unlock>

    HAL_FLASHEx_OBGetConfig(&OBInit);
 80005be:	463b      	mov	r3, r7
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 fd7b 	bl	80010bc <HAL_FLASHEx_OBGetConfig>

    OBInit.OptionType = OPTIONBYTE_USER;
 80005c6:	2304      	movs	r3, #4
 80005c8:	603b      	str	r3, [r7, #0]
    OBInit.USERType = OB_USER_BFB2;
 80005ca:	2380      	movs	r3, #128	; 0x80
 80005cc:	617b      	str	r3, [r7, #20]

    uint8_t result;
    if (((OBInit.USERConfig) & (OB_BFB2_ENABLE)) == OB_BFB2_ENABLE) {
 80005ce:	69bb      	ldr	r3, [r7, #24]
 80005d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d003      	beq.n	80005e0 <getActiveBank+0x38>
    	result = 2;
 80005d8:	2302      	movs	r3, #2
 80005da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80005de:	e002      	b.n	80005e6 <getActiveBank+0x3e>
    } else {
    	result = 1;
 80005e0:	2301      	movs	r3, #1
 80005e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }
    HAL_FLASH_OB_Lock();
 80005e6:	f000 fc57 	bl	8000e98 <HAL_FLASH_OB_Lock>
    HAL_FLASH_Lock();
 80005ea:	f000 fc15 	bl	8000e18 <HAL_FLASH_Lock>
    return result;
 80005ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	3738      	adds	r7, #56	; 0x38
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40022000 	.word	0x40022000

08000600 <HAL_GPIO_EXTI_Callback>:

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
void HAL_GPIO_EXTI_Callback(uint16_t pin) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	80fb      	strh	r3, [r7, #6]
    if (pin == GPIO_PIN_13) {
 800060a:	88fb      	ldrh	r3, [r7, #6]
 800060c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000610:	d101      	bne.n	8000616 <HAL_GPIO_EXTI_Callback+0x16>
        applyUpdateAndReset();
 8000612:	f7ff ff81 	bl	8000518 <applyUpdateAndReset>
    }
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}

0800061e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061e:	b580      	push	{r7, lr}
 8000620:	b082      	sub	sp, #8
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000624:	f000 fa33 	bl	8000a8e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000628:	f000 f819 	bl	800065e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062c:	f000 f8c4 	bl	80007b8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000630:	f000 f87c 	bl	800072c <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t bank = getActiveBank();
 8000634:	f7ff ffb8 	bl	80005a8 <getActiveBank>
 8000638:	4603      	mov	r3, r0
 800063a:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800063c:	2120      	movs	r1, #32
 800063e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000642:	f001 fba3 	bl	8001d8c <HAL_GPIO_TogglePin>
    if (bank == 1) {
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	2b01      	cmp	r3, #1
 800064a:	d104      	bne.n	8000656 <main+0x38>
        HAL_Delay(1000);
 800064c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000650:	f000 fa8e 	bl	8000b70 <HAL_Delay>
 8000654:	e7f2      	b.n	800063c <main+0x1e>
    } else {
        HAL_Delay(250);
 8000656:	20fa      	movs	r0, #250	; 0xfa
 8000658:	f000 fa8a 	bl	8000b70 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800065c:	e7ee      	b.n	800063c <main+0x1e>

0800065e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065e:	b580      	push	{r7, lr}
 8000660:	b0a8      	sub	sp, #160	; 0xa0
 8000662:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000664:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000668:	2238      	movs	r2, #56	; 0x38
 800066a:	2100      	movs	r1, #0
 800066c:	4618      	mov	r0, r3
 800066e:	f004 f897 	bl	80047a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000672:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]
 8000680:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000682:	463b      	mov	r3, r7
 8000684:	2254      	movs	r2, #84	; 0x54
 8000686:	2100      	movs	r1, #0
 8000688:	4618      	mov	r0, r3
 800068a:	f004 f889 	bl	80047a0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800068e:	2000      	movs	r0, #0
 8000690:	f001 fbae 	bl	8001df0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000694:	2302      	movs	r3, #2
 8000696:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000698:	f44f 7380 	mov.w	r3, #256	; 0x100
 800069c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069e:	2340      	movs	r3, #64	; 0x40
 80006a0:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a2:	2302      	movs	r3, #2
 80006a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a8:	2302      	movs	r3, #2
 80006aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80006ae:	2304      	movs	r3, #4
 80006b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80006b4:	2355      	movs	r3, #85	; 0x55
 80006b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ba:	2302      	movs	r3, #2
 80006bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006c6:	2302      	movs	r3, #2
 80006c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006cc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80006d0:	4618      	mov	r0, r3
 80006d2:	f001 fc31 	bl	8001f38 <HAL_RCC_OscConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80006dc:	f000 f8dc 	bl	8000898 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e0:	230f      	movs	r3, #15
 80006e2:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e4:	2303      	movs	r3, #3
 80006e6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 80006f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006f8:	2108      	movs	r1, #8
 80006fa:	4618      	mov	r0, r3
 80006fc:	f001 ff34 	bl	8002568 <HAL_RCC_ClockConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000706:	f000 f8c7 	bl	8000898 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800070a:	2320      	movs	r3, #32
 800070c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800070e:	2300      	movs	r3, #0
 8000710:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000712:	463b      	mov	r3, r7
 8000714:	4618      	mov	r0, r3
 8000716:	f002 f943 	bl	80029a0 <HAL_RCCEx_PeriphCLKConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000720:	f000 f8ba 	bl	8000898 <Error_Handler>
  }
}
 8000724:	bf00      	nop
 8000726:	37a0      	adds	r7, #160	; 0xa0
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000730:	4b1f      	ldr	r3, [pc, #124]	; (80007b0 <MX_LPUART1_UART_Init+0x84>)
 8000732:	4a20      	ldr	r2, [pc, #128]	; (80007b4 <MX_LPUART1_UART_Init+0x88>)
 8000734:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000736:	4b1e      	ldr	r3, [pc, #120]	; (80007b0 <MX_LPUART1_UART_Init+0x84>)
 8000738:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800073c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800073e:	4b1c      	ldr	r3, [pc, #112]	; (80007b0 <MX_LPUART1_UART_Init+0x84>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000744:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <MX_LPUART1_UART_Init+0x84>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800074a:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <MX_LPUART1_UART_Init+0x84>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000750:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <MX_LPUART1_UART_Init+0x84>)
 8000752:	220c      	movs	r2, #12
 8000754:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000756:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <MX_LPUART1_UART_Init+0x84>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800075c:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <MX_LPUART1_UART_Init+0x84>)
 800075e:	2200      	movs	r2, #0
 8000760:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <MX_LPUART1_UART_Init+0x84>)
 8000764:	2200      	movs	r2, #0
 8000766:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000768:	4811      	ldr	r0, [pc, #68]	; (80007b0 <MX_LPUART1_UART_Init+0x84>)
 800076a:	f002 fb65 	bl	8002e38 <HAL_UART_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000774:	f000 f890 	bl	8000898 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000778:	2100      	movs	r1, #0
 800077a:	480d      	ldr	r0, [pc, #52]	; (80007b0 <MX_LPUART1_UART_Init+0x84>)
 800077c:	f003 ff07 	bl	800458e <HAL_UARTEx_SetTxFifoThreshold>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_LPUART1_UART_Init+0x5e>
  {
    Error_Handler();
 8000786:	f000 f887 	bl	8000898 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800078a:	2100      	movs	r1, #0
 800078c:	4808      	ldr	r0, [pc, #32]	; (80007b0 <MX_LPUART1_UART_Init+0x84>)
 800078e:	f003 ff3c 	bl	800460a <HAL_UARTEx_SetRxFifoThreshold>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_LPUART1_UART_Init+0x70>
  {
    Error_Handler();
 8000798:	f000 f87e 	bl	8000898 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800079c:	4804      	ldr	r0, [pc, #16]	; (80007b0 <MX_LPUART1_UART_Init+0x84>)
 800079e:	f003 febd 	bl	800451c <HAL_UARTEx_DisableFifoMode>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_LPUART1_UART_Init+0x80>
  {
    Error_Handler();
 80007a8:	f000 f876 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000048 	.word	0x20000048
 80007b4:	40008000 	.word	0x40008000

080007b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08a      	sub	sp, #40	; 0x28
 80007bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ce:	4b2f      	ldr	r3, [pc, #188]	; (800088c <MX_GPIO_Init+0xd4>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	4a2e      	ldr	r2, [pc, #184]	; (800088c <MX_GPIO_Init+0xd4>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007da:	4b2c      	ldr	r3, [pc, #176]	; (800088c <MX_GPIO_Init+0xd4>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	613b      	str	r3, [r7, #16]
 80007e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007e6:	4b29      	ldr	r3, [pc, #164]	; (800088c <MX_GPIO_Init+0xd4>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	4a28      	ldr	r2, [pc, #160]	; (800088c <MX_GPIO_Init+0xd4>)
 80007ec:	f043 0320 	orr.w	r3, r3, #32
 80007f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f2:	4b26      	ldr	r3, [pc, #152]	; (800088c <MX_GPIO_Init+0xd4>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	f003 0320 	and.w	r3, r3, #32
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	4b23      	ldr	r3, [pc, #140]	; (800088c <MX_GPIO_Init+0xd4>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000802:	4a22      	ldr	r2, [pc, #136]	; (800088c <MX_GPIO_Init+0xd4>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080a:	4b20      	ldr	r3, [pc, #128]	; (800088c <MX_GPIO_Init+0xd4>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	4b1d      	ldr	r3, [pc, #116]	; (800088c <MX_GPIO_Init+0xd4>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	4a1c      	ldr	r2, [pc, #112]	; (800088c <MX_GPIO_Init+0xd4>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000822:	4b1a      	ldr	r3, [pc, #104]	; (800088c <MX_GPIO_Init+0xd4>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	2120      	movs	r1, #32
 8000832:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000836:	f001 fa91 	bl	8001d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800083a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800083e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000840:	4b13      	ldr	r3, [pc, #76]	; (8000890 <MX_GPIO_Init+0xd8>)
 8000842:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	4619      	mov	r1, r3
 800084e:	4811      	ldr	r0, [pc, #68]	; (8000894 <MX_GPIO_Init+0xdc>)
 8000850:	f001 f902 	bl	8001a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000854:	2320      	movs	r3, #32
 8000856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000858:	2301      	movs	r3, #1
 800085a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2300      	movs	r3, #0
 8000862:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	4619      	mov	r1, r3
 800086a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800086e:	f001 f8f3 	bl	8001a58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000872:	2200      	movs	r2, #0
 8000874:	2100      	movs	r1, #0
 8000876:	2028      	movs	r0, #40	; 0x28
 8000878:	f000 fa77 	bl	8000d6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800087c:	2028      	movs	r0, #40	; 0x28
 800087e:	f000 fa8e 	bl	8000d9e <HAL_NVIC_EnableIRQ>

}
 8000882:	bf00      	nop
 8000884:	3728      	adds	r7, #40	; 0x28
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40021000 	.word	0x40021000
 8000890:	10110000 	.word	0x10110000
 8000894:	48000800 	.word	0x48000800

08000898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
	...

080008a8 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80008ac:	4b05      	ldr	r3, [pc, #20]	; (80008c4 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80008ae:	689b      	ldr	r3, [r3, #8]
 80008b0:	4a04      	ldr	r2, [pc, #16]	; (80008c4 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80008b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b6:	6093      	str	r3, [r2, #8]
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	40007000 	.word	0x40007000

080008c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ce:	4b0f      	ldr	r3, [pc, #60]	; (800090c <HAL_MspInit+0x44>)
 80008d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008d2:	4a0e      	ldr	r2, [pc, #56]	; (800090c <HAL_MspInit+0x44>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6613      	str	r3, [r2, #96]	; 0x60
 80008da:	4b0c      	ldr	r3, [pc, #48]	; (800090c <HAL_MspInit+0x44>)
 80008dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <HAL_MspInit+0x44>)
 80008e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ea:	4a08      	ldr	r2, [pc, #32]	; (800090c <HAL_MspInit+0x44>)
 80008ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f0:	6593      	str	r3, [r2, #88]	; 0x58
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <HAL_MspInit+0x44>)
 80008f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 80008fe:	f7ff ffd3 	bl	80008a8 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40021000 	.word	0x40021000

08000910 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	; 0x28
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a17      	ldr	r2, [pc, #92]	; (800098c <HAL_UART_MspInit+0x7c>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d128      	bne.n	8000984 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000932:	4b17      	ldr	r3, [pc, #92]	; (8000990 <HAL_UART_MspInit+0x80>)
 8000934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000936:	4a16      	ldr	r2, [pc, #88]	; (8000990 <HAL_UART_MspInit+0x80>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	65d3      	str	r3, [r2, #92]	; 0x5c
 800093e:	4b14      	ldr	r3, [pc, #80]	; (8000990 <HAL_UART_MspInit+0x80>)
 8000940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	4b11      	ldr	r3, [pc, #68]	; (8000990 <HAL_UART_MspInit+0x80>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094e:	4a10      	ldr	r2, [pc, #64]	; (8000990 <HAL_UART_MspInit+0x80>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <HAL_UART_MspInit+0x80>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration    
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000962:	230c      	movs	r3, #12
 8000964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	2302      	movs	r3, #2
 8000968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000972:	230c      	movs	r3, #12
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000976:	f107 0314 	add.w	r3, r7, #20
 800097a:	4619      	mov	r1, r3
 800097c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000980:	f001 f86a 	bl	8001a58 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000984:	bf00      	nop
 8000986:	3728      	adds	r7, #40	; 0x28
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40008000 	.word	0x40008000
 8000990:	40021000 	.word	0x40021000

08000994 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr

080009a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80009a6:	2120      	movs	r1, #32
 80009a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ac:	f001 f9ee 	bl	8001d8c <HAL_GPIO_TogglePin>
    HAL_Delay(30);
 80009b0:	201e      	movs	r0, #30
 80009b2:	f000 f8dd 	bl	8000b70 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80009b6:	e7f6      	b.n	80009a6 <HardFault_Handler+0x4>

080009b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <MemManage_Handler+0x4>

080009be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <BusFault_Handler+0x4>

080009c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <UsageFault_Handler+0x4>

080009ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr

080009e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f8:	f000 f89c 	bl	8000b34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000a04:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a08:	f001 f9da 	bl	8001dc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a14:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <SystemInit+0x28>)
 8000a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a1a:	4a07      	ldr	r2, [pc, #28]	; (8000a38 <SystemInit+0x28>)
 8000a1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a24:	4b04      	ldr	r3, [pc, #16]	; (8000a38 <SystemInit+0x28>)
 8000a26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a2a:	609a      	str	r2, [r3, #8]
#endif
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a3c:	480d      	ldr	r0, [pc, #52]	; (8000a74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a3e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a40:	480d      	ldr	r0, [pc, #52]	; (8000a78 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a42:	490e      	ldr	r1, [pc, #56]	; (8000a7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a44:	4a0e      	ldr	r2, [pc, #56]	; (8000a80 <LoopForever+0xe>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a48:	e002      	b.n	8000a50 <LoopCopyDataInit>

08000a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a4e:	3304      	adds	r3, #4

08000a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a54:	d3f9      	bcc.n	8000a4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a56:	4a0b      	ldr	r2, [pc, #44]	; (8000a84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a58:	4c0b      	ldr	r4, [pc, #44]	; (8000a88 <LoopForever+0x16>)
  movs r3, #0
 8000a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a5c:	e001      	b.n	8000a62 <LoopFillZerobss>

08000a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a60:	3204      	adds	r2, #4

08000a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a64:	d3fb      	bcc.n	8000a5e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a66:	f7ff ffd3 	bl	8000a10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a6a:	f003 fe75 	bl	8004758 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a6e:	f7ff fdd6 	bl	800061e <main>

08000a72 <LoopForever>:

LoopForever:
    b LoopForever
 8000a72:	e7fe      	b.n	8000a72 <LoopForever>
  ldr   r0, =_estack
 8000a74:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a7c:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000a80:	08004800 	.word	0x08004800
  ldr r2, =_sbss
 8000a84:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000a88:	200000d8 	.word	0x200000d8

08000a8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a8c:	e7fe      	b.n	8000a8c <ADC1_2_IRQHandler>

08000a8e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b082      	sub	sp, #8
 8000a92:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a94:	2300      	movs	r3, #0
 8000a96:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a98:	2003      	movs	r0, #3
 8000a9a:	f000 f95b 	bl	8000d54 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f000 f80e 	bl	8000ac0 <HAL_InitTick>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d002      	beq.n	8000ab0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	71fb      	strb	r3, [r7, #7]
 8000aae:	e001      	b.n	8000ab4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ab0:	f7ff ff0a 	bl	80008c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ab4:	79fb      	ldrb	r3, [r7, #7]

}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
	...

08000ac0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000acc:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <HAL_InitTick+0x68>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d022      	beq.n	8000b1a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ad4:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <HAL_InitTick+0x6c>)
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <HAL_InitTick+0x68>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ae0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f000 f966 	bl	8000dba <HAL_SYSTICK_Config>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d10f      	bne.n	8000b14 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2b0f      	cmp	r3, #15
 8000af8:	d809      	bhi.n	8000b0e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000afa:	2200      	movs	r2, #0
 8000afc:	6879      	ldr	r1, [r7, #4]
 8000afe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b02:	f000 f932 	bl	8000d6a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b06:	4a0a      	ldr	r2, [pc, #40]	; (8000b30 <HAL_InitTick+0x70>)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6013      	str	r3, [r2, #0]
 8000b0c:	e007      	b.n	8000b1e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	73fb      	strb	r3, [r7, #15]
 8000b12:	e004      	b.n	8000b1e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b14:	2301      	movs	r3, #1
 8000b16:	73fb      	strb	r3, [r7, #15]
 8000b18:	e001      	b.n	8000b1e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3710      	adds	r7, #16
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000008 	.word	0x20000008
 8000b2c:	20000000 	.word	0x20000000
 8000b30:	20000004 	.word	0x20000004

08000b34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <HAL_IncTick+0x1c>)
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <HAL_IncTick+0x20>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4413      	add	r3, r2
 8000b42:	4a03      	ldr	r2, [pc, #12]	; (8000b50 <HAL_IncTick+0x1c>)
 8000b44:	6013      	str	r3, [r2, #0]
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	200000d4 	.word	0x200000d4
 8000b54:	20000008 	.word	0x20000008

08000b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b5c:	4b03      	ldr	r3, [pc, #12]	; (8000b6c <HAL_GetTick+0x14>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	200000d4 	.word	0x200000d4

08000b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b78:	f7ff ffee 	bl	8000b58 <HAL_GetTick>
 8000b7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b88:	d004      	beq.n	8000b94 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <HAL_Delay+0x40>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	68fa      	ldr	r2, [r7, #12]
 8000b90:	4413      	add	r3, r2
 8000b92:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b94:	bf00      	nop
 8000b96:	f7ff ffdf 	bl	8000b58 <HAL_GetTick>
 8000b9a:	4602      	mov	r2, r0
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	1ad3      	subs	r3, r2, r3
 8000ba0:	68fa      	ldr	r2, [r7, #12]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d8f7      	bhi.n	8000b96 <HAL_Delay+0x26>
  {
  }
}
 8000ba6:	bf00      	nop
 8000ba8:	3710      	adds	r7, #16
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000008 	.word	0x20000008

08000bb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f003 0307 	and.w	r3, r3, #7
 8000bc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bca:	68ba      	ldr	r2, [r7, #8]
 8000bcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000be6:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	60d3      	str	r3, [r2, #12]
}
 8000bec:	bf00      	nop
 8000bee:	3714      	adds	r7, #20
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c00:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <__NVIC_GetPriorityGrouping+0x18>)
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	0a1b      	lsrs	r3, r3, #8
 8000c06:	f003 0307 	and.w	r3, r3, #7
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	db0b      	blt.n	8000c42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	f003 021f 	and.w	r2, r3, #31
 8000c30:	4907      	ldr	r1, [pc, #28]	; (8000c50 <__NVIC_EnableIRQ+0x38>)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	095b      	lsrs	r3, r3, #5
 8000c38:	2001      	movs	r0, #1
 8000c3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000e100 	.word	0xe000e100

08000c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	6039      	str	r1, [r7, #0]
 8000c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	db0a      	blt.n	8000c7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	490c      	ldr	r1, [pc, #48]	; (8000ca0 <__NVIC_SetPriority+0x4c>)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	0112      	lsls	r2, r2, #4
 8000c74:	b2d2      	uxtb	r2, r2
 8000c76:	440b      	add	r3, r1
 8000c78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c7c:	e00a      	b.n	8000c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4908      	ldr	r1, [pc, #32]	; (8000ca4 <__NVIC_SetPriority+0x50>)
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	f003 030f 	and.w	r3, r3, #15
 8000c8a:	3b04      	subs	r3, #4
 8000c8c:	0112      	lsls	r2, r2, #4
 8000c8e:	b2d2      	uxtb	r2, r2
 8000c90:	440b      	add	r3, r1
 8000c92:	761a      	strb	r2, [r3, #24]
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000e100 	.word	0xe000e100
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b089      	sub	sp, #36	; 0x24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	f003 0307 	and.w	r3, r3, #7
 8000cba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	f1c3 0307 	rsb	r3, r3, #7
 8000cc2:	2b04      	cmp	r3, #4
 8000cc4:	bf28      	it	cs
 8000cc6:	2304      	movcs	r3, #4
 8000cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	3304      	adds	r3, #4
 8000cce:	2b06      	cmp	r3, #6
 8000cd0:	d902      	bls.n	8000cd8 <NVIC_EncodePriority+0x30>
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	3b03      	subs	r3, #3
 8000cd6:	e000      	b.n	8000cda <NVIC_EncodePriority+0x32>
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	43da      	mvns	r2, r3
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	401a      	ands	r2, r3
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfa:	43d9      	mvns	r1, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d00:	4313      	orrs	r3, r2
         );
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3724      	adds	r7, #36	; 0x24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
	...

08000d10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d20:	d301      	bcc.n	8000d26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d22:	2301      	movs	r3, #1
 8000d24:	e00f      	b.n	8000d46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d26:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <SysTick_Config+0x40>)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d2e:	210f      	movs	r1, #15
 8000d30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d34:	f7ff ff8e 	bl	8000c54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <SysTick_Config+0x40>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d3e:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <SysTick_Config+0x40>)
 8000d40:	2207      	movs	r2, #7
 8000d42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	e000e010 	.word	0xe000e010

08000d54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f7ff ff29 	bl	8000bb4 <__NVIC_SetPriorityGrouping>
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b086      	sub	sp, #24
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	4603      	mov	r3, r0
 8000d72:	60b9      	str	r1, [r7, #8]
 8000d74:	607a      	str	r2, [r7, #4]
 8000d76:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d78:	f7ff ff40 	bl	8000bfc <__NVIC_GetPriorityGrouping>
 8000d7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	68b9      	ldr	r1, [r7, #8]
 8000d82:	6978      	ldr	r0, [r7, #20]
 8000d84:	f7ff ff90 	bl	8000ca8 <NVIC_EncodePriority>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d8e:	4611      	mov	r1, r2
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff ff5f 	bl	8000c54 <__NVIC_SetPriority>
}
 8000d96:	bf00      	nop
 8000d98:	3718      	adds	r7, #24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b082      	sub	sp, #8
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	4603      	mov	r3, r0
 8000da6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff ff33 	bl	8000c18 <__NVIC_EnableIRQ>
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f7ff ffa4 	bl	8000d10 <SysTick_Config>
 8000dc8:	4603      	mov	r3, r0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8000dde:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <HAL_FLASH_Unlock+0x38>)
 8000de0:	695b      	ldr	r3, [r3, #20]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	da0b      	bge.n	8000dfe <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000de6:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <HAL_FLASH_Unlock+0x38>)
 8000de8:	4a09      	ldr	r2, [pc, #36]	; (8000e10 <HAL_FLASH_Unlock+0x3c>)
 8000dea:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000dec:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <HAL_FLASH_Unlock+0x38>)
 8000dee:	4a09      	ldr	r2, [pc, #36]	; (8000e14 <HAL_FLASH_Unlock+0x40>)
 8000df0:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8000df2:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <HAL_FLASH_Unlock+0x38>)
 8000df4:	695b      	ldr	r3, [r3, #20]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	da01      	bge.n	8000dfe <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	40022000 	.word	0x40022000
 8000e10:	45670123 	.word	0x45670123
 8000e14:	cdef89ab 	.word	0xcdef89ab

08000e18 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000e22:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <HAL_FLASH_Lock+0x30>)
 8000e24:	695b      	ldr	r3, [r3, #20]
 8000e26:	4a08      	ldr	r2, [pc, #32]	; (8000e48 <HAL_FLASH_Lock+0x30>)
 8000e28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e2c:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_FLASH_Lock+0x30>)
 8000e30:	695b      	ldr	r3, [r3, #20]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	da01      	bge.n	8000e3a <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8000e36:	2300      	movs	r3, #0
 8000e38:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	40022000 	.word	0x40022000

08000e4c <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000e52:	2300      	movs	r3, #0
 8000e54:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 8000e56:	4b0d      	ldr	r3, [pc, #52]	; (8000e8c <HAL_FLASH_OB_Unlock+0x40>)
 8000e58:	695b      	ldr	r3, [r3, #20]
 8000e5a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d00d      	beq.n	8000e7e <HAL_FLASH_OB_Unlock+0x32>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8000e62:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <HAL_FLASH_OB_Unlock+0x40>)
 8000e64:	4a0a      	ldr	r2, [pc, #40]	; (8000e90 <HAL_FLASH_OB_Unlock+0x44>)
 8000e66:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <HAL_FLASH_OB_Unlock+0x40>)
 8000e6a:	4a0a      	ldr	r2, [pc, #40]	; (8000e94 <HAL_FLASH_OB_Unlock+0x48>)
 8000e6c:	60da      	str	r2, [r3, #12]

    /* verify option bytes are unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 8000e6e:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <HAL_FLASH_OB_Unlock+0x40>)
 8000e70:	695b      	ldr	r3, [r3, #20]
 8000e72:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <HAL_FLASH_OB_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	40022000 	.word	0x40022000
 8000e90:	08192a3b 	.word	0x08192a3b
 8000e94:	4c5d6e7f 	.word	0x4c5d6e7f

08000e98 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Bytes Registers access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	71fb      	strb	r3, [r7, #7]

  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 8000ea2:	4b0a      	ldr	r3, [pc, #40]	; (8000ecc <HAL_FLASH_OB_Lock+0x34>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	4a09      	ldr	r2, [pc, #36]	; (8000ecc <HAL_FLASH_OB_Lock+0x34>)
 8000ea8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000eac:	6153      	str	r3, [r2, #20]

  /* Verify option bytes are locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 8000eae:	4b07      	ldr	r3, [pc, #28]	; (8000ecc <HAL_FLASH_OB_Lock+0x34>)
 8000eb0:	695b      	ldr	r3, [r3, #20]
 8000eb2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <HAL_FLASH_OB_Lock+0x26>
  {
    status = HAL_OK;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	40022000 	.word	0x40022000

08000ed0 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* Set the bit to force the option byte reloading */
  SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_FLASH_OB_Launch+0x20>)
 8000ed6:	695b      	ldr	r3, [r3, #20]
 8000ed8:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <HAL_FLASH_OB_Launch+0x20>)
 8000eda:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000ede:	6153      	str	r3, [r2, #20]

  /* Wait for last operation to be completed */
  return (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE));
 8000ee0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ee4:	f000 f806 	bl	8000ef4 <FLASH_WaitForLastOperation>
 8000ee8:	4603      	mov	r3, r0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40022000 	.word	0x40022000

08000ef4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8000efc:	f7ff fe2c 	bl	8000b58 <HAL_GetTick>
 8000f00:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8000f02:	e009      	b.n	8000f18 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8000f04:	f7ff fe28 	bl	8000b58 <HAL_GetTick>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d201      	bcs.n	8000f18 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8000f14:	2303      	movs	r3, #3
 8000f16:	e038      	b.n	8000f8a <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8000f18:	4b1e      	ldr	r3, [pc, #120]	; (8000f94 <FLASH_WaitForLastOperation+0xa0>)
 8000f1a:	691b      	ldr	r3, [r3, #16]
 8000f1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f24:	d0ee      	beq.n	8000f04 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8000f26:	4b1b      	ldr	r3, [pc, #108]	; (8000f94 <FLASH_WaitForLastOperation+0xa0>)
 8000f28:	691a      	ldr	r2, [r3, #16]
 8000f2a:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8000f2e:	4013      	ands	r3, r2
 8000f30:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d01e      	beq.n	8000f76 <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8000f38:	4b17      	ldr	r3, [pc, #92]	; (8000f98 <FLASH_WaitForLastOperation+0xa4>)
 8000f3a:	685a      	ldr	r2, [r3, #4]
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	4a15      	ldr	r2, [pc, #84]	; (8000f98 <FLASH_WaitForLastOperation+0xa4>)
 8000f42:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d007      	beq.n	8000f5e <FLASH_WaitForLastOperation+0x6a>
 8000f4e:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <FLASH_WaitForLastOperation+0xa0>)
 8000f50:	699a      	ldr	r2, [r3, #24]
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8000f58:	490e      	ldr	r1, [pc, #56]	; (8000f94 <FLASH_WaitForLastOperation+0xa0>)
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	618b      	str	r3, [r1, #24]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d004      	beq.n	8000f72 <FLASH_WaitForLastOperation+0x7e>
 8000f68:	4a0a      	ldr	r2, [pc, #40]	; (8000f94 <FLASH_WaitForLastOperation+0xa0>)
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000f70:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e009      	b.n	8000f8a <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000f76:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <FLASH_WaitForLastOperation+0xa0>)
 8000f78:	691b      	ldr	r3, [r3, #16]
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d102      	bne.n	8000f88 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000f82:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <FLASH_WaitForLastOperation+0xa0>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40022000 	.word	0x40022000
 8000f98:	2000000c 	.word	0x2000000c

08000f9c <HAL_FLASHEx_OBProgram>:
  *         - after an option bytes launch through the call of HAL_FLASH_OB_Launch()
  *         - after a power reset (BOR reset or exit from Standby/Shutdown modes)
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000fa8:	4b43      	ldr	r3, [pc, #268]	; (80010b8 <HAL_FLASHEx_OBProgram+0x11c>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d101      	bne.n	8000fb4 <HAL_FLASHEx_OBProgram+0x18>
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	e07d      	b.n	80010b0 <HAL_FLASHEx_OBProgram+0x114>
 8000fb4:	4b40      	ldr	r3, [pc, #256]	; (80010b8 <HAL_FLASHEx_OBProgram+0x11c>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	701a      	strb	r2, [r3, #0]

  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000fba:	4b3f      	ldr	r3, [pc, #252]	; (80010b8 <HAL_FLASHEx_OBProgram+0x11c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	605a      	str	r2, [r3, #4]

  /* Write protection configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_WRP) != 0U)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d00d      	beq.n	8000fe8 <HAL_FLASHEx_OBProgram+0x4c>
  {
    /* Configure of Write protection on the selected area */
    if (FLASH_OB_WRPConfig(pOBInit->WRPArea, pOBInit->WRPStartOffset, pOBInit->WRPEndOffset) != HAL_OK)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6858      	ldr	r0, [r3, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6899      	ldr	r1, [r3, #8]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	f000 f8df 	bl	800119c <FLASH_OB_WRPConfig>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <HAL_FLASHEx_OBProgram+0x4c>
    {
      status = HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Read protection configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f003 0302 	and.w	r3, r3, #2
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d009      	beq.n	8001008 <HAL_FLASHEx_OBProgram+0x6c>
  {
    /* Configure the Read protection level */
    if (FLASH_OB_RDPConfig(pOBInit->RDPLevel) != HAL_OK)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	691b      	ldr	r3, [r3, #16]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f000 f919 	bl	8001230 <FLASH_OB_RDPConfig>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <HAL_FLASHEx_OBProgram+0x6c>
    {
      status = HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* User Configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 0304 	and.w	r3, r3, #4
 8001010:	2b00      	cmp	r3, #0
 8001012:	d00c      	beq.n	800102e <HAL_FLASHEx_OBProgram+0x92>
  {
    /* Configure the user option bytes */
    if (FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig) != HAL_OK)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	695a      	ldr	r2, [r3, #20]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	4619      	mov	r1, r3
 800101e:	4610      	mov	r0, r2
 8001020:	f000 f92e 	bl	8001280 <FLASH_OB_UserConfig>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <HAL_FLASHEx_OBProgram+0x92>
    {
      status = HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* PCROP Configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0U)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 0308 	and.w	r3, r3, #8
 8001036:	2b00      	cmp	r3, #0
 8001038:	d013      	beq.n	8001062 <HAL_FLASHEx_OBProgram+0xc6>
  {
    if (pOBInit->PCROPStartAddr != pOBInit->PCROPEndAddr)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a1a      	ldr	r2, [r3, #32]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001042:	429a      	cmp	r2, r3
 8001044:	d00d      	beq.n	8001062 <HAL_FLASHEx_OBProgram+0xc6>
    {
      /* Configure the Proprietary code readout protection */
      if (FLASH_OB_PCROPConfig(pOBInit->PCROPConfig, pOBInit->PCROPStartAddr, pOBInit->PCROPEndAddr) != HAL_OK)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	69d8      	ldr	r0, [r3, #28]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6a19      	ldr	r1, [r3, #32]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001052:	461a      	mov	r2, r3
 8001054:	f000 fa34 	bl	80014c0 <FLASH_OB_PCROPConfig>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <HAL_FLASHEx_OBProgram+0xc6>
      {
        status = HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  /* Securable memory Configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_SEC) != 0U)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0320 	and.w	r3, r3, #32
 800106a:	2b00      	cmp	r3, #0
 800106c:	d00c      	beq.n	8001088 <HAL_FLASHEx_OBProgram+0xec>
  {
    /* Configure the securable memory area */
    if (FLASH_OB_SecMemConfig(pOBInit->SecBank, pOBInit->SecSize) != HAL_OK)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	4619      	mov	r1, r3
 8001078:	4610      	mov	r0, r2
 800107a:	f000 fb1b 	bl	80016b4 <FLASH_OB_SecMemConfig>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <HAL_FLASHEx_OBProgram+0xec>
    {
      status = HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Boot Entry Point Configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_BOOT_LOCK) != 0U)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f003 0310 	and.w	r3, r3, #16
 8001090:	2b00      	cmp	r3, #0
 8001092:	d009      	beq.n	80010a8 <HAL_FLASHEx_OBProgram+0x10c>
  {
    /* Configure the boot unique entry point option */
    if (FLASH_OB_BootLockConfig(pOBInit->BootEntryPoint) != HAL_OK)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001098:	4618      	mov	r0, r3
 800109a:	f000 fb43 	bl	8001724 <FLASH_OB_BootLockConfig>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <HAL_FLASHEx_OBProgram+0x10c>
    {
      status = HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80010a8:	4b03      	ldr	r3, [pc, #12]	; (80010b8 <HAL_FLASHEx_OBProgram+0x11c>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	701a      	strb	r2, [r3, #0]

  return status;
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	2000000c 	.word	0x2000000c

080010bc <HAL_FLASHEx_OBGetConfig>:
  * @note   The fields pOBInit->WRPArea and pOBInit->PCROPConfig should indicate
  *         which area is requested for the WRP and PCROP, else no information will be returned.
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = (OPTIONBYTE_RDP | OPTIONBYTE_USER);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2206      	movs	r2, #6
 80010c8:	601a      	str	r2, [r3, #0]

#if defined (FLASH_OPTR_DBANK)
  if ((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d00b      	beq.n	80010ea <HAL_FLASHEx_OBGetConfig+0x2e>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d007      	beq.n	80010ea <HAL_FLASHEx_OBGetConfig+0x2e>
      (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
  if ((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d003      	beq.n	80010ea <HAL_FLASHEx_OBGetConfig+0x2e>
      (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	d10f      	bne.n	800110a <HAL_FLASHEx_OBGetConfig+0x4e>
#else
  if ((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB))
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_WRP;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f043 0201 	orr.w	r2, r3, #1
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	601a      	str	r2, [r3, #0]
    /* Get write protection on the selected area */
    FLASH_OB_GetWRP(pOBInit->WRPArea, &(pOBInit->WRPStartOffset), &(pOBInit->WRPEndOffset));
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6858      	ldr	r0, [r3, #4]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f103 0108 	add.w	r1, r3, #8
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	330c      	adds	r3, #12
 8001104:	461a      	mov	r2, r3
 8001106:	f000 fb61 	bl	80017cc <FLASH_OB_GetWRP>
  }

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 800110a:	f000 fbb1 	bl	8001870 <FLASH_OB_GetRDP>
 800110e:	4602      	mov	r2, r0
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	611a      	str	r2, [r3, #16]

  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8001114:	f000 fbc4 	bl	80018a0 <FLASH_OB_GetUser>
 8001118:	4602      	mov	r2, r0
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	619a      	str	r2, [r3, #24]

#if defined (FLASH_OPTR_DBANK)
  if ((pOBInit->PCROPConfig == FLASH_BANK_1) || (pOBInit->PCROPConfig == FLASH_BANK_2))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d003      	beq.n	800112e <HAL_FLASHEx_OBGetConfig+0x72>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	2b02      	cmp	r3, #2
 800112c:	d110      	bne.n	8001150 <HAL_FLASHEx_OBGetConfig+0x94>
#else
  if (pOBInit->PCROPConfig == FLASH_BANK_1)
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_PCROP;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f043 0208 	orr.w	r2, r3, #8
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	601a      	str	r2, [r3, #0]
    /* Get the Proprietary code readout protection */
    FLASH_OB_GetPCROP(&(pOBInit->PCROPConfig), &(pOBInit->PCROPStartAddr), &(pOBInit->PCROPEndAddr));
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f103 001c 	add.w	r0, r3, #28
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f103 0120 	add.w	r1, r3, #32
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	3324      	adds	r3, #36	; 0x24
 800114a:	461a      	mov	r2, r3
 800114c:	f000 fbbc 	bl	80018c8 <FLASH_OB_GetPCROP>
  }

  pOBInit->OptionType |= OPTIONBYTE_BOOT_LOCK;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f043 0210 	orr.w	r2, r3, #16
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	601a      	str	r2, [r3, #0]

  /* Get the boot entry point */
  pOBInit->BootEntryPoint = FLASH_OB_GetBootLock();
 800115c:	f000 fb28 	bl	80017b0 <FLASH_OB_GetBootLock>
 8001160:	4602      	mov	r2, r0
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	629a      	str	r2, [r3, #40]	; 0x28

  /* Get the securable memory area configuration */
#if defined (FLASH_OPTR_DBANK)
  if ((pOBInit->SecBank == FLASH_BANK_1) || (pOBInit->SecBank == FLASH_BANK_2))
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800116a:	2b01      	cmp	r3, #1
 800116c:	d003      	beq.n	8001176 <HAL_FLASHEx_OBGetConfig+0xba>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001172:	2b02      	cmp	r3, #2
 8001174:	d10d      	bne.n	8001192 <HAL_FLASHEx_OBGetConfig+0xd6>
#else
  if (pOBInit->SecBank == FLASH_BANK_1)
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_SEC;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f043 0220 	orr.w	r2, r3, #32
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	601a      	str	r2, [r3, #0]
    FLASH_OB_GetSecMem(pOBInit->SecBank, &(pOBInit->SecSize));
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	3330      	adds	r3, #48	; 0x30
 800118a:	4619      	mov	r1, r3
 800118c:	4610      	mov	r0, r2
 800118e:	f000 faf1 	bl	8001774 <FLASH_OB_GetSecMem>
  }
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <FLASH_OB_WRPConfig>:
  * @param  WRDPEndOffset specifies the end page of the write protected area.
  *         This parameter can be page number between WRPStartOffset and (max number of pages in the bank - 1).
  * @retval HAL_Status
  */
static HAL_StatusTypeDef FLASH_OB_WRPConfig(uint32_t WRPArea, uint32_t WRPStartOffset, uint32_t WRDPEndOffset)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_WRPAREA(WRPArea));
  assert_param(IS_FLASH_PAGE(WRPStartOffset));
  assert_param(IS_FLASH_PAGE(WRDPEndOffset));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80011a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011ac:	f7ff fea2 	bl	8000ef4 <FLASH_WaitForLastOperation>
 80011b0:	4603      	mov	r3, r0
 80011b2:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80011b4:	7dfb      	ldrb	r3, [r7, #23]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d132      	bne.n	8001220 <FLASH_OB_WRPConfig+0x84>
  {
    /* Configure the write protected area */
    if (WRPArea == OB_WRPAREA_BANK1_AREAA)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d106      	bne.n	80011ce <FLASH_OB_WRPConfig+0x32>
    {
      FLASH->WRP1AR = ((WRDPEndOffset << FLASH_WRP1AR_WRP1A_END_Pos) | WRPStartOffset);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	041a      	lsls	r2, r3, #16
 80011c4:	4919      	ldr	r1, [pc, #100]	; (800122c <FLASH_OB_WRPConfig+0x90>)
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	62cb      	str	r3, [r1, #44]	; 0x2c
 80011cc:	e01c      	b.n	8001208 <FLASH_OB_WRPConfig+0x6c>
    }
    else if (WRPArea == OB_WRPAREA_BANK1_AREAB)
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d106      	bne.n	80011e2 <FLASH_OB_WRPConfig+0x46>
    {
      FLASH->WRP1BR = ((WRDPEndOffset << FLASH_WRP1BR_WRP1B_END_Pos) | WRPStartOffset);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	041a      	lsls	r2, r3, #16
 80011d8:	4914      	ldr	r1, [pc, #80]	; (800122c <FLASH_OB_WRPConfig+0x90>)
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	4313      	orrs	r3, r2
 80011de:	630b      	str	r3, [r1, #48]	; 0x30
 80011e0:	e012      	b.n	8001208 <FLASH_OB_WRPConfig+0x6c>
    }
#if defined (FLASH_OPTR_DBANK)
    else if (WRPArea == OB_WRPAREA_BANK2_AREAA)
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d106      	bne.n	80011f6 <FLASH_OB_WRPConfig+0x5a>
    {
      FLASH->WRP2AR = ((WRDPEndOffset << FLASH_WRP2AR_WRP2A_END_Pos) | WRPStartOffset);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	041a      	lsls	r2, r3, #16
 80011ec:	490f      	ldr	r1, [pc, #60]	; (800122c <FLASH_OB_WRPConfig+0x90>)
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80011f4:	e008      	b.n	8001208 <FLASH_OB_WRPConfig+0x6c>
    }
    else if (WRPArea == OB_WRPAREA_BANK2_AREAB)
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	2b04      	cmp	r3, #4
 80011fa:	d105      	bne.n	8001208 <FLASH_OB_WRPConfig+0x6c>
    {
      FLASH->WRP2BR = ((WRDPEndOffset << FLASH_WRP2BR_WRP2B_END_Pos) | WRPStartOffset);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	041a      	lsls	r2, r3, #16
 8001200:	490a      	ldr	r1, [pc, #40]	; (800122c <FLASH_OB_WRPConfig+0x90>)
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	4313      	orrs	r3, r2
 8001206:	650b      	str	r3, [r1, #80]	; 0x50
    {
      /* Nothing to do */
    }

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8001208:	4b08      	ldr	r3, [pc, #32]	; (800122c <FLASH_OB_WRPConfig+0x90>)
 800120a:	695b      	ldr	r3, [r3, #20]
 800120c:	4a07      	ldr	r2, [pc, #28]	; (800122c <FLASH_OB_WRPConfig+0x90>)
 800120e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001212:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001214:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001218:	f7ff fe6c 	bl	8000ef4 <FLASH_WaitForLastOperation>
 800121c:	4603      	mov	r3, r0
 800121e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001220:	7dfb      	ldrb	r3, [r7, #23]
}
 8001222:	4618      	mov	r0, r3
 8001224:	3718      	adds	r7, #24
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40022000 	.word	0x40022000

08001230 <FLASH_OB_RDPConfig>:
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  *
  * @retval HAL_Status
  */
static HAL_StatusTypeDef FLASH_OB_RDPConfig(uint32_t RDPLevel)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001238:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800123c:	f7ff fe5a 	bl	8000ef4 <FLASH_WaitForLastOperation>
 8001240:	4603      	mov	r3, r0
 8001242:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001244:	7bfb      	ldrb	r3, [r7, #15]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d113      	bne.n	8001272 <FLASH_OB_RDPConfig+0x42>
  {
    /* Configure the RDP level in the option bytes register */
    MODIFY_REG(FLASH->OPTR, FLASH_OPTR_RDP, RDPLevel);
 800124a:	4b0c      	ldr	r3, [pc, #48]	; (800127c <FLASH_OB_RDPConfig+0x4c>)
 800124c:	6a1b      	ldr	r3, [r3, #32]
 800124e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8001252:	490a      	ldr	r1, [pc, #40]	; (800127c <FLASH_OB_RDPConfig+0x4c>)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4313      	orrs	r3, r2
 8001258:	620b      	str	r3, [r1, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800125a:	4b08      	ldr	r3, [pc, #32]	; (800127c <FLASH_OB_RDPConfig+0x4c>)
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	4a07      	ldr	r2, [pc, #28]	; (800127c <FLASH_OB_RDPConfig+0x4c>)
 8001260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001264:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001266:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800126a:	f7ff fe43 	bl	8000ef4 <FLASH_WaitForLastOperation>
 800126e:	4603      	mov	r3, r0
 8001270:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8001272:	7bfb      	ldrb	r3, [r7, #15]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40022000 	.word	0x40022000

08001280 <FLASH_OB_UserConfig>:
  *         @ref FLASH_OB_USER_NRST_MODE, @ref FLASH_OB_USER_INTERNAL_RESET_HOLDER
  * @note   (*) availability depends on devices
  * @retval HAL_Status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint32_t UserType, uint32_t UserConfig)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  uint32_t optr_reg_val = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
  uint32_t optr_reg_mask = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_OB_USER_TYPE(UserType));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001292:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001296:	f7ff fe2d 	bl	8000ef4 <FLASH_WaitForLastOperation>
 800129a:	4603      	mov	r3, r0
 800129c:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800129e:	7bfb      	ldrb	r3, [r7, #15]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	f040 8105 	bne.w	80014b0 <FLASH_OB_UserConfig+0x230>
  {
    if ((UserType & OB_USER_BOR_LEV) != 0U)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d009      	beq.n	80012c4 <FLASH_OB_UserConfig+0x44>
    {
      /* BOR level option byte should be modified */
      assert_param(IS_OB_USER_BOR_LEVEL(UserConfig & FLASH_OPTR_BOR_LEV));

      /* Set value and mask for BOR level option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BOR_LEV);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80012b6:	697a      	ldr	r2, [r7, #20]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_BOR_LEV;
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80012c2:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_nRST_STOP) != 0U)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d009      	beq.n	80012e2 <FLASH_OB_UserConfig+0x62>
    {
      /* nRST_STOP option byte should be modified */
      assert_param(IS_OB_USER_STOP(UserConfig & FLASH_OPTR_nRST_STOP));

      /* Set value and mask for nRST_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STOP);
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012d4:	697a      	ldr	r2, [r7, #20]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_STOP;
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012e0:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_nRST_STDBY) != 0U)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f003 0304 	and.w	r3, r3, #4
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d009      	beq.n	8001300 <FLASH_OB_UserConfig+0x80>
    {
      /* nRST_STDBY option byte should be modified */
      assert_param(IS_OB_USER_STANDBY(UserConfig & FLASH_OPTR_nRST_STDBY));

      /* Set value and mask for nRST_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STDBY);
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012f2:	697a      	ldr	r2, [r7, #20]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_STDBY;
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012fe:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_nRST_SHDW) != 0U)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d009      	beq.n	800131e <FLASH_OB_UserConfig+0x9e>
    {
      /* nRST_SHDW option byte should be modified */
      assert_param(IS_OB_USER_SHUTDOWN(UserConfig & FLASH_OPTR_nRST_SHDW));

      /* Set value and mask for nRST_SHDW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_SHDW);
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001310:	697a      	ldr	r2, [r7, #20]
 8001312:	4313      	orrs	r3, r2
 8001314:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_SHDW;
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800131c:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_IWDG_SW) != 0U)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f003 0308 	and.w	r3, r3, #8
 8001324:	2b00      	cmp	r3, #0
 8001326:	d009      	beq.n	800133c <FLASH_OB_UserConfig+0xbc>
    {
      /* IWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_IWDG(UserConfig & FLASH_OPTR_IWDG_SW));

      /* Set value and mask for IWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_SW);
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800132e:	697a      	ldr	r2, [r7, #20]
 8001330:	4313      	orrs	r3, r2
 8001332:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_SW;
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800133a:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_IWDG_STOP) != 0U)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f003 0310 	and.w	r3, r3, #16
 8001342:	2b00      	cmp	r3, #0
 8001344:	d009      	beq.n	800135a <FLASH_OB_UserConfig+0xda>
    {
      /* IWDG_STOP option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STOP(UserConfig & FLASH_OPTR_IWDG_STOP));

      /* Set value and mask for IWDG_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STOP);
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134c:	697a      	ldr	r2, [r7, #20]
 800134e:	4313      	orrs	r3, r2
 8001350:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_STOP;
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001358:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_IWDG_STDBY) != 0U)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f003 0320 	and.w	r3, r3, #32
 8001360:	2b00      	cmp	r3, #0
 8001362:	d009      	beq.n	8001378 <FLASH_OB_UserConfig+0xf8>
    {
      /* IWDG_STDBY option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STDBY(UserConfig & FLASH_OPTR_IWDG_STDBY));

      /* Set value and mask for IWDG_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STDBY);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800136a:	697a      	ldr	r2, [r7, #20]
 800136c:	4313      	orrs	r3, r2
 800136e:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_STDBY;
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001376:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_WWDG_SW) != 0U)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800137e:	2b00      	cmp	r3, #0
 8001380:	d009      	beq.n	8001396 <FLASH_OB_UserConfig+0x116>
    {
      /* WWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_WWDG(UserConfig & FLASH_OPTR_WWDG_SW));

      /* Set value and mask for WWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_WWDG_SW);
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001388:	697a      	ldr	r2, [r7, #20]
 800138a:	4313      	orrs	r3, r2
 800138c:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_WWDG_SW;
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001394:	613b      	str	r3, [r7, #16]
    }

#if defined (FLASH_OPTR_BFB2)
    if ((UserType & OB_USER_BFB2) != 0U)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800139c:	2b00      	cmp	r3, #0
 800139e:	d009      	beq.n	80013b4 <FLASH_OB_UserConfig+0x134>
    {
      /* BFB2 option byte should be modified */
      assert_param(IS_OB_USER_BFB2(UserConfig & FLASH_OPTR_BFB2));

      /* Set value and mask for BFB2 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BFB2);
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013a6:	697a      	ldr	r2, [r7, #20]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_BFB2;
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80013b2:	613b      	str	r3, [r7, #16]
    }
#endif

    if ((UserType & OB_USER_nBOOT1) != 0U)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d009      	beq.n	80013d2 <FLASH_OB_UserConfig+0x152>
    {
      /* nBOOT1 option byte should be modified */
      assert_param(IS_OB_USER_BOOT1(UserConfig & FLASH_OPTR_nBOOT1));

      /* Set value and mask for nBOOT1 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nBOOT1);
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80013c4:	697a      	ldr	r2, [r7, #20]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nBOOT1;
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80013d0:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_SRAM_PE) != 0U)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d009      	beq.n	80013f0 <FLASH_OB_UserConfig+0x170>
    {
      /* SRAM_PE option byte should be modified */
      assert_param(IS_OB_USER_SRAM_PARITY(UserConfig & FLASH_OPTR_SRAM_PE));

      /* Set value and mask for SRAM_PE option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM_PE);
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80013e2:	697a      	ldr	r2, [r7, #20]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_SRAM_PE;
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013ee:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_CCMSRAM_RST) != 0U)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d009      	beq.n	800140e <FLASH_OB_UserConfig+0x18e>
    {
      /* CCMSRAM_RST option byte should be modified */
      assert_param(IS_OB_USER_CCMSRAM_RST(UserConfig & FLASH_OPTR_CCMSRAM_RST));

      /* Set value and mask for CCMSRAM_RST option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_CCMSRAM_RST);
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001400:	697a      	ldr	r2, [r7, #20]
 8001402:	4313      	orrs	r3, r2
 8001404:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_CCMSRAM_RST;
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800140c:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_nSWBOOT0) != 0U)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d009      	beq.n	800142c <FLASH_OB_UserConfig+0x1ac>
    {
      /* nSWBOOT0 option byte should be modified */
      assert_param(IS_OB_USER_SWBOOT0(UserConfig & FLASH_OPTR_nSWBOOT0));

      /* Set value and mask for nSWBOOT0 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nSWBOOT0);
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800141e:	697a      	ldr	r2, [r7, #20]
 8001420:	4313      	orrs	r3, r2
 8001422:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nSWBOOT0;
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800142a:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_nBOOT0) != 0U)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d009      	beq.n	800144a <FLASH_OB_UserConfig+0x1ca>
    {
      /* nBOOT0 option byte should be modified */
      assert_param(IS_OB_USER_BOOT0(UserConfig & FLASH_OPTR_nBOOT0));

      /* Set value and mask for nBOOT0 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nBOOT0);
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800143c:	697a      	ldr	r2, [r7, #20]
 800143e:	4313      	orrs	r3, r2
 8001440:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nBOOT0;
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001448:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_NRST_MODE) != 0U)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d009      	beq.n	8001468 <FLASH_OB_UserConfig+0x1e8>
    {
      /* Reset Configuration option byte should be modified */
      assert_param(IS_OB_USER_NRST_MODE(UserConfig & FLASH_OPTR_NRST_MODE));

      /* Set value and mask for Reset Configuration option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_NRST_MODE);
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800145a:	697a      	ldr	r2, [r7, #20]
 800145c:	4313      	orrs	r3, r2
 800145e:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_NRST_MODE;
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8001466:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_IRHEN) != 0U)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d009      	beq.n	8001486 <FLASH_OB_UserConfig+0x206>
    {
      /* IRH option byte should be modified */
      assert_param(IS_OB_USER_IRHEN(UserConfig & FLASH_OPTR_IRHEN));

      /* Set value and mask for IRH option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IRHEN);
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001478:	697a      	ldr	r2, [r7, #20]
 800147a:	4313      	orrs	r3, r2
 800147c:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IRHEN;
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001484:	613b      	str	r3, [r7, #16]
    }

    /* Configure the option bytes register */
    MODIFY_REG(FLASH->OPTR, optr_reg_mask, optr_reg_val);
 8001486:	4b0d      	ldr	r3, [pc, #52]	; (80014bc <FLASH_OB_UserConfig+0x23c>)
 8001488:	6a1a      	ldr	r2, [r3, #32]
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	43db      	mvns	r3, r3
 800148e:	401a      	ands	r2, r3
 8001490:	490a      	ldr	r1, [pc, #40]	; (80014bc <FLASH_OB_UserConfig+0x23c>)
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	4313      	orrs	r3, r2
 8001496:	620b      	str	r3, [r1, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8001498:	4b08      	ldr	r3, [pc, #32]	; (80014bc <FLASH_OB_UserConfig+0x23c>)
 800149a:	695b      	ldr	r3, [r3, #20]
 800149c:	4a07      	ldr	r2, [pc, #28]	; (80014bc <FLASH_OB_UserConfig+0x23c>)
 800149e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a2:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80014a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014a8:	f7ff fd24 	bl	8000ef4 <FLASH_WaitForLastOperation>
 80014ac:	4603      	mov	r3, r0
 80014ae:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80014b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40022000 	.word	0x40022000

080014c0 <FLASH_OB_PCROPConfig>:
  * @param  PCROPEndAddr specifies the end address of the Proprietary code readout protection.
  *         This parameter can be an address between PCROPStartAddr and end of the bank.
  * @retval HAL_Status
  */
static HAL_StatusTypeDef FLASH_OB_PCROPConfig(uint32_t PCROPConfig, uint32_t PCROPStartAddr, uint32_t PCROPEndAddr)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b088      	sub	sp, #32
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_PCROP_RDP(PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPStartAddr));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPEndAddr));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80014cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014d0:	f7ff fd10 	bl	8000ef4 <FLASH_WaitForLastOperation>
 80014d4:	4603      	mov	r3, r0
 80014d6:	77fb      	strb	r3, [r7, #31]

  if (status == HAL_OK)
 80014d8:	7ffb      	ldrb	r3, [r7, #31]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f040 80da 	bne.w	8001694 <FLASH_OB_PCROPConfig+0x1d4>
  {
#if defined (FLASH_OPTR_DBANK)
    /* Get the information about the bank swapping */
    if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 80014e0:	4b6f      	ldr	r3, [pc, #444]	; (80016a0 <FLASH_OB_PCROPConfig+0x1e0>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d114      	bne.n	8001516 <FLASH_OB_PCROPConfig+0x56>
    {
      bank1_addr = FLASH_BASE;
 80014ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80014f0:	61bb      	str	r3, [r7, #24]
      bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 80014f2:	4b6c      	ldr	r3, [pc, #432]	; (80016a4 <FLASH_OB_PCROPConfig+0x1e4>)
 80014f4:	881b      	ldrh	r3, [r3, #0]
 80014f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d008      	beq.n	8001510 <FLASH_OB_PCROPConfig+0x50>
 80014fe:	4b69      	ldr	r3, [pc, #420]	; (80016a4 <FLASH_OB_PCROPConfig+0x1e4>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	029b      	lsls	r3, r3, #10
 8001504:	085a      	lsrs	r2, r3, #1
 8001506:	4b68      	ldr	r3, [pc, #416]	; (80016a8 <FLASH_OB_PCROPConfig+0x1e8>)
 8001508:	4013      	ands	r3, r2
 800150a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800150e:	e000      	b.n	8001512 <FLASH_OB_PCROPConfig+0x52>
 8001510:	4b66      	ldr	r3, [pc, #408]	; (80016ac <FLASH_OB_PCROPConfig+0x1ec>)
 8001512:	617b      	str	r3, [r7, #20]
 8001514:	e013      	b.n	800153e <FLASH_OB_PCROPConfig+0x7e>
    }
    else
    {
      bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8001516:	4b63      	ldr	r3, [pc, #396]	; (80016a4 <FLASH_OB_PCROPConfig+0x1e4>)
 8001518:	881b      	ldrh	r3, [r3, #0]
 800151a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800151e:	4293      	cmp	r3, r2
 8001520:	d008      	beq.n	8001534 <FLASH_OB_PCROPConfig+0x74>
 8001522:	4b60      	ldr	r3, [pc, #384]	; (80016a4 <FLASH_OB_PCROPConfig+0x1e4>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	029b      	lsls	r3, r3, #10
 8001528:	085a      	lsrs	r2, r3, #1
 800152a:	4b5f      	ldr	r3, [pc, #380]	; (80016a8 <FLASH_OB_PCROPConfig+0x1e8>)
 800152c:	4013      	ands	r3, r2
 800152e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001532:	e000      	b.n	8001536 <FLASH_OB_PCROPConfig+0x76>
 8001534:	4b5d      	ldr	r3, [pc, #372]	; (80016ac <FLASH_OB_PCROPConfig+0x1ec>)
 8001536:	61bb      	str	r3, [r7, #24]
      bank2_addr = FLASH_BASE;
 8001538:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800153c:	617b      	str	r3, [r7, #20]
#else
    bank1_addr = FLASH_BASE;
#endif

#if defined (FLASH_OPTR_DBANK)
    if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 800153e:	4b5c      	ldr	r3, [pc, #368]	; (80016b0 <FLASH_OB_PCROPConfig+0x1f0>)
 8001540:	6a1b      	ldr	r3, [r3, #32]
 8001542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d147      	bne.n	80015da <FLASH_OB_PCROPConfig+0x11a>
    {
      /* Configure the Proprietary code readout protection */
      if ((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_1)
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	f003 0303 	and.w	r3, r3, #3
 8001550:	2b01      	cmp	r3, #1
 8001552:	d11e      	bne.n	8001592 <FLASH_OB_PCROPConfig+0xd2>
      {
        reg_value = ((PCROPStartAddr - FLASH_BASE) >> 4);
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800155a:	091b      	lsrs	r3, r3, #4
 800155c:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1SR, FLASH_PCROP1SR_PCROP1_STRT, reg_value);
 800155e:	4b54      	ldr	r3, [pc, #336]	; (80016b0 <FLASH_OB_PCROPConfig+0x1f0>)
 8001560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001562:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001566:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800156a:	4951      	ldr	r1, [pc, #324]	; (80016b0 <FLASH_OB_PCROPConfig+0x1f0>)
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	4313      	orrs	r3, r2
 8001570:	624b      	str	r3, [r1, #36]	; 0x24

        reg_value = ((PCROPEndAddr - FLASH_BASE) >> 4);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001578:	091b      	lsrs	r3, r3, #4
 800157a:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP1_END, reg_value);
 800157c:	4b4c      	ldr	r3, [pc, #304]	; (80016b0 <FLASH_OB_PCROPConfig+0x1f0>)
 800157e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001580:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001584:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001588:	4949      	ldr	r1, [pc, #292]	; (80016b0 <FLASH_OB_PCROPConfig+0x1f0>)
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	4313      	orrs	r3, r2
 800158e:	628b      	str	r3, [r1, #40]	; 0x28
 8001590:	e06a      	b.n	8001668 <FLASH_OB_PCROPConfig+0x1a8>
      }
      else if ((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_2)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	f003 0303 	and.w	r3, r3, #3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d165      	bne.n	8001668 <FLASH_OB_PCROPConfig+0x1a8>
      {
        reg_value = ((PCROPStartAddr - FLASH_BASE) >> 4);
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80015a2:	091b      	lsrs	r3, r3, #4
 80015a4:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2SR, FLASH_PCROP2SR_PCROP2_STRT, reg_value);
 80015a6:	4b42      	ldr	r3, [pc, #264]	; (80016b0 <FLASH_OB_PCROPConfig+0x1f0>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015aa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80015ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80015b2:	493f      	ldr	r1, [pc, #252]	; (80016b0 <FLASH_OB_PCROPConfig+0x1f0>)
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	644b      	str	r3, [r1, #68]	; 0x44

        reg_value = ((PCROPEndAddr - FLASH_BASE) >> 4);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80015c0:	091b      	lsrs	r3, r3, #4
 80015c2:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2ER, FLASH_PCROP2ER_PCROP2_END, reg_value);
 80015c4:	4b3a      	ldr	r3, [pc, #232]	; (80016b0 <FLASH_OB_PCROPConfig+0x1f0>)
 80015c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015c8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80015cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80015d0:	4937      	ldr	r1, [pc, #220]	; (80016b0 <FLASH_OB_PCROPConfig+0x1f0>)
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	648b      	str	r3, [r1, #72]	; 0x48
 80015d8:	e046      	b.n	8001668 <FLASH_OB_PCROPConfig+0x1a8>
    }
    else
#endif
    {
      /* Configure the Proprietary code readout protection */
      if ((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_1)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f003 0303 	and.w	r3, r3, #3
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d11e      	bne.n	8001622 <FLASH_OB_PCROPConfig+0x162>
      {
        reg_value = ((PCROPStartAddr - bank1_addr) >> 3);
 80015e4:	68ba      	ldr	r2, [r7, #8]
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	08db      	lsrs	r3, r3, #3
 80015ec:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1SR, FLASH_PCROP1SR_PCROP1_STRT, reg_value);
 80015ee:	4b30      	ldr	r3, [pc, #192]	; (80016b0 <FLASH_OB_PCROPConfig+0x1f0>)
 80015f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80015f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80015fa:	492d      	ldr	r1, [pc, #180]	; (80016b0 <FLASH_OB_PCROPConfig+0x1f0>)
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	4313      	orrs	r3, r2
 8001600:	624b      	str	r3, [r1, #36]	; 0x24

        reg_value = ((PCROPEndAddr - bank1_addr) >> 3);
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	08db      	lsrs	r3, r3, #3
 800160a:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP1_END, reg_value);
 800160c:	4b28      	ldr	r3, [pc, #160]	; (80016b0 <FLASH_OB_PCROPConfig+0x1f0>)
 800160e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001610:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001614:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001618:	4925      	ldr	r1, [pc, #148]	; (80016b0 <FLASH_OB_PCROPConfig+0x1f0>)
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	4313      	orrs	r3, r2
 800161e:	628b      	str	r3, [r1, #40]	; 0x28
 8001620:	e022      	b.n	8001668 <FLASH_OB_PCROPConfig+0x1a8>
      }
#if defined (FLASH_OPTR_DBANK)
      else if ((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_2)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f003 0303 	and.w	r3, r3, #3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d11d      	bne.n	8001668 <FLASH_OB_PCROPConfig+0x1a8>
      {
        reg_value = ((PCROPStartAddr - bank2_addr) >> 3);
 800162c:	68ba      	ldr	r2, [r7, #8]
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	08db      	lsrs	r3, r3, #3
 8001634:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2SR, FLASH_PCROP2SR_PCROP2_STRT, reg_value);
 8001636:	4b1e      	ldr	r3, [pc, #120]	; (80016b0 <FLASH_OB_PCROPConfig+0x1f0>)
 8001638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800163e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001642:	491b      	ldr	r1, [pc, #108]	; (80016b0 <FLASH_OB_PCROPConfig+0x1f0>)
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	4313      	orrs	r3, r2
 8001648:	644b      	str	r3, [r1, #68]	; 0x44

        reg_value = ((PCROPEndAddr - bank2_addr) >> 3);
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	08db      	lsrs	r3, r3, #3
 8001652:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2ER, FLASH_PCROP2ER_PCROP2_END, reg_value);
 8001654:	4b16      	ldr	r3, [pc, #88]	; (80016b0 <FLASH_OB_PCROPConfig+0x1f0>)
 8001656:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001658:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800165c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001660:	4913      	ldr	r1, [pc, #76]	; (80016b0 <FLASH_OB_PCROPConfig+0x1f0>)
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	4313      	orrs	r3, r2
 8001666:	648b      	str	r3, [r1, #72]	; 0x48
      {
        /* Nothing to do */
      }
    }

    MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP_RDP, (PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
 8001668:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <FLASH_OB_PCROPConfig+0x1f0>)
 800166a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001676:	490e      	ldr	r1, [pc, #56]	; (80016b0 <FLASH_OB_PCROPConfig+0x1f0>)
 8001678:	4313      	orrs	r3, r2
 800167a:	628b      	str	r3, [r1, #40]	; 0x28

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <FLASH_OB_PCROPConfig+0x1f0>)
 800167e:	695b      	ldr	r3, [r3, #20]
 8001680:	4a0b      	ldr	r2, [pc, #44]	; (80016b0 <FLASH_OB_PCROPConfig+0x1f0>)
 8001682:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001686:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001688:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800168c:	f7ff fc32 	bl	8000ef4 <FLASH_WaitForLastOperation>
 8001690:	4603      	mov	r3, r0
 8001692:	77fb      	strb	r3, [r7, #31]
  }

  return status;
 8001694:	7ffb      	ldrb	r3, [r7, #31]
}
 8001696:	4618      	mov	r0, r3
 8001698:	3720      	adds	r7, #32
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40010000 	.word	0x40010000
 80016a4:	1fff75e0 	.word	0x1fff75e0
 80016a8:	01fffe00 	.word	0x01fffe00
 80016ac:	08040000 	.word	0x08040000
 80016b0:	40022000 	.word	0x40022000

080016b4 <FLASH_OB_SecMemConfig>:
  *         starting from first page of the bank.
  *         This parameter can be page number between 0 and (max number of pages in the bank - 1)
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_SecMemConfig(uint32_t SecBank, uint32_t SecSize)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK_EXCLUSIVE(SecBank));
  assert_param(IS_OB_SECMEM_SIZE(SecSize));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80016be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016c2:	f7ff fc17 	bl	8000ef4 <FLASH_WaitForLastOperation>
 80016c6:	4603      	mov	r3, r0
 80016c8:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d122      	bne.n	8001716 <FLASH_OB_SecMemConfig+0x62>
  {
    /* Configure the write protected area */
    if (SecBank == FLASH_BANK_1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d108      	bne.n	80016e8 <FLASH_OB_SecMemConfig+0x34>
    {
      MODIFY_REG(FLASH->SEC1R, FLASH_SEC1R_SEC_SIZE1, SecSize);
 80016d6:	4b12      	ldr	r3, [pc, #72]	; (8001720 <FLASH_OB_SecMemConfig+0x6c>)
 80016d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80016de:	4910      	ldr	r1, [pc, #64]	; (8001720 <FLASH_OB_SecMemConfig+0x6c>)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	670b      	str	r3, [r1, #112]	; 0x70
 80016e6:	e00a      	b.n	80016fe <FLASH_OB_SecMemConfig+0x4a>
    }
#if defined (FLASH_OPTR_DBANK)
    else if (SecBank == FLASH_BANK_2)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d107      	bne.n	80016fe <FLASH_OB_SecMemConfig+0x4a>
    {
      MODIFY_REG(FLASH->SEC2R, FLASH_SEC2R_SEC_SIZE2, SecSize);
 80016ee:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <FLASH_OB_SecMemConfig+0x6c>)
 80016f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80016f6:	490a      	ldr	r1, [pc, #40]	; (8001720 <FLASH_OB_SecMemConfig+0x6c>)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	674b      	str	r3, [r1, #116]	; 0x74
      /* Nothing to do */
    }
#endif

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 80016fe:	4b08      	ldr	r3, [pc, #32]	; (8001720 <FLASH_OB_SecMemConfig+0x6c>)
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	4a07      	ldr	r2, [pc, #28]	; (8001720 <FLASH_OB_SecMemConfig+0x6c>)
 8001704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001708:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800170a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800170e:	f7ff fbf1 	bl	8000ef4 <FLASH_WaitForLastOperation>
 8001712:	4603      	mov	r3, r0
 8001714:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8001716:	7bfb      	ldrb	r3, [r7, #15]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40022000 	.word	0x40022000

08001724 <FLASH_OB_BootLockConfig>:
  *            @arg OB_BOOT_LOCK_DISABLE: Disable Boot Lock
  *
  * @retval HAL_Status
  */
static HAL_StatusTypeDef FLASH_OB_BootLockConfig(uint32_t BootLockConfig)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OB_BOOT_LOCK(BootLockConfig));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800172c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001730:	f7ff fbe0 	bl	8000ef4 <FLASH_WaitForLastOperation>
 8001734:	4603      	mov	r3, r0
 8001736:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001738:	7bfb      	ldrb	r3, [r7, #15]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d113      	bne.n	8001766 <FLASH_OB_BootLockConfig+0x42>
  {
    MODIFY_REG(FLASH->SEC1R, FLASH_SEC1R_BOOT_LOCK, BootLockConfig);
 800173e:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <FLASH_OB_BootLockConfig+0x4c>)
 8001740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001742:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001746:	490a      	ldr	r1, [pc, #40]	; (8001770 <FLASH_OB_BootLockConfig+0x4c>)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4313      	orrs	r3, r2
 800174c:	670b      	str	r3, [r1, #112]	; 0x70

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 800174e:	4b08      	ldr	r3, [pc, #32]	; (8001770 <FLASH_OB_BootLockConfig+0x4c>)
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	4a07      	ldr	r2, [pc, #28]	; (8001770 <FLASH_OB_BootLockConfig+0x4c>)
 8001754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001758:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800175a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800175e:	f7ff fbc9 	bl	8000ef4 <FLASH_WaitForLastOperation>
 8001762:	4603      	mov	r3, r0
 8001764:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8001766:	7bfb      	ldrb	r3, [r7, #15]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40022000 	.word	0x40022000

08001774 <FLASH_OB_GetSecMem>:
  * @param[out]  SecSize specifies the number of pages used in the securable
                 memory area of the bank.
  * @retval None
  */
static void FLASH_OB_GetSecMem(uint32_t SecBank, uint32_t *SecSize)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  /* Get the configuration of the securable memory area */
  if (SecBank == FLASH_BANK_1)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d105      	bne.n	8001790 <FLASH_OB_GetSecMem+0x1c>
  {
    *SecSize = READ_BIT(FLASH->SEC1R, FLASH_SEC1R_SEC_SIZE1);
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <FLASH_OB_GetSecMem+0x38>)
 8001786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001788:	b2da      	uxtb	r2, r3
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }
#endif
}
 800178e:	e007      	b.n	80017a0 <FLASH_OB_GetSecMem+0x2c>
  else if (SecBank == FLASH_BANK_2)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b02      	cmp	r3, #2
 8001794:	d104      	bne.n	80017a0 <FLASH_OB_GetSecMem+0x2c>
    *SecSize = READ_BIT(FLASH->SEC2R, FLASH_SEC2R_SEC_SIZE2);
 8001796:	4b05      	ldr	r3, [pc, #20]	; (80017ac <FLASH_OB_GetSecMem+0x38>)
 8001798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800179a:	b2da      	uxtb	r2, r3
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	601a      	str	r2, [r3, #0]
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	40022000 	.word	0x40022000

080017b0 <FLASH_OB_GetBootLock>:
  *         This return value can be one of the following values:
  *            @arg OB_BOOT_LOCK_ENABLE: Boot lock enabled
  *            @arg OB_BOOT_LOCK_DISABLE: Boot lock disabled
  */
static uint32_t FLASH_OB_GetBootLock(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return (READ_REG(FLASH->SEC1R) & FLASH_SEC1R_BOOT_LOCK);
 80017b4:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <FLASH_OB_GetBootLock+0x18>)
 80017b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 80017bc:	4618      	mov	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	40022000 	.word	0x40022000

080017cc <FLASH_OB_GetWRP>:
  * @param[out]  WRDPEndOffset specifies the address where to copied the end page of
  *              the write protected area.
  * @retval None
  */
static void FLASH_OB_GetWRP(uint32_t WRPArea, uint32_t *WRPStartOffset, uint32_t *WRDPEndOffset)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
  /* Get the configuration of the write protected area */
  if (WRPArea == OB_WRPAREA_BANK1_AREAA)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d10d      	bne.n	80017fa <FLASH_OB_GetWRP+0x2e>
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
 80017de:	4b23      	ldr	r3, [pc, #140]	; (800186c <FLASH_OB_GetWRP+0xa0>)
 80017e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> FLASH_WRP1AR_WRP1A_END_Pos);
 80017ea:	4b20      	ldr	r3, [pc, #128]	; (800186c <FLASH_OB_GetWRP+0xa0>)
 80017ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ee:	0c1b      	lsrs	r3, r3, #16
 80017f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	601a      	str	r2, [r3, #0]
#endif
  else
  {
    /* Nothing to do */
  }
}
 80017f8:	e031      	b.n	800185e <FLASH_OB_GetWRP+0x92>
  else if (WRPArea == OB_WRPAREA_BANK1_AREAB)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d10d      	bne.n	800181c <FLASH_OB_GetWRP+0x50>
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 8001800:	4b1a      	ldr	r3, [pc, #104]	; (800186c <FLASH_OB_GetWRP+0xa0>)
 8001802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001804:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> FLASH_WRP1BR_WRP1B_END_Pos);
 800180c:	4b17      	ldr	r3, [pc, #92]	; (800186c <FLASH_OB_GetWRP+0xa0>)
 800180e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001810:	0c1b      	lsrs	r3, r3, #16
 8001812:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	601a      	str	r2, [r3, #0]
}
 800181a:	e020      	b.n	800185e <FLASH_OB_GetWRP+0x92>
  else if (WRPArea == OB_WRPAREA_BANK2_AREAA)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2b02      	cmp	r3, #2
 8001820:	d10d      	bne.n	800183e <FLASH_OB_GetWRP+0x72>
    *WRPStartOffset = READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_STRT);
 8001822:	4b12      	ldr	r3, [pc, #72]	; (800186c <FLASH_OB_GetWRP+0xa0>)
 8001824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001826:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_END) >> FLASH_WRP2AR_WRP2A_END_Pos);
 800182e:	4b0f      	ldr	r3, [pc, #60]	; (800186c <FLASH_OB_GetWRP+0xa0>)
 8001830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001832:	0c1b      	lsrs	r3, r3, #16
 8001834:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	601a      	str	r2, [r3, #0]
}
 800183c:	e00f      	b.n	800185e <FLASH_OB_GetWRP+0x92>
  else if (WRPArea == OB_WRPAREA_BANK2_AREAB)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2b04      	cmp	r3, #4
 8001842:	d10c      	bne.n	800185e <FLASH_OB_GetWRP+0x92>
    *WRPStartOffset = READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_STRT);
 8001844:	4b09      	ldr	r3, [pc, #36]	; (800186c <FLASH_OB_GetWRP+0xa0>)
 8001846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001848:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_END) >> FLASH_WRP2BR_WRP2B_END_Pos);
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <FLASH_OB_GetWRP+0xa0>)
 8001852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001854:	0c1b      	lsrs	r3, r3, #16
 8001856:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	601a      	str	r2, [r3, #0]
}
 800185e:	bf00      	nop
 8001860:	3714      	adds	r7, #20
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	40022000 	.word	0x40022000

08001870 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
  uint32_t rdp_level = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 8001876:	4b09      	ldr	r3, [pc, #36]	; (800189c <FLASH_OB_GetRDP+0x2c>)
 8001878:	6a1b      	ldr	r3, [r3, #32]
 800187a:	b2db      	uxtb	r3, r3
 800187c:	607b      	str	r3, [r7, #4]

  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2baa      	cmp	r3, #170	; 0xaa
 8001882:	d004      	beq.n	800188e <FLASH_OB_GetRDP+0x1e>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2bcc      	cmp	r3, #204	; 0xcc
 8001888:	d001      	beq.n	800188e <FLASH_OB_GetRDP+0x1e>
  {
    return (OB_RDP_LEVEL_1);
 800188a:	23bb      	movs	r3, #187	; 0xbb
 800188c:	e000      	b.n	8001890 <FLASH_OB_GetRDP+0x20>
  }
  else
  {
    return rdp_level;
 800188e:	687b      	ldr	r3, [r7, #4]
  }
}
 8001890:	4618      	mov	r0, r3
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	40022000 	.word	0x40022000

080018a0 <FLASH_OB_GetUser>:
  *         @ref FLASH_OB_USER_CCMSRAM_RST, @ref OB_USER_nSWBOOT0,@ref FLASH_OB_USER_nBOOT0,
  *         @ref FLASH_OB_USER_NRST_MODE, @ref FLASH_OB_USER_INTERNAL_RESET_HOLDER
  * @note  (*) availability depends on devices
  */
static uint32_t FLASH_OB_GetUser(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
  uint32_t user_config = READ_REG(FLASH->OPTR);
 80018a6:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <FLASH_OB_GetUser+0x24>)
 80018a8:	6a1b      	ldr	r3, [r3, #32]
 80018aa:	607b      	str	r3, [r7, #4]
  CLEAR_BIT(user_config, FLASH_OPTR_RDP);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80018b2:	607b      	str	r3, [r7, #4]

  return user_config;
 80018b4:	687b      	ldr	r3, [r7, #4]
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	40022000 	.word	0x40022000

080018c8 <FLASH_OB_GetPCROP>:
  * @param[out] PCROPEndAddr specifies the address where to copied the end address of
  *        the Proprietary code readout protection.
  * @retval None
  */
static void FLASH_OB_GetPCROP(uint32_t *PCROPConfig, uint32_t *PCROPStartAddr, uint32_t *PCROPEndAddr)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b089      	sub	sp, #36	; 0x24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
  uint32_t bank1_addr;
#if defined (FLASH_OPTR_DBANK)
  uint32_t bank2_addr;

  /* Get the information about the bank swapping */
  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 80018d4:	4b5b      	ldr	r3, [pc, #364]	; (8001a44 <FLASH_OB_GetPCROP+0x17c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d114      	bne.n	800190a <FLASH_OB_GetPCROP+0x42>
  {
    bank1_addr = FLASH_BASE;
 80018e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80018e4:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 80018e6:	4b58      	ldr	r3, [pc, #352]	; (8001a48 <FLASH_OB_GetPCROP+0x180>)
 80018e8:	881b      	ldrh	r3, [r3, #0]
 80018ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d008      	beq.n	8001904 <FLASH_OB_GetPCROP+0x3c>
 80018f2:	4b55      	ldr	r3, [pc, #340]	; (8001a48 <FLASH_OB_GetPCROP+0x180>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	029b      	lsls	r3, r3, #10
 80018f8:	085a      	lsrs	r2, r3, #1
 80018fa:	4b54      	ldr	r3, [pc, #336]	; (8001a4c <FLASH_OB_GetPCROP+0x184>)
 80018fc:	4013      	ands	r3, r2
 80018fe:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001902:	e000      	b.n	8001906 <FLASH_OB_GetPCROP+0x3e>
 8001904:	4b52      	ldr	r3, [pc, #328]	; (8001a50 <FLASH_OB_GetPCROP+0x188>)
 8001906:	61bb      	str	r3, [r7, #24]
 8001908:	e013      	b.n	8001932 <FLASH_OB_GetPCROP+0x6a>
  }
  else
  {
    bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800190a:	4b4f      	ldr	r3, [pc, #316]	; (8001a48 <FLASH_OB_GetPCROP+0x180>)
 800190c:	881b      	ldrh	r3, [r3, #0]
 800190e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001912:	4293      	cmp	r3, r2
 8001914:	d008      	beq.n	8001928 <FLASH_OB_GetPCROP+0x60>
 8001916:	4b4c      	ldr	r3, [pc, #304]	; (8001a48 <FLASH_OB_GetPCROP+0x180>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	029b      	lsls	r3, r3, #10
 800191c:	085a      	lsrs	r2, r3, #1
 800191e:	4b4b      	ldr	r3, [pc, #300]	; (8001a4c <FLASH_OB_GetPCROP+0x184>)
 8001920:	4013      	ands	r3, r2
 8001922:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001926:	e000      	b.n	800192a <FLASH_OB_GetPCROP+0x62>
 8001928:	4b49      	ldr	r3, [pc, #292]	; (8001a50 <FLASH_OB_GetPCROP+0x188>)
 800192a:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE;
 800192c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001930:	61bb      	str	r3, [r7, #24]
#else
  bank1_addr = FLASH_BASE;
#endif

#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 8001932:	4b48      	ldr	r3, [pc, #288]	; (8001a54 <FLASH_OB_GetPCROP+0x18c>)
 8001934:	6a1b      	ldr	r3, [r3, #32]
 8001936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d139      	bne.n	80019b2 <FLASH_OB_GetPCROP+0xea>
  {
    if (((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_1)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0303 	and.w	r3, r3, #3
 8001946:	2b01      	cmp	r3, #1
 8001948:	d116      	bne.n	8001978 <FLASH_OB_GetPCROP+0xb0>
    {
      reg_value       = (READ_REG(FLASH->PCROP1SR) & FLASH_PCROP1SR_PCROP1_STRT);
 800194a:	4b42      	ldr	r3, [pc, #264]	; (8001a54 <FLASH_OB_GetPCROP+0x18c>)
 800194c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001952:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 4) + FLASH_BASE;
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	011b      	lsls	r3, r3, #4
 8001958:	f103 6200 	add.w	r2, r3, #134217728	; 0x8000000
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP1_END);
 8001960:	4b3c      	ldr	r3, [pc, #240]	; (8001a54 <FLASH_OB_GetPCROP+0x18c>)
 8001962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001964:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001968:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 4) + FLASH_BASE;
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	011b      	lsls	r3, r3, #4
 800196e:	f103 6200 	add.w	r2, r3, #134217728	; 0x8000000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	e055      	b.n	8001a24 <FLASH_OB_GetPCROP+0x15c>
    }
    else if (((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_2)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0303 	and.w	r3, r3, #3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d14f      	bne.n	8001a24 <FLASH_OB_GetPCROP+0x15c>
    {
      reg_value       = (READ_REG(FLASH->PCROP2SR) & FLASH_PCROP2SR_PCROP2_STRT);
 8001984:	4b33      	ldr	r3, [pc, #204]	; (8001a54 <FLASH_OB_GetPCROP+0x18c>)
 8001986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001988:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800198c:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 4) + FLASH_BASE;
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	011b      	lsls	r3, r3, #4
 8001992:	f103 6200 	add.w	r2, r3, #134217728	; 0x8000000
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP2ER) & FLASH_PCROP2ER_PCROP2_END);
 800199a:	4b2e      	ldr	r3, [pc, #184]	; (8001a54 <FLASH_OB_GetPCROP+0x18c>)
 800199c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800199e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80019a2:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 4) + FLASH_BASE;
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	011b      	lsls	r3, r3, #4
 80019a8:	f103 6200 	add.w	r2, r3, #134217728	; 0x8000000
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	e038      	b.n	8001a24 <FLASH_OB_GetPCROP+0x15c>
    }
  }
  else
#endif
  {
    if (((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_1)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0303 	and.w	r3, r3, #3
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d116      	bne.n	80019ec <FLASH_OB_GetPCROP+0x124>
    {
      reg_value       = (READ_REG(FLASH->PCROP1SR) & FLASH_PCROP1SR_PCROP1_STRT);
 80019be:	4b25      	ldr	r3, [pc, #148]	; (8001a54 <FLASH_OB_GetPCROP+0x18c>)
 80019c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80019c6:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank1_addr;
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	00da      	lsls	r2, r3, #3
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	441a      	add	r2, r3
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP1_END);
 80019d4:	4b1f      	ldr	r3, [pc, #124]	; (8001a54 <FLASH_OB_GetPCROP+0x18c>)
 80019d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80019dc:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank1_addr;
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	00da      	lsls	r2, r3, #3
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	441a      	add	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	e01b      	b.n	8001a24 <FLASH_OB_GetPCROP+0x15c>
    }
#if defined (FLASH_OPTR_DBANK)
    else if (((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_2)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0303 	and.w	r3, r3, #3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d115      	bne.n	8001a24 <FLASH_OB_GetPCROP+0x15c>
    {
      reg_value       = (READ_REG(FLASH->PCROP2SR) & FLASH_PCROP2SR_PCROP2_STRT);
 80019f8:	4b16      	ldr	r3, [pc, #88]	; (8001a54 <FLASH_OB_GetPCROP+0x18c>)
 80019fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001a00:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank2_addr;
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	00da      	lsls	r2, r3, #3
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	441a      	add	r2, r3
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP2ER) & FLASH_PCROP2ER_PCROP2_END);
 8001a0e:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <FLASH_OB_GetPCROP+0x18c>)
 8001a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a12:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001a16:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank2_addr;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	00da      	lsls	r2, r3, #3
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	441a      	add	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	601a      	str	r2, [r3, #0]
    {
      /* Nothing to do */
    }
  }

  *PCROPConfig |= (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP_RDP);
 8001a24:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <FLASH_OB_GetPCROP+0x18c>)
 8001a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a28:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	431a      	orrs	r2, r3
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	601a      	str	r2, [r3, #0]
}
 8001a36:	bf00      	nop
 8001a38:	3724      	adds	r7, #36	; 0x24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	40010000 	.word	0x40010000
 8001a48:	1fff75e0 	.word	0x1fff75e0
 8001a4c:	01fffe00 	.word	0x01fffe00
 8001a50:	08040000 	.word	0x08040000
 8001a54:	40022000 	.word	0x40022000

08001a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b087      	sub	sp, #28
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a66:	e15a      	b.n	8001d1e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	fa01 f303 	lsl.w	r3, r1, r3
 8001a74:	4013      	ands	r3, r2
 8001a76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f000 814c 	beq.w	8001d18 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d00b      	beq.n	8001aa0 <HAL_GPIO_Init+0x48>
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d007      	beq.n	8001aa0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a94:	2b11      	cmp	r3, #17
 8001a96:	d003      	beq.n	8001aa0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b12      	cmp	r3, #18
 8001a9e:	d130      	bne.n	8001b02 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	2203      	movs	r2, #3
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	68da      	ldr	r2, [r3, #12]
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	091b      	lsrs	r3, r3, #4
 8001aec:	f003 0201 	and.w	r2, r3, #1
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	2203      	movs	r2, #3
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43db      	mvns	r3, r3
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	4013      	ands	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	689a      	ldr	r2, [r3, #8]
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d003      	beq.n	8001b42 <HAL_GPIO_Init+0xea>
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b12      	cmp	r3, #18
 8001b40:	d123      	bne.n	8001b8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	08da      	lsrs	r2, r3, #3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	3208      	adds	r2, #8
 8001b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	220f      	movs	r2, #15
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	4013      	ands	r3, r2
 8001b64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	691a      	ldr	r2, [r3, #16]
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	08da      	lsrs	r2, r3, #3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3208      	adds	r2, #8
 8001b84:	6939      	ldr	r1, [r7, #16]
 8001b86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	2203      	movs	r2, #3
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f003 0203 	and.w	r2, r3, #3
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	f000 80a6 	beq.w	8001d18 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bcc:	4b5b      	ldr	r3, [pc, #364]	; (8001d3c <HAL_GPIO_Init+0x2e4>)
 8001bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bd0:	4a5a      	ldr	r2, [pc, #360]	; (8001d3c <HAL_GPIO_Init+0x2e4>)
 8001bd2:	f043 0301 	orr.w	r3, r3, #1
 8001bd6:	6613      	str	r3, [r2, #96]	; 0x60
 8001bd8:	4b58      	ldr	r3, [pc, #352]	; (8001d3c <HAL_GPIO_Init+0x2e4>)
 8001bda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	60bb      	str	r3, [r7, #8]
 8001be2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001be4:	4a56      	ldr	r2, [pc, #344]	; (8001d40 <HAL_GPIO_Init+0x2e8>)
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	089b      	lsrs	r3, r3, #2
 8001bea:	3302      	adds	r3, #2
 8001bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	f003 0303 	and.w	r3, r3, #3
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	220f      	movs	r2, #15
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	43db      	mvns	r3, r3
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	4013      	ands	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c0e:	d01f      	beq.n	8001c50 <HAL_GPIO_Init+0x1f8>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4a4c      	ldr	r2, [pc, #304]	; (8001d44 <HAL_GPIO_Init+0x2ec>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d019      	beq.n	8001c4c <HAL_GPIO_Init+0x1f4>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4a4b      	ldr	r2, [pc, #300]	; (8001d48 <HAL_GPIO_Init+0x2f0>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d013      	beq.n	8001c48 <HAL_GPIO_Init+0x1f0>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a4a      	ldr	r2, [pc, #296]	; (8001d4c <HAL_GPIO_Init+0x2f4>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d00d      	beq.n	8001c44 <HAL_GPIO_Init+0x1ec>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a49      	ldr	r2, [pc, #292]	; (8001d50 <HAL_GPIO_Init+0x2f8>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d007      	beq.n	8001c40 <HAL_GPIO_Init+0x1e8>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a48      	ldr	r2, [pc, #288]	; (8001d54 <HAL_GPIO_Init+0x2fc>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d101      	bne.n	8001c3c <HAL_GPIO_Init+0x1e4>
 8001c38:	2305      	movs	r3, #5
 8001c3a:	e00a      	b.n	8001c52 <HAL_GPIO_Init+0x1fa>
 8001c3c:	2306      	movs	r3, #6
 8001c3e:	e008      	b.n	8001c52 <HAL_GPIO_Init+0x1fa>
 8001c40:	2304      	movs	r3, #4
 8001c42:	e006      	b.n	8001c52 <HAL_GPIO_Init+0x1fa>
 8001c44:	2303      	movs	r3, #3
 8001c46:	e004      	b.n	8001c52 <HAL_GPIO_Init+0x1fa>
 8001c48:	2302      	movs	r3, #2
 8001c4a:	e002      	b.n	8001c52 <HAL_GPIO_Init+0x1fa>
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e000      	b.n	8001c52 <HAL_GPIO_Init+0x1fa>
 8001c50:	2300      	movs	r3, #0
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	f002 0203 	and.w	r2, r2, #3
 8001c58:	0092      	lsls	r2, r2, #2
 8001c5a:	4093      	lsls	r3, r2
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c62:	4937      	ldr	r1, [pc, #220]	; (8001d40 <HAL_GPIO_Init+0x2e8>)
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	089b      	lsrs	r3, r3, #2
 8001c68:	3302      	adds	r3, #2
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c70:	4b39      	ldr	r3, [pc, #228]	; (8001d58 <HAL_GPIO_Init+0x300>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d003      	beq.n	8001c94 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c94:	4a30      	ldr	r2, [pc, #192]	; (8001d58 <HAL_GPIO_Init+0x300>)
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001c9a:	4b2f      	ldr	r3, [pc, #188]	; (8001d58 <HAL_GPIO_Init+0x300>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cbe:	4a26      	ldr	r2, [pc, #152]	; (8001d58 <HAL_GPIO_Init+0x300>)
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cc4:	4b24      	ldr	r3, [pc, #144]	; (8001d58 <HAL_GPIO_Init+0x300>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ce8:	4a1b      	ldr	r2, [pc, #108]	; (8001d58 <HAL_GPIO_Init+0x300>)
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001cee:	4b1a      	ldr	r3, [pc, #104]	; (8001d58 <HAL_GPIO_Init+0x300>)
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d12:	4a11      	ldr	r2, [pc, #68]	; (8001d58 <HAL_GPIO_Init+0x300>)
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	fa22 f303 	lsr.w	r3, r2, r3
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f47f ae9d 	bne.w	8001a68 <HAL_GPIO_Init+0x10>
  }
}
 8001d2e:	bf00      	nop
 8001d30:	371c      	adds	r7, #28
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	40010000 	.word	0x40010000
 8001d44:	48000400 	.word	0x48000400
 8001d48:	48000800 	.word	0x48000800
 8001d4c:	48000c00 	.word	0x48000c00
 8001d50:	48001000 	.word	0x48001000
 8001d54:	48001400 	.word	0x48001400
 8001d58:	40010400 	.word	0x40010400

08001d5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	460b      	mov	r3, r1
 8001d66:	807b      	strh	r3, [r7, #2]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d6c:	787b      	ldrb	r3, [r7, #1]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d72:	887a      	ldrh	r2, [r7, #2]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d78:	e002      	b.n	8001d80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d7a:	887a      	ldrh	r2, [r7, #2]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	695a      	ldr	r2, [r3, #20]
 8001d9c:	887b      	ldrh	r3, [r7, #2]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d003      	beq.n	8001dac <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001da4:	887a      	ldrh	r2, [r7, #2]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001daa:	e002      	b.n	8001db2 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dac:	887a      	ldrh	r2, [r7, #2]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	619a      	str	r2, [r3, #24]
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
	...

08001dc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001dca:	4b08      	ldr	r3, [pc, #32]	; (8001dec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dcc:	695a      	ldr	r2, [r3, #20]
 8001dce:	88fb      	ldrh	r3, [r7, #6]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d006      	beq.n	8001de4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dd6:	4a05      	ldr	r2, [pc, #20]	; (8001dec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dd8:	88fb      	ldrh	r3, [r7, #6]
 8001dda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ddc:	88fb      	ldrh	r3, [r7, #6]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7fe fc0e 	bl	8000600 <HAL_GPIO_EXTI_Callback>
  }
}
 8001de4:	bf00      	nop
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40010400 	.word	0x40010400

08001df0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d141      	bne.n	8001e82 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001dfe:	4b4b      	ldr	r3, [pc, #300]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e0a:	d131      	bne.n	8001e70 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e0c:	4b47      	ldr	r3, [pc, #284]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e12:	4a46      	ldr	r2, [pc, #280]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e1c:	4b43      	ldr	r3, [pc, #268]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e24:	4a41      	ldr	r2, [pc, #260]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e2a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e2c:	4b40      	ldr	r3, [pc, #256]	; (8001f30 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2232      	movs	r2, #50	; 0x32
 8001e32:	fb02 f303 	mul.w	r3, r2, r3
 8001e36:	4a3f      	ldr	r2, [pc, #252]	; (8001f34 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e38:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3c:	0c9b      	lsrs	r3, r3, #18
 8001e3e:	3301      	adds	r3, #1
 8001e40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e42:	e002      	b.n	8001e4a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e4a:	4b38      	ldr	r3, [pc, #224]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e56:	d102      	bne.n	8001e5e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f2      	bne.n	8001e44 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e5e:	4b33      	ldr	r3, [pc, #204]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e6a:	d158      	bne.n	8001f1e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e057      	b.n	8001f20 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e70:	4b2e      	ldr	r3, [pc, #184]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e76:	4a2d      	ldr	r2, [pc, #180]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e7c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001e80:	e04d      	b.n	8001f1e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e88:	d141      	bne.n	8001f0e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e8a:	4b28      	ldr	r3, [pc, #160]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e96:	d131      	bne.n	8001efc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e98:	4b24      	ldr	r3, [pc, #144]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e9e:	4a23      	ldr	r2, [pc, #140]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ea8:	4b20      	ldr	r3, [pc, #128]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001eb0:	4a1e      	ldr	r2, [pc, #120]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eb6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001eb8:	4b1d      	ldr	r3, [pc, #116]	; (8001f30 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2232      	movs	r2, #50	; 0x32
 8001ebe:	fb02 f303 	mul.w	r3, r2, r3
 8001ec2:	4a1c      	ldr	r2, [pc, #112]	; (8001f34 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec8:	0c9b      	lsrs	r3, r3, #18
 8001eca:	3301      	adds	r3, #1
 8001ecc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ece:	e002      	b.n	8001ed6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ed6:	4b15      	ldr	r3, [pc, #84]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ee2:	d102      	bne.n	8001eea <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1f2      	bne.n	8001ed0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001eea:	4b10      	ldr	r3, [pc, #64]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ef6:	d112      	bne.n	8001f1e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e011      	b.n	8001f20 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001efc:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001efe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f02:	4a0a      	ldr	r2, [pc, #40]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f08:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001f0c:	e007      	b.n	8001f1e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f0e:	4b07      	ldr	r3, [pc, #28]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f16:	4a05      	ldr	r2, [pc, #20]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f1c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3714      	adds	r7, #20
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	40007000 	.word	0x40007000
 8001f30:	20000000 	.word	0x20000000
 8001f34:	431bde83 	.word	0x431bde83

08001f38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b088      	sub	sp, #32
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e308      	b.n	800255c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d075      	beq.n	8002042 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f56:	4ba3      	ldr	r3, [pc, #652]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 030c 	and.w	r3, r3, #12
 8001f5e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f60:	4ba0      	ldr	r3, [pc, #640]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	f003 0303 	and.w	r3, r3, #3
 8001f68:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	2b0c      	cmp	r3, #12
 8001f6e:	d102      	bne.n	8001f76 <HAL_RCC_OscConfig+0x3e>
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	2b03      	cmp	r3, #3
 8001f74:	d002      	beq.n	8001f7c <HAL_RCC_OscConfig+0x44>
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	2b08      	cmp	r3, #8
 8001f7a:	d10b      	bne.n	8001f94 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f7c:	4b99      	ldr	r3, [pc, #612]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d05b      	beq.n	8002040 <HAL_RCC_OscConfig+0x108>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d157      	bne.n	8002040 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e2e3      	b.n	800255c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f9c:	d106      	bne.n	8001fac <HAL_RCC_OscConfig+0x74>
 8001f9e:	4b91      	ldr	r3, [pc, #580]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a90      	ldr	r2, [pc, #576]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8001fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fa8:	6013      	str	r3, [r2, #0]
 8001faa:	e01d      	b.n	8001fe8 <HAL_RCC_OscConfig+0xb0>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fb4:	d10c      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x98>
 8001fb6:	4b8b      	ldr	r3, [pc, #556]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a8a      	ldr	r2, [pc, #552]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8001fbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fc0:	6013      	str	r3, [r2, #0]
 8001fc2:	4b88      	ldr	r3, [pc, #544]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a87      	ldr	r2, [pc, #540]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8001fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	e00b      	b.n	8001fe8 <HAL_RCC_OscConfig+0xb0>
 8001fd0:	4b84      	ldr	r3, [pc, #528]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a83      	ldr	r2, [pc, #524]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8001fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fda:	6013      	str	r3, [r2, #0]
 8001fdc:	4b81      	ldr	r3, [pc, #516]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a80      	ldr	r2, [pc, #512]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8001fe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fe6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d013      	beq.n	8002018 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff0:	f7fe fdb2 	bl	8000b58 <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ff8:	f7fe fdae 	bl	8000b58 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b64      	cmp	r3, #100	; 0x64
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e2a8      	b.n	800255c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800200a:	4b76      	ldr	r3, [pc, #472]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0f0      	beq.n	8001ff8 <HAL_RCC_OscConfig+0xc0>
 8002016:	e014      	b.n	8002042 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002018:	f7fe fd9e 	bl	8000b58 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002020:	f7fe fd9a 	bl	8000b58 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b64      	cmp	r3, #100	; 0x64
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e294      	b.n	800255c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002032:	4b6c      	ldr	r3, [pc, #432]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1f0      	bne.n	8002020 <HAL_RCC_OscConfig+0xe8>
 800203e:	e000      	b.n	8002042 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002040:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d075      	beq.n	800213a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800204e:	4b65      	ldr	r3, [pc, #404]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f003 030c 	and.w	r3, r3, #12
 8002056:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002058:	4b62      	ldr	r3, [pc, #392]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	f003 0303 	and.w	r3, r3, #3
 8002060:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	2b0c      	cmp	r3, #12
 8002066:	d102      	bne.n	800206e <HAL_RCC_OscConfig+0x136>
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	2b02      	cmp	r3, #2
 800206c:	d002      	beq.n	8002074 <HAL_RCC_OscConfig+0x13c>
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	2b04      	cmp	r3, #4
 8002072:	d11f      	bne.n	80020b4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002074:	4b5b      	ldr	r3, [pc, #364]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800207c:	2b00      	cmp	r3, #0
 800207e:	d005      	beq.n	800208c <HAL_RCC_OscConfig+0x154>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e267      	b.n	800255c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800208c:	4b55      	ldr	r3, [pc, #340]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	061b      	lsls	r3, r3, #24
 800209a:	4952      	ldr	r1, [pc, #328]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 800209c:	4313      	orrs	r3, r2
 800209e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80020a0:	4b51      	ldr	r3, [pc, #324]	; (80021e8 <HAL_RCC_OscConfig+0x2b0>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7fe fd0b 	bl	8000ac0 <HAL_InitTick>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d043      	beq.n	8002138 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e253      	b.n	800255c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d023      	beq.n	8002104 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020bc:	4b49      	ldr	r3, [pc, #292]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a48      	ldr	r2, [pc, #288]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 80020c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c8:	f7fe fd46 	bl	8000b58 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020d0:	f7fe fd42 	bl	8000b58 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e23c      	b.n	800255c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020e2:	4b40      	ldr	r3, [pc, #256]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d0f0      	beq.n	80020d0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ee:	4b3d      	ldr	r3, [pc, #244]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	061b      	lsls	r3, r3, #24
 80020fc:	4939      	ldr	r1, [pc, #228]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	604b      	str	r3, [r1, #4]
 8002102:	e01a      	b.n	800213a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002104:	4b37      	ldr	r3, [pc, #220]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a36      	ldr	r2, [pc, #216]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 800210a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800210e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002110:	f7fe fd22 	bl	8000b58 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002118:	f7fe fd1e 	bl	8000b58 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e218      	b.n	800255c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800212a:	4b2e      	ldr	r3, [pc, #184]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f0      	bne.n	8002118 <HAL_RCC_OscConfig+0x1e0>
 8002136:	e000      	b.n	800213a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002138:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0308 	and.w	r3, r3, #8
 8002142:	2b00      	cmp	r3, #0
 8002144:	d03c      	beq.n	80021c0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d01c      	beq.n	8002188 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800214e:	4b25      	ldr	r3, [pc, #148]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8002150:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002154:	4a23      	ldr	r2, [pc, #140]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8002156:	f043 0301 	orr.w	r3, r3, #1
 800215a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800215e:	f7fe fcfb 	bl	8000b58 <HAL_GetTick>
 8002162:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002164:	e008      	b.n	8002178 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002166:	f7fe fcf7 	bl	8000b58 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e1f1      	b.n	800255c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002178:	4b1a      	ldr	r3, [pc, #104]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 800217a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d0ef      	beq.n	8002166 <HAL_RCC_OscConfig+0x22e>
 8002186:	e01b      	b.n	80021c0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002188:	4b16      	ldr	r3, [pc, #88]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 800218a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800218e:	4a15      	ldr	r2, [pc, #84]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 8002190:	f023 0301 	bic.w	r3, r3, #1
 8002194:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002198:	f7fe fcde 	bl	8000b58 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021a0:	f7fe fcda 	bl	8000b58 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e1d4      	b.n	800255c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021b2:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 80021b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1ef      	bne.n	80021a0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 80ab 	beq.w	8002324 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ce:	2300      	movs	r3, #0
 80021d0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021d2:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <HAL_RCC_OscConfig+0x2ac>)
 80021d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d106      	bne.n	80021ec <HAL_RCC_OscConfig+0x2b4>
 80021de:	2301      	movs	r3, #1
 80021e0:	e005      	b.n	80021ee <HAL_RCC_OscConfig+0x2b6>
 80021e2:	bf00      	nop
 80021e4:	40021000 	.word	0x40021000
 80021e8:	20000004 	.word	0x20000004
 80021ec:	2300      	movs	r3, #0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00d      	beq.n	800220e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021f2:	4baf      	ldr	r3, [pc, #700]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 80021f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f6:	4aae      	ldr	r2, [pc, #696]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 80021f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021fc:	6593      	str	r3, [r2, #88]	; 0x58
 80021fe:	4bac      	ldr	r3, [pc, #688]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800220a:	2301      	movs	r3, #1
 800220c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800220e:	4ba9      	ldr	r3, [pc, #676]	; (80024b4 <HAL_RCC_OscConfig+0x57c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002216:	2b00      	cmp	r3, #0
 8002218:	d118      	bne.n	800224c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800221a:	4ba6      	ldr	r3, [pc, #664]	; (80024b4 <HAL_RCC_OscConfig+0x57c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4aa5      	ldr	r2, [pc, #660]	; (80024b4 <HAL_RCC_OscConfig+0x57c>)
 8002220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002224:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002226:	f7fe fc97 	bl	8000b58 <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800222c:	e008      	b.n	8002240 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800222e:	f7fe fc93 	bl	8000b58 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e18d      	b.n	800255c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002240:	4b9c      	ldr	r3, [pc, #624]	; (80024b4 <HAL_RCC_OscConfig+0x57c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002248:	2b00      	cmp	r3, #0
 800224a:	d0f0      	beq.n	800222e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d108      	bne.n	8002266 <HAL_RCC_OscConfig+0x32e>
 8002254:	4b96      	ldr	r3, [pc, #600]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800225a:	4a95      	ldr	r2, [pc, #596]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 800225c:	f043 0301 	orr.w	r3, r3, #1
 8002260:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002264:	e024      	b.n	80022b0 <HAL_RCC_OscConfig+0x378>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	2b05      	cmp	r3, #5
 800226c:	d110      	bne.n	8002290 <HAL_RCC_OscConfig+0x358>
 800226e:	4b90      	ldr	r3, [pc, #576]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002274:	4a8e      	ldr	r2, [pc, #568]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002276:	f043 0304 	orr.w	r3, r3, #4
 800227a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800227e:	4b8c      	ldr	r3, [pc, #560]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002284:	4a8a      	ldr	r2, [pc, #552]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002286:	f043 0301 	orr.w	r3, r3, #1
 800228a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800228e:	e00f      	b.n	80022b0 <HAL_RCC_OscConfig+0x378>
 8002290:	4b87      	ldr	r3, [pc, #540]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002296:	4a86      	ldr	r2, [pc, #536]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002298:	f023 0301 	bic.w	r3, r3, #1
 800229c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022a0:	4b83      	ldr	r3, [pc, #524]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 80022a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a6:	4a82      	ldr	r2, [pc, #520]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 80022a8:	f023 0304 	bic.w	r3, r3, #4
 80022ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d016      	beq.n	80022e6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b8:	f7fe fc4e 	bl	8000b58 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022be:	e00a      	b.n	80022d6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022c0:	f7fe fc4a 	bl	8000b58 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e142      	b.n	800255c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022d6:	4b76      	ldr	r3, [pc, #472]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 80022d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d0ed      	beq.n	80022c0 <HAL_RCC_OscConfig+0x388>
 80022e4:	e015      	b.n	8002312 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e6:	f7fe fc37 	bl	8000b58 <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022ec:	e00a      	b.n	8002304 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ee:	f7fe fc33 	bl	8000b58 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e12b      	b.n	800255c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002304:	4b6a      	ldr	r3, [pc, #424]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1ed      	bne.n	80022ee <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002312:	7ffb      	ldrb	r3, [r7, #31]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d105      	bne.n	8002324 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002318:	4b65      	ldr	r3, [pc, #404]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 800231a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231c:	4a64      	ldr	r2, [pc, #400]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 800231e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002322:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0320 	and.w	r3, r3, #32
 800232c:	2b00      	cmp	r3, #0
 800232e:	d03c      	beq.n	80023aa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d01c      	beq.n	8002372 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002338:	4b5d      	ldr	r3, [pc, #372]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 800233a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800233e:	4a5c      	ldr	r2, [pc, #368]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002348:	f7fe fc06 	bl	8000b58 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002350:	f7fe fc02 	bl	8000b58 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e0fc      	b.n	800255c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002362:	4b53      	ldr	r3, [pc, #332]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002364:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0ef      	beq.n	8002350 <HAL_RCC_OscConfig+0x418>
 8002370:	e01b      	b.n	80023aa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002372:	4b4f      	ldr	r3, [pc, #316]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002374:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002378:	4a4d      	ldr	r2, [pc, #308]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 800237a:	f023 0301 	bic.w	r3, r3, #1
 800237e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002382:	f7fe fbe9 	bl	8000b58 <HAL_GetTick>
 8002386:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002388:	e008      	b.n	800239c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800238a:	f7fe fbe5 	bl	8000b58 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e0df      	b.n	800255c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800239c:	4b44      	ldr	r3, [pc, #272]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 800239e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1ef      	bne.n	800238a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 80d3 	beq.w	800255a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023b4:	4b3e      	ldr	r3, [pc, #248]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f003 030c 	and.w	r3, r3, #12
 80023bc:	2b0c      	cmp	r3, #12
 80023be:	f000 808d 	beq.w	80024dc <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d15a      	bne.n	8002480 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ca:	4b39      	ldr	r3, [pc, #228]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a38      	ldr	r2, [pc, #224]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 80023d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d6:	f7fe fbbf 	bl	8000b58 <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023dc:	e008      	b.n	80023f0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023de:	f7fe fbbb 	bl	8000b58 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e0b5      	b.n	800255c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023f0:	4b2f      	ldr	r3, [pc, #188]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1f0      	bne.n	80023de <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023fc:	4b2c      	ldr	r3, [pc, #176]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 80023fe:	68da      	ldr	r2, [r3, #12]
 8002400:	4b2d      	ldr	r3, [pc, #180]	; (80024b8 <HAL_RCC_OscConfig+0x580>)
 8002402:	4013      	ands	r3, r2
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	6a11      	ldr	r1, [r2, #32]
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800240c:	3a01      	subs	r2, #1
 800240e:	0112      	lsls	r2, r2, #4
 8002410:	4311      	orrs	r1, r2
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002416:	0212      	lsls	r2, r2, #8
 8002418:	4311      	orrs	r1, r2
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800241e:	0852      	lsrs	r2, r2, #1
 8002420:	3a01      	subs	r2, #1
 8002422:	0552      	lsls	r2, r2, #21
 8002424:	4311      	orrs	r1, r2
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800242a:	0852      	lsrs	r2, r2, #1
 800242c:	3a01      	subs	r2, #1
 800242e:	0652      	lsls	r2, r2, #25
 8002430:	4311      	orrs	r1, r2
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002436:	06d2      	lsls	r2, r2, #27
 8002438:	430a      	orrs	r2, r1
 800243a:	491d      	ldr	r1, [pc, #116]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 800243c:	4313      	orrs	r3, r2
 800243e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002440:	4b1b      	ldr	r3, [pc, #108]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a1a      	ldr	r2, [pc, #104]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002446:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800244a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800244c:	4b18      	ldr	r3, [pc, #96]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	4a17      	ldr	r2, [pc, #92]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002452:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002456:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002458:	f7fe fb7e 	bl	8000b58 <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002460:	f7fe fb7a 	bl	8000b58 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e074      	b.n	800255c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002472:	4b0f      	ldr	r3, [pc, #60]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d0f0      	beq.n	8002460 <HAL_RCC_OscConfig+0x528>
 800247e:	e06c      	b.n	800255a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002480:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a0a      	ldr	r2, [pc, #40]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002486:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800248a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800248c:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	4a07      	ldr	r2, [pc, #28]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 8002492:	f023 0303 	bic.w	r3, r3, #3
 8002496:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002498:	4b05      	ldr	r3, [pc, #20]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	4a04      	ldr	r2, [pc, #16]	; (80024b0 <HAL_RCC_OscConfig+0x578>)
 800249e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80024a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024a6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a8:	f7fe fb56 	bl	8000b58 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024ae:	e00e      	b.n	80024ce <HAL_RCC_OscConfig+0x596>
 80024b0:	40021000 	.word	0x40021000
 80024b4:	40007000 	.word	0x40007000
 80024b8:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024bc:	f7fe fb4c 	bl	8000b58 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e046      	b.n	800255c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024ce:	4b25      	ldr	r3, [pc, #148]	; (8002564 <HAL_RCC_OscConfig+0x62c>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1f0      	bne.n	80024bc <HAL_RCC_OscConfig+0x584>
 80024da:	e03e      	b.n	800255a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	69db      	ldr	r3, [r3, #28]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d101      	bne.n	80024e8 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e039      	b.n	800255c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80024e8:	4b1e      	ldr	r3, [pc, #120]	; (8002564 <HAL_RCC_OscConfig+0x62c>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	f003 0203 	and.w	r2, r3, #3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d12c      	bne.n	8002556 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002506:	3b01      	subs	r3, #1
 8002508:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800250a:	429a      	cmp	r2, r3
 800250c:	d123      	bne.n	8002556 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002518:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800251a:	429a      	cmp	r2, r3
 800251c:	d11b      	bne.n	8002556 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002528:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800252a:	429a      	cmp	r2, r3
 800252c:	d113      	bne.n	8002556 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002538:	085b      	lsrs	r3, r3, #1
 800253a:	3b01      	subs	r3, #1
 800253c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800253e:	429a      	cmp	r2, r3
 8002540:	d109      	bne.n	8002556 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800254c:	085b      	lsrs	r3, r3, #1
 800254e:	3b01      	subs	r3, #1
 8002550:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002552:	429a      	cmp	r2, r3
 8002554:	d001      	beq.n	800255a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e000      	b.n	800255c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3720      	adds	r7, #32
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40021000 	.word	0x40021000

08002568 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002572:	2300      	movs	r3, #0
 8002574:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e11e      	b.n	80027be <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002580:	4b91      	ldr	r3, [pc, #580]	; (80027c8 <HAL_RCC_ClockConfig+0x260>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 030f 	and.w	r3, r3, #15
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	429a      	cmp	r2, r3
 800258c:	d910      	bls.n	80025b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258e:	4b8e      	ldr	r3, [pc, #568]	; (80027c8 <HAL_RCC_ClockConfig+0x260>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f023 020f 	bic.w	r2, r3, #15
 8002596:	498c      	ldr	r1, [pc, #560]	; (80027c8 <HAL_RCC_ClockConfig+0x260>)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	4313      	orrs	r3, r2
 800259c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800259e:	4b8a      	ldr	r3, [pc, #552]	; (80027c8 <HAL_RCC_ClockConfig+0x260>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 030f 	and.w	r3, r3, #15
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d001      	beq.n	80025b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e106      	b.n	80027be <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d073      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	2b03      	cmp	r3, #3
 80025c2:	d129      	bne.n	8002618 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025c4:	4b81      	ldr	r3, [pc, #516]	; (80027cc <HAL_RCC_ClockConfig+0x264>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e0f4      	b.n	80027be <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80025d4:	f000 f99e 	bl	8002914 <RCC_GetSysClockFreqFromPLLSource>
 80025d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	4a7c      	ldr	r2, [pc, #496]	; (80027d0 <HAL_RCC_ClockConfig+0x268>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d93f      	bls.n	8002662 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80025e2:	4b7a      	ldr	r3, [pc, #488]	; (80027cc <HAL_RCC_ClockConfig+0x264>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d009      	beq.n	8002602 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d033      	beq.n	8002662 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d12f      	bne.n	8002662 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002602:	4b72      	ldr	r3, [pc, #456]	; (80027cc <HAL_RCC_ClockConfig+0x264>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800260a:	4a70      	ldr	r2, [pc, #448]	; (80027cc <HAL_RCC_ClockConfig+0x264>)
 800260c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002610:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002612:	2380      	movs	r3, #128	; 0x80
 8002614:	617b      	str	r3, [r7, #20]
 8002616:	e024      	b.n	8002662 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	2b02      	cmp	r3, #2
 800261e:	d107      	bne.n	8002630 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002620:	4b6a      	ldr	r3, [pc, #424]	; (80027cc <HAL_RCC_ClockConfig+0x264>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d109      	bne.n	8002640 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e0c6      	b.n	80027be <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002630:	4b66      	ldr	r3, [pc, #408]	; (80027cc <HAL_RCC_ClockConfig+0x264>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e0be      	b.n	80027be <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002640:	f000 f8ce 	bl	80027e0 <HAL_RCC_GetSysClockFreq>
 8002644:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	4a61      	ldr	r2, [pc, #388]	; (80027d0 <HAL_RCC_ClockConfig+0x268>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d909      	bls.n	8002662 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800264e:	4b5f      	ldr	r3, [pc, #380]	; (80027cc <HAL_RCC_ClockConfig+0x264>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002656:	4a5d      	ldr	r2, [pc, #372]	; (80027cc <HAL_RCC_ClockConfig+0x264>)
 8002658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800265c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800265e:	2380      	movs	r3, #128	; 0x80
 8002660:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002662:	4b5a      	ldr	r3, [pc, #360]	; (80027cc <HAL_RCC_ClockConfig+0x264>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f023 0203 	bic.w	r2, r3, #3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	4957      	ldr	r1, [pc, #348]	; (80027cc <HAL_RCC_ClockConfig+0x264>)
 8002670:	4313      	orrs	r3, r2
 8002672:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002674:	f7fe fa70 	bl	8000b58 <HAL_GetTick>
 8002678:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800267a:	e00a      	b.n	8002692 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800267c:	f7fe fa6c 	bl	8000b58 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	f241 3288 	movw	r2, #5000	; 0x1388
 800268a:	4293      	cmp	r3, r2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e095      	b.n	80027be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002692:	4b4e      	ldr	r3, [pc, #312]	; (80027cc <HAL_RCC_ClockConfig+0x264>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 020c 	and.w	r2, r3, #12
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d1eb      	bne.n	800267c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d023      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d005      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026bc:	4b43      	ldr	r3, [pc, #268]	; (80027cc <HAL_RCC_ClockConfig+0x264>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	4a42      	ldr	r2, [pc, #264]	; (80027cc <HAL_RCC_ClockConfig+0x264>)
 80026c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026c6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0308 	and.w	r3, r3, #8
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d007      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80026d4:	4b3d      	ldr	r3, [pc, #244]	; (80027cc <HAL_RCC_ClockConfig+0x264>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80026dc:	4a3b      	ldr	r2, [pc, #236]	; (80027cc <HAL_RCC_ClockConfig+0x264>)
 80026de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026e4:	4b39      	ldr	r3, [pc, #228]	; (80027cc <HAL_RCC_ClockConfig+0x264>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	4936      	ldr	r1, [pc, #216]	; (80027cc <HAL_RCC_ClockConfig+0x264>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	608b      	str	r3, [r1, #8]
 80026f6:	e008      	b.n	800270a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	2b80      	cmp	r3, #128	; 0x80
 80026fc:	d105      	bne.n	800270a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80026fe:	4b33      	ldr	r3, [pc, #204]	; (80027cc <HAL_RCC_ClockConfig+0x264>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	4a32      	ldr	r2, [pc, #200]	; (80027cc <HAL_RCC_ClockConfig+0x264>)
 8002704:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002708:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800270a:	4b2f      	ldr	r3, [pc, #188]	; (80027c8 <HAL_RCC_ClockConfig+0x260>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d21d      	bcs.n	8002754 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002718:	4b2b      	ldr	r3, [pc, #172]	; (80027c8 <HAL_RCC_ClockConfig+0x260>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f023 020f 	bic.w	r2, r3, #15
 8002720:	4929      	ldr	r1, [pc, #164]	; (80027c8 <HAL_RCC_ClockConfig+0x260>)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	4313      	orrs	r3, r2
 8002726:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002728:	f7fe fa16 	bl	8000b58 <HAL_GetTick>
 800272c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800272e:	e00a      	b.n	8002746 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002730:	f7fe fa12 	bl	8000b58 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	f241 3288 	movw	r2, #5000	; 0x1388
 800273e:	4293      	cmp	r3, r2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e03b      	b.n	80027be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002746:	4b20      	ldr	r3, [pc, #128]	; (80027c8 <HAL_RCC_ClockConfig+0x260>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	429a      	cmp	r2, r3
 8002752:	d1ed      	bne.n	8002730 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b00      	cmp	r3, #0
 800275e:	d008      	beq.n	8002772 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002760:	4b1a      	ldr	r3, [pc, #104]	; (80027cc <HAL_RCC_ClockConfig+0x264>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	4917      	ldr	r1, [pc, #92]	; (80027cc <HAL_RCC_ClockConfig+0x264>)
 800276e:	4313      	orrs	r3, r2
 8002770:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0308 	and.w	r3, r3, #8
 800277a:	2b00      	cmp	r3, #0
 800277c:	d009      	beq.n	8002792 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800277e:	4b13      	ldr	r3, [pc, #76]	; (80027cc <HAL_RCC_ClockConfig+0x264>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	490f      	ldr	r1, [pc, #60]	; (80027cc <HAL_RCC_ClockConfig+0x264>)
 800278e:	4313      	orrs	r3, r2
 8002790:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002792:	f000 f825 	bl	80027e0 <HAL_RCC_GetSysClockFreq>
 8002796:	4601      	mov	r1, r0
 8002798:	4b0c      	ldr	r3, [pc, #48]	; (80027cc <HAL_RCC_ClockConfig+0x264>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	091b      	lsrs	r3, r3, #4
 800279e:	f003 030f 	and.w	r3, r3, #15
 80027a2:	4a0c      	ldr	r2, [pc, #48]	; (80027d4 <HAL_RCC_ClockConfig+0x26c>)
 80027a4:	5cd3      	ldrb	r3, [r2, r3]
 80027a6:	f003 031f 	and.w	r3, r3, #31
 80027aa:	fa21 f303 	lsr.w	r3, r1, r3
 80027ae:	4a0a      	ldr	r2, [pc, #40]	; (80027d8 <HAL_RCC_ClockConfig+0x270>)
 80027b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80027b2:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <HAL_RCC_ClockConfig+0x274>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7fe f982 	bl	8000ac0 <HAL_InitTick>
 80027bc:	4603      	mov	r3, r0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3718      	adds	r7, #24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	40022000 	.word	0x40022000
 80027cc:	40021000 	.word	0x40021000
 80027d0:	04c4b400 	.word	0x04c4b400
 80027d4:	080047d8 	.word	0x080047d8
 80027d8:	20000000 	.word	0x20000000
 80027dc:	20000004 	.word	0x20000004

080027e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b087      	sub	sp, #28
 80027e4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80027e6:	4b2c      	ldr	r3, [pc, #176]	; (8002898 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 030c 	and.w	r3, r3, #12
 80027ee:	2b04      	cmp	r3, #4
 80027f0:	d102      	bne.n	80027f8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027f2:	4b2a      	ldr	r3, [pc, #168]	; (800289c <HAL_RCC_GetSysClockFreq+0xbc>)
 80027f4:	613b      	str	r3, [r7, #16]
 80027f6:	e047      	b.n	8002888 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80027f8:	4b27      	ldr	r3, [pc, #156]	; (8002898 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f003 030c 	and.w	r3, r3, #12
 8002800:	2b08      	cmp	r3, #8
 8002802:	d102      	bne.n	800280a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002804:	4b26      	ldr	r3, [pc, #152]	; (80028a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002806:	613b      	str	r3, [r7, #16]
 8002808:	e03e      	b.n	8002888 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800280a:	4b23      	ldr	r3, [pc, #140]	; (8002898 <HAL_RCC_GetSysClockFreq+0xb8>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 030c 	and.w	r3, r3, #12
 8002812:	2b0c      	cmp	r3, #12
 8002814:	d136      	bne.n	8002884 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002816:	4b20      	ldr	r3, [pc, #128]	; (8002898 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	f003 0303 	and.w	r3, r3, #3
 800281e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002820:	4b1d      	ldr	r3, [pc, #116]	; (8002898 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	091b      	lsrs	r3, r3, #4
 8002826:	f003 030f 	and.w	r3, r3, #15
 800282a:	3301      	adds	r3, #1
 800282c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2b03      	cmp	r3, #3
 8002832:	d10c      	bne.n	800284e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002834:	4a1a      	ldr	r2, [pc, #104]	; (80028a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	fbb2 f3f3 	udiv	r3, r2, r3
 800283c:	4a16      	ldr	r2, [pc, #88]	; (8002898 <HAL_RCC_GetSysClockFreq+0xb8>)
 800283e:	68d2      	ldr	r2, [r2, #12]
 8002840:	0a12      	lsrs	r2, r2, #8
 8002842:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002846:	fb02 f303 	mul.w	r3, r2, r3
 800284a:	617b      	str	r3, [r7, #20]
      break;
 800284c:	e00c      	b.n	8002868 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800284e:	4a13      	ldr	r2, [pc, #76]	; (800289c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	fbb2 f3f3 	udiv	r3, r2, r3
 8002856:	4a10      	ldr	r2, [pc, #64]	; (8002898 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002858:	68d2      	ldr	r2, [r2, #12]
 800285a:	0a12      	lsrs	r2, r2, #8
 800285c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002860:	fb02 f303 	mul.w	r3, r2, r3
 8002864:	617b      	str	r3, [r7, #20]
      break;
 8002866:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002868:	4b0b      	ldr	r3, [pc, #44]	; (8002898 <HAL_RCC_GetSysClockFreq+0xb8>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	0e5b      	lsrs	r3, r3, #25
 800286e:	f003 0303 	and.w	r3, r3, #3
 8002872:	3301      	adds	r3, #1
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002880:	613b      	str	r3, [r7, #16]
 8002882:	e001      	b.n	8002888 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002884:	2300      	movs	r3, #0
 8002886:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002888:	693b      	ldr	r3, [r7, #16]
}
 800288a:	4618      	mov	r0, r3
 800288c:	371c      	adds	r7, #28
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	40021000 	.word	0x40021000
 800289c:	00f42400 	.word	0x00f42400
 80028a0:	016e3600 	.word	0x016e3600

080028a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028a8:	4b03      	ldr	r3, [pc, #12]	; (80028b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80028aa:	681b      	ldr	r3, [r3, #0]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	20000000 	.word	0x20000000

080028bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80028c0:	f7ff fff0 	bl	80028a4 <HAL_RCC_GetHCLKFreq>
 80028c4:	4601      	mov	r1, r0
 80028c6:	4b06      	ldr	r3, [pc, #24]	; (80028e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	0a1b      	lsrs	r3, r3, #8
 80028cc:	f003 0307 	and.w	r3, r3, #7
 80028d0:	4a04      	ldr	r2, [pc, #16]	; (80028e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80028d2:	5cd3      	ldrb	r3, [r2, r3]
 80028d4:	f003 031f 	and.w	r3, r3, #31
 80028d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028dc:	4618      	mov	r0, r3
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40021000 	.word	0x40021000
 80028e4:	080047e8 	.word	0x080047e8

080028e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80028ec:	f7ff ffda 	bl	80028a4 <HAL_RCC_GetHCLKFreq>
 80028f0:	4601      	mov	r1, r0
 80028f2:	4b06      	ldr	r3, [pc, #24]	; (800290c <HAL_RCC_GetPCLK2Freq+0x24>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	0adb      	lsrs	r3, r3, #11
 80028f8:	f003 0307 	and.w	r3, r3, #7
 80028fc:	4a04      	ldr	r2, [pc, #16]	; (8002910 <HAL_RCC_GetPCLK2Freq+0x28>)
 80028fe:	5cd3      	ldrb	r3, [r2, r3]
 8002900:	f003 031f 	and.w	r3, r3, #31
 8002904:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002908:	4618      	mov	r0, r3
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40021000 	.word	0x40021000
 8002910:	080047e8 	.word	0x080047e8

08002914 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002914:	b480      	push	{r7}
 8002916:	b087      	sub	sp, #28
 8002918:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800291a:	4b1e      	ldr	r3, [pc, #120]	; (8002994 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	f003 0303 	and.w	r3, r3, #3
 8002922:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002924:	4b1b      	ldr	r3, [pc, #108]	; (8002994 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	091b      	lsrs	r3, r3, #4
 800292a:	f003 030f 	and.w	r3, r3, #15
 800292e:	3301      	adds	r3, #1
 8002930:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	2b03      	cmp	r3, #3
 8002936:	d10c      	bne.n	8002952 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002938:	4a17      	ldr	r2, [pc, #92]	; (8002998 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002940:	4a14      	ldr	r2, [pc, #80]	; (8002994 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002942:	68d2      	ldr	r2, [r2, #12]
 8002944:	0a12      	lsrs	r2, r2, #8
 8002946:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800294a:	fb02 f303 	mul.w	r3, r2, r3
 800294e:	617b      	str	r3, [r7, #20]
    break;
 8002950:	e00c      	b.n	800296c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002952:	4a12      	ldr	r2, [pc, #72]	; (800299c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	fbb2 f3f3 	udiv	r3, r2, r3
 800295a:	4a0e      	ldr	r2, [pc, #56]	; (8002994 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800295c:	68d2      	ldr	r2, [r2, #12]
 800295e:	0a12      	lsrs	r2, r2, #8
 8002960:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002964:	fb02 f303 	mul.w	r3, r2, r3
 8002968:	617b      	str	r3, [r7, #20]
    break;
 800296a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800296c:	4b09      	ldr	r3, [pc, #36]	; (8002994 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	0e5b      	lsrs	r3, r3, #25
 8002972:	f003 0303 	and.w	r3, r3, #3
 8002976:	3301      	adds	r3, #1
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	fbb2 f3f3 	udiv	r3, r2, r3
 8002984:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002986:	687b      	ldr	r3, [r7, #4]
}
 8002988:	4618      	mov	r0, r3
 800298a:	371c      	adds	r7, #28
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	40021000 	.word	0x40021000
 8002998:	016e3600 	.word	0x016e3600
 800299c:	00f42400 	.word	0x00f42400

080029a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029a8:	2300      	movs	r3, #0
 80029aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029ac:	2300      	movs	r3, #0
 80029ae:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 8098 	beq.w	8002aee <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029be:	2300      	movs	r3, #0
 80029c0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029c2:	4b43      	ldr	r3, [pc, #268]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10d      	bne.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ce:	4b40      	ldr	r3, [pc, #256]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d2:	4a3f      	ldr	r2, [pc, #252]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029d8:	6593      	str	r3, [r2, #88]	; 0x58
 80029da:	4b3d      	ldr	r3, [pc, #244]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e2:	60bb      	str	r3, [r7, #8]
 80029e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029e6:	2301      	movs	r3, #1
 80029e8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029ea:	4b3a      	ldr	r3, [pc, #232]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a39      	ldr	r2, [pc, #228]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80029f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029f6:	f7fe f8af 	bl	8000b58 <HAL_GetTick>
 80029fa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029fc:	e009      	b.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029fe:	f7fe f8ab 	bl	8000b58 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d902      	bls.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	74fb      	strb	r3, [r7, #19]
        break;
 8002a10:	e005      	b.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a12:	4b30      	ldr	r3, [pc, #192]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0ef      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002a1e:	7cfb      	ldrb	r3, [r7, #19]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d159      	bne.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a24:	4b2a      	ldr	r3, [pc, #168]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a2e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d01e      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d019      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a40:	4b23      	ldr	r3, [pc, #140]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a4a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a4c:	4b20      	ldr	r3, [pc, #128]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a52:	4a1f      	ldr	r2, [pc, #124]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a5c:	4b1c      	ldr	r3, [pc, #112]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a62:	4a1b      	ldr	r2, [pc, #108]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a6c:	4a18      	ldr	r2, [pc, #96]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d016      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7e:	f7fe f86b 	bl	8000b58 <HAL_GetTick>
 8002a82:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a84:	e00b      	b.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a86:	f7fe f867 	bl	8000b58 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d902      	bls.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	74fb      	strb	r3, [r7, #19]
            break;
 8002a9c:	e006      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a9e:	4b0c      	ldr	r3, [pc, #48]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0ec      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002aac:	7cfb      	ldrb	r3, [r7, #19]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10b      	bne.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ab2:	4b07      	ldr	r3, [pc, #28]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ac0:	4903      	ldr	r1, [pc, #12]	; (8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ac8:	e008      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002aca:	7cfb      	ldrb	r3, [r7, #19]
 8002acc:	74bb      	strb	r3, [r7, #18]
 8002ace:	e005      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ad8:	7cfb      	ldrb	r3, [r7, #19]
 8002ada:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002adc:	7c7b      	ldrb	r3, [r7, #17]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d105      	bne.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ae2:	4baf      	ldr	r3, [pc, #700]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae6:	4aae      	ldr	r2, [pc, #696]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ae8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00a      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002afa:	4ba9      	ldr	r3, [pc, #676]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b00:	f023 0203 	bic.w	r2, r3, #3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	49a5      	ldr	r1, [pc, #660]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00a      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b1c:	4ba0      	ldr	r3, [pc, #640]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b22:	f023 020c 	bic.w	r2, r3, #12
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	499d      	ldr	r1, [pc, #628]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0304 	and.w	r3, r3, #4
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00a      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b3e:	4b98      	ldr	r3, [pc, #608]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b44:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	4994      	ldr	r1, [pc, #592]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0308 	and.w	r3, r3, #8
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00a      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b60:	4b8f      	ldr	r3, [pc, #572]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b66:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	498c      	ldr	r1, [pc, #560]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0310 	and.w	r3, r3, #16
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00a      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b82:	4b87      	ldr	r3, [pc, #540]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	4983      	ldr	r1, [pc, #524]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0320 	and.w	r3, r3, #32
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d00a      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ba4:	4b7e      	ldr	r3, [pc, #504]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002baa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	497b      	ldr	r1, [pc, #492]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00a      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bc6:	4b76      	ldr	r3, [pc, #472]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bcc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	4972      	ldr	r1, [pc, #456]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00a      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002be8:	4b6d      	ldr	r3, [pc, #436]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	496a      	ldr	r1, [pc, #424]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00a      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c0a:	4b65      	ldr	r3, [pc, #404]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c18:	4961      	ldr	r1, [pc, #388]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00a      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002c2c:	4b5c      	ldr	r3, [pc, #368]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c32:	f023 0203 	bic.w	r2, r3, #3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3a:	4959      	ldr	r1, [pc, #356]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00a      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c4e:	4b54      	ldr	r3, [pc, #336]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5c:	4950      	ldr	r1, [pc, #320]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d015      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c70:	4b4b      	ldr	r3, [pc, #300]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	4948      	ldr	r1, [pc, #288]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c8e:	d105      	bne.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c90:	4b43      	ldr	r3, [pc, #268]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	4a42      	ldr	r2, [pc, #264]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002c96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c9a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d015      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ca8:	4b3d      	ldr	r3, [pc, #244]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb6:	493a      	ldr	r1, [pc, #232]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cc6:	d105      	bne.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cc8:	4b35      	ldr	r3, [pc, #212]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	4a34      	ldr	r2, [pc, #208]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002cce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cd2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d015      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002ce0:	4b2f      	ldr	r3, [pc, #188]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cee:	492c      	ldr	r1, [pc, #176]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cfe:	d105      	bne.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d00:	4b27      	ldr	r3, [pc, #156]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	4a26      	ldr	r2, [pc, #152]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d0a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d015      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d18:	4b21      	ldr	r3, [pc, #132]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d1e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d26:	491e      	ldr	r1, [pc, #120]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d36:	d105      	bne.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d38:	4b19      	ldr	r3, [pc, #100]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	4a18      	ldr	r2, [pc, #96]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d42:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d015      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d50:	4b13      	ldr	r3, [pc, #76]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d56:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	4910      	ldr	r1, [pc, #64]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d6e:	d105      	bne.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d70:	4b0b      	ldr	r3, [pc, #44]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	4a0a      	ldr	r2, [pc, #40]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d7a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d018      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002d88:	4b05      	ldr	r3, [pc, #20]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d96:	4902      	ldr	r1, [pc, #8]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d9e:	e001      	b.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002da0:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dac:	d105      	bne.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002dae:	4b21      	ldr	r3, [pc, #132]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	4a20      	ldr	r2, [pc, #128]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db8:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d015      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002dc6:	4b1b      	ldr	r3, [pc, #108]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dcc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dd4:	4917      	ldr	r1, [pc, #92]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002de4:	d105      	bne.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002de6:	4b13      	ldr	r3, [pc, #76]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	4a12      	ldr	r2, [pc, #72]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df0:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d015      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002dfe:	4b0d      	ldr	r3, [pc, #52]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002e00:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e0c:	4909      	ldr	r1, [pc, #36]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e1c:	d105      	bne.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e1e:	4b05      	ldr	r3, [pc, #20]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	4a04      	ldr	r2, [pc, #16]	; (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002e24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e28:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002e2a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3718      	adds	r7, #24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	40021000 	.word	0x40021000

08002e38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e042      	b.n	8002ed0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d106      	bne.n	8002e62 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f7fd fd57 	bl	8000910 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2224      	movs	r2, #36	; 0x24
 8002e66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 0201 	bic.w	r2, r2, #1
 8002e78:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 f82c 	bl	8002ed8 <UART_SetConfig>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d101      	bne.n	8002e8a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e022      	b.n	8002ed0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d002      	beq.n	8002e98 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f001 fa0e 	bl	80042b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ea6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	689a      	ldr	r2, [r3, #8]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002eb6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f042 0201 	orr.w	r2, r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f001 fa95 	bl	80043f8 <UART_CheckIdleState>
 8002ece:	4603      	mov	r3, r0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ed8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002edc:	b08a      	sub	sp, #40	; 0x28
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002eea:	2300      	movs	r3, #0
 8002eec:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	689a      	ldr	r2, [r3, #8]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	431a      	orrs	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	69db      	ldr	r3, [r3, #28]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	4baa      	ldr	r3, [pc, #680]	; (80031c0 <UART_SetConfig+0x2e8>)
 8002f18:	4013      	ands	r3, r2
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	6812      	ldr	r2, [r2, #0]
 8002f1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f20:	430b      	orrs	r3, r1
 8002f22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68da      	ldr	r2, [r3, #12]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a9f      	ldr	r2, [pc, #636]	; (80031c4 <UART_SetConfig+0x2ec>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d004      	beq.n	8002f54 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f50:	4313      	orrs	r3, r2
 8002f52:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002f5e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6812      	ldr	r2, [r2, #0]
 8002f66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f68:	430b      	orrs	r3, r1
 8002f6a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f72:	f023 010f 	bic.w	r1, r3, #15
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a90      	ldr	r2, [pc, #576]	; (80031c8 <UART_SetConfig+0x2f0>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d126      	bne.n	8002fda <UART_SetConfig+0x102>
 8002f8c:	4b8f      	ldr	r3, [pc, #572]	; (80031cc <UART_SetConfig+0x2f4>)
 8002f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	2b03      	cmp	r3, #3
 8002f98:	d81a      	bhi.n	8002fd0 <UART_SetConfig+0xf8>
 8002f9a:	a201      	add	r2, pc, #4	; (adr r2, 8002fa0 <UART_SetConfig+0xc8>)
 8002f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa0:	08002fb1 	.word	0x08002fb1
 8002fa4:	08002fc1 	.word	0x08002fc1
 8002fa8:	08002fb9 	.word	0x08002fb9
 8002fac:	08002fc9 	.word	0x08002fc9
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fb6:	e116      	b.n	80031e6 <UART_SetConfig+0x30e>
 8002fb8:	2302      	movs	r3, #2
 8002fba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fbe:	e112      	b.n	80031e6 <UART_SetConfig+0x30e>
 8002fc0:	2304      	movs	r3, #4
 8002fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fc6:	e10e      	b.n	80031e6 <UART_SetConfig+0x30e>
 8002fc8:	2308      	movs	r3, #8
 8002fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fce:	e10a      	b.n	80031e6 <UART_SetConfig+0x30e>
 8002fd0:	2310      	movs	r3, #16
 8002fd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fd6:	bf00      	nop
 8002fd8:	e105      	b.n	80031e6 <UART_SetConfig+0x30e>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a7c      	ldr	r2, [pc, #496]	; (80031d0 <UART_SetConfig+0x2f8>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d138      	bne.n	8003056 <UART_SetConfig+0x17e>
 8002fe4:	4b79      	ldr	r3, [pc, #484]	; (80031cc <UART_SetConfig+0x2f4>)
 8002fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fea:	f003 030c 	and.w	r3, r3, #12
 8002fee:	2b0c      	cmp	r3, #12
 8002ff0:	d82c      	bhi.n	800304c <UART_SetConfig+0x174>
 8002ff2:	a201      	add	r2, pc, #4	; (adr r2, 8002ff8 <UART_SetConfig+0x120>)
 8002ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff8:	0800302d 	.word	0x0800302d
 8002ffc:	0800304d 	.word	0x0800304d
 8003000:	0800304d 	.word	0x0800304d
 8003004:	0800304d 	.word	0x0800304d
 8003008:	0800303d 	.word	0x0800303d
 800300c:	0800304d 	.word	0x0800304d
 8003010:	0800304d 	.word	0x0800304d
 8003014:	0800304d 	.word	0x0800304d
 8003018:	08003035 	.word	0x08003035
 800301c:	0800304d 	.word	0x0800304d
 8003020:	0800304d 	.word	0x0800304d
 8003024:	0800304d 	.word	0x0800304d
 8003028:	08003045 	.word	0x08003045
 800302c:	2300      	movs	r3, #0
 800302e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003032:	e0d8      	b.n	80031e6 <UART_SetConfig+0x30e>
 8003034:	2302      	movs	r3, #2
 8003036:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800303a:	e0d4      	b.n	80031e6 <UART_SetConfig+0x30e>
 800303c:	2304      	movs	r3, #4
 800303e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003042:	e0d0      	b.n	80031e6 <UART_SetConfig+0x30e>
 8003044:	2308      	movs	r3, #8
 8003046:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800304a:	e0cc      	b.n	80031e6 <UART_SetConfig+0x30e>
 800304c:	2310      	movs	r3, #16
 800304e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003052:	bf00      	nop
 8003054:	e0c7      	b.n	80031e6 <UART_SetConfig+0x30e>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a5e      	ldr	r2, [pc, #376]	; (80031d4 <UART_SetConfig+0x2fc>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d125      	bne.n	80030ac <UART_SetConfig+0x1d4>
 8003060:	4b5a      	ldr	r3, [pc, #360]	; (80031cc <UART_SetConfig+0x2f4>)
 8003062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003066:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800306a:	2b10      	cmp	r3, #16
 800306c:	d011      	beq.n	8003092 <UART_SetConfig+0x1ba>
 800306e:	2b10      	cmp	r3, #16
 8003070:	d802      	bhi.n	8003078 <UART_SetConfig+0x1a0>
 8003072:	2b00      	cmp	r3, #0
 8003074:	d005      	beq.n	8003082 <UART_SetConfig+0x1aa>
 8003076:	e014      	b.n	80030a2 <UART_SetConfig+0x1ca>
 8003078:	2b20      	cmp	r3, #32
 800307a:	d006      	beq.n	800308a <UART_SetConfig+0x1b2>
 800307c:	2b30      	cmp	r3, #48	; 0x30
 800307e:	d00c      	beq.n	800309a <UART_SetConfig+0x1c2>
 8003080:	e00f      	b.n	80030a2 <UART_SetConfig+0x1ca>
 8003082:	2300      	movs	r3, #0
 8003084:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003088:	e0ad      	b.n	80031e6 <UART_SetConfig+0x30e>
 800308a:	2302      	movs	r3, #2
 800308c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003090:	e0a9      	b.n	80031e6 <UART_SetConfig+0x30e>
 8003092:	2304      	movs	r3, #4
 8003094:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003098:	e0a5      	b.n	80031e6 <UART_SetConfig+0x30e>
 800309a:	2308      	movs	r3, #8
 800309c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030a0:	e0a1      	b.n	80031e6 <UART_SetConfig+0x30e>
 80030a2:	2310      	movs	r3, #16
 80030a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030a8:	bf00      	nop
 80030aa:	e09c      	b.n	80031e6 <UART_SetConfig+0x30e>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a49      	ldr	r2, [pc, #292]	; (80031d8 <UART_SetConfig+0x300>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d125      	bne.n	8003102 <UART_SetConfig+0x22a>
 80030b6:	4b45      	ldr	r3, [pc, #276]	; (80031cc <UART_SetConfig+0x2f4>)
 80030b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030bc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80030c0:	2b40      	cmp	r3, #64	; 0x40
 80030c2:	d011      	beq.n	80030e8 <UART_SetConfig+0x210>
 80030c4:	2b40      	cmp	r3, #64	; 0x40
 80030c6:	d802      	bhi.n	80030ce <UART_SetConfig+0x1f6>
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d005      	beq.n	80030d8 <UART_SetConfig+0x200>
 80030cc:	e014      	b.n	80030f8 <UART_SetConfig+0x220>
 80030ce:	2b80      	cmp	r3, #128	; 0x80
 80030d0:	d006      	beq.n	80030e0 <UART_SetConfig+0x208>
 80030d2:	2bc0      	cmp	r3, #192	; 0xc0
 80030d4:	d00c      	beq.n	80030f0 <UART_SetConfig+0x218>
 80030d6:	e00f      	b.n	80030f8 <UART_SetConfig+0x220>
 80030d8:	2300      	movs	r3, #0
 80030da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030de:	e082      	b.n	80031e6 <UART_SetConfig+0x30e>
 80030e0:	2302      	movs	r3, #2
 80030e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030e6:	e07e      	b.n	80031e6 <UART_SetConfig+0x30e>
 80030e8:	2304      	movs	r3, #4
 80030ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030ee:	e07a      	b.n	80031e6 <UART_SetConfig+0x30e>
 80030f0:	2308      	movs	r3, #8
 80030f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030f6:	e076      	b.n	80031e6 <UART_SetConfig+0x30e>
 80030f8:	2310      	movs	r3, #16
 80030fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030fe:	bf00      	nop
 8003100:	e071      	b.n	80031e6 <UART_SetConfig+0x30e>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a35      	ldr	r2, [pc, #212]	; (80031dc <UART_SetConfig+0x304>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d129      	bne.n	8003160 <UART_SetConfig+0x288>
 800310c:	4b2f      	ldr	r3, [pc, #188]	; (80031cc <UART_SetConfig+0x2f4>)
 800310e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800311a:	d014      	beq.n	8003146 <UART_SetConfig+0x26e>
 800311c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003120:	d802      	bhi.n	8003128 <UART_SetConfig+0x250>
 8003122:	2b00      	cmp	r3, #0
 8003124:	d007      	beq.n	8003136 <UART_SetConfig+0x25e>
 8003126:	e016      	b.n	8003156 <UART_SetConfig+0x27e>
 8003128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800312c:	d007      	beq.n	800313e <UART_SetConfig+0x266>
 800312e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003132:	d00c      	beq.n	800314e <UART_SetConfig+0x276>
 8003134:	e00f      	b.n	8003156 <UART_SetConfig+0x27e>
 8003136:	2300      	movs	r3, #0
 8003138:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800313c:	e053      	b.n	80031e6 <UART_SetConfig+0x30e>
 800313e:	2302      	movs	r3, #2
 8003140:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003144:	e04f      	b.n	80031e6 <UART_SetConfig+0x30e>
 8003146:	2304      	movs	r3, #4
 8003148:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800314c:	e04b      	b.n	80031e6 <UART_SetConfig+0x30e>
 800314e:	2308      	movs	r3, #8
 8003150:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003154:	e047      	b.n	80031e6 <UART_SetConfig+0x30e>
 8003156:	2310      	movs	r3, #16
 8003158:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800315c:	bf00      	nop
 800315e:	e042      	b.n	80031e6 <UART_SetConfig+0x30e>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a17      	ldr	r2, [pc, #92]	; (80031c4 <UART_SetConfig+0x2ec>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d13a      	bne.n	80031e0 <UART_SetConfig+0x308>
 800316a:	4b18      	ldr	r3, [pc, #96]	; (80031cc <UART_SetConfig+0x2f4>)
 800316c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003170:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003178:	d014      	beq.n	80031a4 <UART_SetConfig+0x2cc>
 800317a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800317e:	d802      	bhi.n	8003186 <UART_SetConfig+0x2ae>
 8003180:	2b00      	cmp	r3, #0
 8003182:	d007      	beq.n	8003194 <UART_SetConfig+0x2bc>
 8003184:	e016      	b.n	80031b4 <UART_SetConfig+0x2dc>
 8003186:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800318a:	d007      	beq.n	800319c <UART_SetConfig+0x2c4>
 800318c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003190:	d00c      	beq.n	80031ac <UART_SetConfig+0x2d4>
 8003192:	e00f      	b.n	80031b4 <UART_SetConfig+0x2dc>
 8003194:	2300      	movs	r3, #0
 8003196:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800319a:	e024      	b.n	80031e6 <UART_SetConfig+0x30e>
 800319c:	2302      	movs	r3, #2
 800319e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031a2:	e020      	b.n	80031e6 <UART_SetConfig+0x30e>
 80031a4:	2304      	movs	r3, #4
 80031a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031aa:	e01c      	b.n	80031e6 <UART_SetConfig+0x30e>
 80031ac:	2308      	movs	r3, #8
 80031ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031b2:	e018      	b.n	80031e6 <UART_SetConfig+0x30e>
 80031b4:	2310      	movs	r3, #16
 80031b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031ba:	bf00      	nop
 80031bc:	e013      	b.n	80031e6 <UART_SetConfig+0x30e>
 80031be:	bf00      	nop
 80031c0:	cfff69f3 	.word	0xcfff69f3
 80031c4:	40008000 	.word	0x40008000
 80031c8:	40013800 	.word	0x40013800
 80031cc:	40021000 	.word	0x40021000
 80031d0:	40004400 	.word	0x40004400
 80031d4:	40004800 	.word	0x40004800
 80031d8:	40004c00 	.word	0x40004c00
 80031dc:	40005000 	.word	0x40005000
 80031e0:	2310      	movs	r3, #16
 80031e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a86      	ldr	r2, [pc, #536]	; (8003404 <UART_SetConfig+0x52c>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	f040 8422 	bne.w	8003a36 <UART_SetConfig+0xb5e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80031f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031f6:	2b08      	cmp	r3, #8
 80031f8:	f200 8173 	bhi.w	80034e2 <UART_SetConfig+0x60a>
 80031fc:	a201      	add	r2, pc, #4	; (adr r2, 8003204 <UART_SetConfig+0x32c>)
 80031fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003202:	bf00      	nop
 8003204:	08003229 	.word	0x08003229
 8003208:	080034e3 	.word	0x080034e3
 800320c:	080032cb 	.word	0x080032cb
 8003210:	080034e3 	.word	0x080034e3
 8003214:	08003363 	.word	0x08003363
 8003218:	080034e3 	.word	0x080034e3
 800321c:	080034e3 	.word	0x080034e3
 8003220:	080034e3 	.word	0x080034e3
 8003224:	08003435 	.word	0x08003435
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003228:	f7ff fb48 	bl	80028bc <HAL_RCC_GetPCLK1Freq>
 800322c:	4602      	mov	r2, r0
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003232:	2b00      	cmp	r3, #0
 8003234:	d044      	beq.n	80032c0 <UART_SetConfig+0x3e8>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	2b01      	cmp	r3, #1
 800323c:	d03e      	beq.n	80032bc <UART_SetConfig+0x3e4>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	2b02      	cmp	r3, #2
 8003244:	d038      	beq.n	80032b8 <UART_SetConfig+0x3e0>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324a:	2b03      	cmp	r3, #3
 800324c:	d032      	beq.n	80032b4 <UART_SetConfig+0x3dc>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003252:	2b04      	cmp	r3, #4
 8003254:	d02c      	beq.n	80032b0 <UART_SetConfig+0x3d8>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	2b05      	cmp	r3, #5
 800325c:	d026      	beq.n	80032ac <UART_SetConfig+0x3d4>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003262:	2b06      	cmp	r3, #6
 8003264:	d020      	beq.n	80032a8 <UART_SetConfig+0x3d0>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326a:	2b07      	cmp	r3, #7
 800326c:	d01a      	beq.n	80032a4 <UART_SetConfig+0x3cc>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003272:	2b08      	cmp	r3, #8
 8003274:	d014      	beq.n	80032a0 <UART_SetConfig+0x3c8>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	2b09      	cmp	r3, #9
 800327c:	d00e      	beq.n	800329c <UART_SetConfig+0x3c4>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003282:	2b0a      	cmp	r3, #10
 8003284:	d008      	beq.n	8003298 <UART_SetConfig+0x3c0>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328a:	2b0b      	cmp	r3, #11
 800328c:	d102      	bne.n	8003294 <UART_SetConfig+0x3bc>
 800328e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003292:	e016      	b.n	80032c2 <UART_SetConfig+0x3ea>
 8003294:	2301      	movs	r3, #1
 8003296:	e014      	b.n	80032c2 <UART_SetConfig+0x3ea>
 8003298:	2380      	movs	r3, #128	; 0x80
 800329a:	e012      	b.n	80032c2 <UART_SetConfig+0x3ea>
 800329c:	2340      	movs	r3, #64	; 0x40
 800329e:	e010      	b.n	80032c2 <UART_SetConfig+0x3ea>
 80032a0:	2320      	movs	r3, #32
 80032a2:	e00e      	b.n	80032c2 <UART_SetConfig+0x3ea>
 80032a4:	2310      	movs	r3, #16
 80032a6:	e00c      	b.n	80032c2 <UART_SetConfig+0x3ea>
 80032a8:	230c      	movs	r3, #12
 80032aa:	e00a      	b.n	80032c2 <UART_SetConfig+0x3ea>
 80032ac:	230a      	movs	r3, #10
 80032ae:	e008      	b.n	80032c2 <UART_SetConfig+0x3ea>
 80032b0:	2308      	movs	r3, #8
 80032b2:	e006      	b.n	80032c2 <UART_SetConfig+0x3ea>
 80032b4:	2306      	movs	r3, #6
 80032b6:	e004      	b.n	80032c2 <UART_SetConfig+0x3ea>
 80032b8:	2304      	movs	r3, #4
 80032ba:	e002      	b.n	80032c2 <UART_SetConfig+0x3ea>
 80032bc:	2302      	movs	r3, #2
 80032be:	e000      	b.n	80032c2 <UART_SetConfig+0x3ea>
 80032c0:	2301      	movs	r3, #1
 80032c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c6:	617b      	str	r3, [r7, #20]
        break;
 80032c8:	e10e      	b.n	80034e8 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d044      	beq.n	800335c <UART_SetConfig+0x484>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d03e      	beq.n	8003358 <UART_SetConfig+0x480>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d038      	beq.n	8003354 <UART_SetConfig+0x47c>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e6:	2b03      	cmp	r3, #3
 80032e8:	d032      	beq.n	8003350 <UART_SetConfig+0x478>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	d02c      	beq.n	800334c <UART_SetConfig+0x474>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f6:	2b05      	cmp	r3, #5
 80032f8:	d026      	beq.n	8003348 <UART_SetConfig+0x470>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fe:	2b06      	cmp	r3, #6
 8003300:	d020      	beq.n	8003344 <UART_SetConfig+0x46c>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003306:	2b07      	cmp	r3, #7
 8003308:	d01a      	beq.n	8003340 <UART_SetConfig+0x468>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	2b08      	cmp	r3, #8
 8003310:	d014      	beq.n	800333c <UART_SetConfig+0x464>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	2b09      	cmp	r3, #9
 8003318:	d00e      	beq.n	8003338 <UART_SetConfig+0x460>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331e:	2b0a      	cmp	r3, #10
 8003320:	d008      	beq.n	8003334 <UART_SetConfig+0x45c>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	2b0b      	cmp	r3, #11
 8003328:	d102      	bne.n	8003330 <UART_SetConfig+0x458>
 800332a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800332e:	e016      	b.n	800335e <UART_SetConfig+0x486>
 8003330:	4b35      	ldr	r3, [pc, #212]	; (8003408 <UART_SetConfig+0x530>)
 8003332:	e014      	b.n	800335e <UART_SetConfig+0x486>
 8003334:	4b35      	ldr	r3, [pc, #212]	; (800340c <UART_SetConfig+0x534>)
 8003336:	e012      	b.n	800335e <UART_SetConfig+0x486>
 8003338:	4b35      	ldr	r3, [pc, #212]	; (8003410 <UART_SetConfig+0x538>)
 800333a:	e010      	b.n	800335e <UART_SetConfig+0x486>
 800333c:	4b35      	ldr	r3, [pc, #212]	; (8003414 <UART_SetConfig+0x53c>)
 800333e:	e00e      	b.n	800335e <UART_SetConfig+0x486>
 8003340:	4b35      	ldr	r3, [pc, #212]	; (8003418 <UART_SetConfig+0x540>)
 8003342:	e00c      	b.n	800335e <UART_SetConfig+0x486>
 8003344:	4b35      	ldr	r3, [pc, #212]	; (800341c <UART_SetConfig+0x544>)
 8003346:	e00a      	b.n	800335e <UART_SetConfig+0x486>
 8003348:	4b35      	ldr	r3, [pc, #212]	; (8003420 <UART_SetConfig+0x548>)
 800334a:	e008      	b.n	800335e <UART_SetConfig+0x486>
 800334c:	4b35      	ldr	r3, [pc, #212]	; (8003424 <UART_SetConfig+0x54c>)
 800334e:	e006      	b.n	800335e <UART_SetConfig+0x486>
 8003350:	4b35      	ldr	r3, [pc, #212]	; (8003428 <UART_SetConfig+0x550>)
 8003352:	e004      	b.n	800335e <UART_SetConfig+0x486>
 8003354:	4b35      	ldr	r3, [pc, #212]	; (800342c <UART_SetConfig+0x554>)
 8003356:	e002      	b.n	800335e <UART_SetConfig+0x486>
 8003358:	4b35      	ldr	r3, [pc, #212]	; (8003430 <UART_SetConfig+0x558>)
 800335a:	e000      	b.n	800335e <UART_SetConfig+0x486>
 800335c:	4b2a      	ldr	r3, [pc, #168]	; (8003408 <UART_SetConfig+0x530>)
 800335e:	617b      	str	r3, [r7, #20]
        break;
 8003360:	e0c2      	b.n	80034e8 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003362:	f7ff fa3d 	bl	80027e0 <HAL_RCC_GetSysClockFreq>
 8003366:	4602      	mov	r2, r0
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	2b00      	cmp	r3, #0
 800336e:	d044      	beq.n	80033fa <UART_SetConfig+0x522>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003374:	2b01      	cmp	r3, #1
 8003376:	d03e      	beq.n	80033f6 <UART_SetConfig+0x51e>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	2b02      	cmp	r3, #2
 800337e:	d038      	beq.n	80033f2 <UART_SetConfig+0x51a>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003384:	2b03      	cmp	r3, #3
 8003386:	d032      	beq.n	80033ee <UART_SetConfig+0x516>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338c:	2b04      	cmp	r3, #4
 800338e:	d02c      	beq.n	80033ea <UART_SetConfig+0x512>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003394:	2b05      	cmp	r3, #5
 8003396:	d026      	beq.n	80033e6 <UART_SetConfig+0x50e>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339c:	2b06      	cmp	r3, #6
 800339e:	d020      	beq.n	80033e2 <UART_SetConfig+0x50a>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	2b07      	cmp	r3, #7
 80033a6:	d01a      	beq.n	80033de <UART_SetConfig+0x506>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ac:	2b08      	cmp	r3, #8
 80033ae:	d014      	beq.n	80033da <UART_SetConfig+0x502>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b4:	2b09      	cmp	r3, #9
 80033b6:	d00e      	beq.n	80033d6 <UART_SetConfig+0x4fe>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033bc:	2b0a      	cmp	r3, #10
 80033be:	d008      	beq.n	80033d2 <UART_SetConfig+0x4fa>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c4:	2b0b      	cmp	r3, #11
 80033c6:	d102      	bne.n	80033ce <UART_SetConfig+0x4f6>
 80033c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033cc:	e016      	b.n	80033fc <UART_SetConfig+0x524>
 80033ce:	2301      	movs	r3, #1
 80033d0:	e014      	b.n	80033fc <UART_SetConfig+0x524>
 80033d2:	2380      	movs	r3, #128	; 0x80
 80033d4:	e012      	b.n	80033fc <UART_SetConfig+0x524>
 80033d6:	2340      	movs	r3, #64	; 0x40
 80033d8:	e010      	b.n	80033fc <UART_SetConfig+0x524>
 80033da:	2320      	movs	r3, #32
 80033dc:	e00e      	b.n	80033fc <UART_SetConfig+0x524>
 80033de:	2310      	movs	r3, #16
 80033e0:	e00c      	b.n	80033fc <UART_SetConfig+0x524>
 80033e2:	230c      	movs	r3, #12
 80033e4:	e00a      	b.n	80033fc <UART_SetConfig+0x524>
 80033e6:	230a      	movs	r3, #10
 80033e8:	e008      	b.n	80033fc <UART_SetConfig+0x524>
 80033ea:	2308      	movs	r3, #8
 80033ec:	e006      	b.n	80033fc <UART_SetConfig+0x524>
 80033ee:	2306      	movs	r3, #6
 80033f0:	e004      	b.n	80033fc <UART_SetConfig+0x524>
 80033f2:	2304      	movs	r3, #4
 80033f4:	e002      	b.n	80033fc <UART_SetConfig+0x524>
 80033f6:	2302      	movs	r3, #2
 80033f8:	e000      	b.n	80033fc <UART_SetConfig+0x524>
 80033fa:	2301      	movs	r3, #1
 80033fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003400:	617b      	str	r3, [r7, #20]
        break;
 8003402:	e071      	b.n	80034e8 <UART_SetConfig+0x610>
 8003404:	40008000 	.word	0x40008000
 8003408:	00f42400 	.word	0x00f42400
 800340c:	0001e848 	.word	0x0001e848
 8003410:	0003d090 	.word	0x0003d090
 8003414:	0007a120 	.word	0x0007a120
 8003418:	000f4240 	.word	0x000f4240
 800341c:	00145855 	.word	0x00145855
 8003420:	00186a00 	.word	0x00186a00
 8003424:	001e8480 	.word	0x001e8480
 8003428:	0028b0aa 	.word	0x0028b0aa
 800342c:	003d0900 	.word	0x003d0900
 8003430:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	2b00      	cmp	r3, #0
 800343a:	d04e      	beq.n	80034da <UART_SetConfig+0x602>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	2b01      	cmp	r3, #1
 8003442:	d047      	beq.n	80034d4 <UART_SetConfig+0x5fc>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003448:	2b02      	cmp	r3, #2
 800344a:	d040      	beq.n	80034ce <UART_SetConfig+0x5f6>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003450:	2b03      	cmp	r3, #3
 8003452:	d039      	beq.n	80034c8 <UART_SetConfig+0x5f0>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003458:	2b04      	cmp	r3, #4
 800345a:	d032      	beq.n	80034c2 <UART_SetConfig+0x5ea>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003460:	2b05      	cmp	r3, #5
 8003462:	d02b      	beq.n	80034bc <UART_SetConfig+0x5e4>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003468:	2b06      	cmp	r3, #6
 800346a:	d024      	beq.n	80034b6 <UART_SetConfig+0x5de>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	2b07      	cmp	r3, #7
 8003472:	d01d      	beq.n	80034b0 <UART_SetConfig+0x5d8>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003478:	2b08      	cmp	r3, #8
 800347a:	d016      	beq.n	80034aa <UART_SetConfig+0x5d2>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	2b09      	cmp	r3, #9
 8003482:	d00f      	beq.n	80034a4 <UART_SetConfig+0x5cc>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	2b0a      	cmp	r3, #10
 800348a:	d008      	beq.n	800349e <UART_SetConfig+0x5c6>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003490:	2b0b      	cmp	r3, #11
 8003492:	d101      	bne.n	8003498 <UART_SetConfig+0x5c0>
 8003494:	2380      	movs	r3, #128	; 0x80
 8003496:	e022      	b.n	80034de <UART_SetConfig+0x606>
 8003498:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800349c:	e01f      	b.n	80034de <UART_SetConfig+0x606>
 800349e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034a2:	e01c      	b.n	80034de <UART_SetConfig+0x606>
 80034a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034a8:	e019      	b.n	80034de <UART_SetConfig+0x606>
 80034aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034ae:	e016      	b.n	80034de <UART_SetConfig+0x606>
 80034b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80034b4:	e013      	b.n	80034de <UART_SetConfig+0x606>
 80034b6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80034ba:	e010      	b.n	80034de <UART_SetConfig+0x606>
 80034bc:	f640 43cc 	movw	r3, #3276	; 0xccc
 80034c0:	e00d      	b.n	80034de <UART_SetConfig+0x606>
 80034c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034c6:	e00a      	b.n	80034de <UART_SetConfig+0x606>
 80034c8:	f241 5355 	movw	r3, #5461	; 0x1555
 80034cc:	e007      	b.n	80034de <UART_SetConfig+0x606>
 80034ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034d2:	e004      	b.n	80034de <UART_SetConfig+0x606>
 80034d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80034d8:	e001      	b.n	80034de <UART_SetConfig+0x606>
 80034da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034de:	617b      	str	r3, [r7, #20]
        break;
 80034e0:	e002      	b.n	80034e8 <UART_SetConfig+0x610>
      default:
        ret = HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	76fb      	strb	r3, [r7, #27]
        break;
 80034e6:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f000 86b7 	beq.w	800425e <UART_SetConfig+0x1386>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	4613      	mov	r3, r2
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	4413      	add	r3, r2
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d305      	bcc.n	800350c <UART_SetConfig+0x634>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003506:	697a      	ldr	r2, [r7, #20]
 8003508:	429a      	cmp	r2, r3
 800350a:	d903      	bls.n	8003514 <UART_SetConfig+0x63c>
      {
        ret = HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	76fb      	strb	r3, [r7, #27]
 8003510:	f000 bea5 	b.w	800425e <UART_SetConfig+0x1386>
      }
      else
      {
        switch (clocksource)
 8003514:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003518:	2b08      	cmp	r3, #8
 800351a:	f200 8277 	bhi.w	8003a0c <UART_SetConfig+0xb34>
 800351e:	a201      	add	r2, pc, #4	; (adr r2, 8003524 <UART_SetConfig+0x64c>)
 8003520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003524:	08003549 	.word	0x08003549
 8003528:	08003a0d 	.word	0x08003a0d
 800352c:	08003687 	.word	0x08003687
 8003530:	08003a0d 	.word	0x08003a0d
 8003534:	0800377d 	.word	0x0800377d
 8003538:	08003a0d 	.word	0x08003a0d
 800353c:	08003a0d 	.word	0x08003a0d
 8003540:	08003a0d 	.word	0x08003a0d
 8003544:	080038bb 	.word	0x080038bb
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8003548:	f7ff f9b8 	bl	80028bc <HAL_RCC_GetPCLK1Freq>
 800354c:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	4618      	mov	r0, r3
 8003552:	f04f 0100 	mov.w	r1, #0
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355a:	2b00      	cmp	r3, #0
 800355c:	d067      	beq.n	800362e <UART_SetConfig+0x756>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003562:	2b01      	cmp	r3, #1
 8003564:	d05e      	beq.n	8003624 <UART_SetConfig+0x74c>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356a:	2b02      	cmp	r3, #2
 800356c:	d055      	beq.n	800361a <UART_SetConfig+0x742>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003572:	2b03      	cmp	r3, #3
 8003574:	d04c      	beq.n	8003610 <UART_SetConfig+0x738>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	2b04      	cmp	r3, #4
 800357c:	d043      	beq.n	8003606 <UART_SetConfig+0x72e>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003582:	2b05      	cmp	r3, #5
 8003584:	d03a      	beq.n	80035fc <UART_SetConfig+0x724>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358a:	2b06      	cmp	r3, #6
 800358c:	d031      	beq.n	80035f2 <UART_SetConfig+0x71a>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003592:	2b07      	cmp	r3, #7
 8003594:	d028      	beq.n	80035e8 <UART_SetConfig+0x710>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359a:	2b08      	cmp	r3, #8
 800359c:	d01f      	beq.n	80035de <UART_SetConfig+0x706>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	2b09      	cmp	r3, #9
 80035a4:	d016      	beq.n	80035d4 <UART_SetConfig+0x6fc>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035aa:	2b0a      	cmp	r3, #10
 80035ac:	d00d      	beq.n	80035ca <UART_SetConfig+0x6f2>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b2:	2b0b      	cmp	r3, #11
 80035b4:	d104      	bne.n	80035c0 <UART_SetConfig+0x6e8>
 80035b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035ba:	f04f 0400 	mov.w	r4, #0
 80035be:	e03a      	b.n	8003636 <UART_SetConfig+0x75e>
 80035c0:	f04f 0301 	mov.w	r3, #1
 80035c4:	f04f 0400 	mov.w	r4, #0
 80035c8:	e035      	b.n	8003636 <UART_SetConfig+0x75e>
 80035ca:	f04f 0380 	mov.w	r3, #128	; 0x80
 80035ce:	f04f 0400 	mov.w	r4, #0
 80035d2:	e030      	b.n	8003636 <UART_SetConfig+0x75e>
 80035d4:	f04f 0340 	mov.w	r3, #64	; 0x40
 80035d8:	f04f 0400 	mov.w	r4, #0
 80035dc:	e02b      	b.n	8003636 <UART_SetConfig+0x75e>
 80035de:	f04f 0320 	mov.w	r3, #32
 80035e2:	f04f 0400 	mov.w	r4, #0
 80035e6:	e026      	b.n	8003636 <UART_SetConfig+0x75e>
 80035e8:	f04f 0310 	mov.w	r3, #16
 80035ec:	f04f 0400 	mov.w	r4, #0
 80035f0:	e021      	b.n	8003636 <UART_SetConfig+0x75e>
 80035f2:	f04f 030c 	mov.w	r3, #12
 80035f6:	f04f 0400 	mov.w	r4, #0
 80035fa:	e01c      	b.n	8003636 <UART_SetConfig+0x75e>
 80035fc:	f04f 030a 	mov.w	r3, #10
 8003600:	f04f 0400 	mov.w	r4, #0
 8003604:	e017      	b.n	8003636 <UART_SetConfig+0x75e>
 8003606:	f04f 0308 	mov.w	r3, #8
 800360a:	f04f 0400 	mov.w	r4, #0
 800360e:	e012      	b.n	8003636 <UART_SetConfig+0x75e>
 8003610:	f04f 0306 	mov.w	r3, #6
 8003614:	f04f 0400 	mov.w	r4, #0
 8003618:	e00d      	b.n	8003636 <UART_SetConfig+0x75e>
 800361a:	f04f 0304 	mov.w	r3, #4
 800361e:	f04f 0400 	mov.w	r4, #0
 8003622:	e008      	b.n	8003636 <UART_SetConfig+0x75e>
 8003624:	f04f 0302 	mov.w	r3, #2
 8003628:	f04f 0400 	mov.w	r4, #0
 800362c:	e003      	b.n	8003636 <UART_SetConfig+0x75e>
 800362e:	f04f 0301 	mov.w	r3, #1
 8003632:	f04f 0400 	mov.w	r4, #0
 8003636:	461a      	mov	r2, r3
 8003638:	4623      	mov	r3, r4
 800363a:	f7fc fded 	bl	8000218 <__aeabi_uldivmod>
 800363e:	4603      	mov	r3, r0
 8003640:	460c      	mov	r4, r1
 8003642:	4619      	mov	r1, r3
 8003644:	4622      	mov	r2, r4
 8003646:	f04f 0300 	mov.w	r3, #0
 800364a:	f04f 0400 	mov.w	r4, #0
 800364e:	0214      	lsls	r4, r2, #8
 8003650:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003654:	020b      	lsls	r3, r1, #8
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	6852      	ldr	r2, [r2, #4]
 800365a:	0852      	lsrs	r2, r2, #1
 800365c:	4611      	mov	r1, r2
 800365e:	f04f 0200 	mov.w	r2, #0
 8003662:	eb13 0b01 	adds.w	fp, r3, r1
 8003666:	eb44 0c02 	adc.w	ip, r4, r2
 800366a:	4658      	mov	r0, fp
 800366c:	4661      	mov	r1, ip
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f04f 0400 	mov.w	r4, #0
 8003676:	461a      	mov	r2, r3
 8003678:	4623      	mov	r3, r4
 800367a:	f7fc fdcd 	bl	8000218 <__aeabi_uldivmod>
 800367e:	4603      	mov	r3, r0
 8003680:	460c      	mov	r4, r1
 8003682:	61fb      	str	r3, [r7, #28]
            break;
 8003684:	e1c5      	b.n	8003a12 <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368a:	2b00      	cmp	r3, #0
 800368c:	d05b      	beq.n	8003746 <UART_SetConfig+0x86e>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	2b01      	cmp	r3, #1
 8003694:	d053      	beq.n	800373e <UART_SetConfig+0x866>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369a:	2b02      	cmp	r3, #2
 800369c:	d04b      	beq.n	8003736 <UART_SetConfig+0x85e>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a2:	2b03      	cmp	r3, #3
 80036a4:	d043      	beq.n	800372e <UART_SetConfig+0x856>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036aa:	2b04      	cmp	r3, #4
 80036ac:	d03b      	beq.n	8003726 <UART_SetConfig+0x84e>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b2:	2b05      	cmp	r3, #5
 80036b4:	d033      	beq.n	800371e <UART_SetConfig+0x846>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ba:	2b06      	cmp	r3, #6
 80036bc:	d02b      	beq.n	8003716 <UART_SetConfig+0x83e>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c2:	2b07      	cmp	r3, #7
 80036c4:	d023      	beq.n	800370e <UART_SetConfig+0x836>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ca:	2b08      	cmp	r3, #8
 80036cc:	d01b      	beq.n	8003706 <UART_SetConfig+0x82e>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d2:	2b09      	cmp	r3, #9
 80036d4:	d013      	beq.n	80036fe <UART_SetConfig+0x826>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036da:	2b0a      	cmp	r3, #10
 80036dc:	d00b      	beq.n	80036f6 <UART_SetConfig+0x81e>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e2:	2b0b      	cmp	r3, #11
 80036e4:	d103      	bne.n	80036ee <UART_SetConfig+0x816>
 80036e6:	4bae      	ldr	r3, [pc, #696]	; (80039a0 <UART_SetConfig+0xac8>)
 80036e8:	f04f 0400 	mov.w	r4, #0
 80036ec:	e02e      	b.n	800374c <UART_SetConfig+0x874>
 80036ee:	4bad      	ldr	r3, [pc, #692]	; (80039a4 <UART_SetConfig+0xacc>)
 80036f0:	f04f 0400 	mov.w	r4, #0
 80036f4:	e02a      	b.n	800374c <UART_SetConfig+0x874>
 80036f6:	4bac      	ldr	r3, [pc, #688]	; (80039a8 <UART_SetConfig+0xad0>)
 80036f8:	f04f 0400 	mov.w	r4, #0
 80036fc:	e026      	b.n	800374c <UART_SetConfig+0x874>
 80036fe:	4bab      	ldr	r3, [pc, #684]	; (80039ac <UART_SetConfig+0xad4>)
 8003700:	f04f 0400 	mov.w	r4, #0
 8003704:	e022      	b.n	800374c <UART_SetConfig+0x874>
 8003706:	4baa      	ldr	r3, [pc, #680]	; (80039b0 <UART_SetConfig+0xad8>)
 8003708:	f04f 0400 	mov.w	r4, #0
 800370c:	e01e      	b.n	800374c <UART_SetConfig+0x874>
 800370e:	4ba9      	ldr	r3, [pc, #676]	; (80039b4 <UART_SetConfig+0xadc>)
 8003710:	f04f 0400 	mov.w	r4, #0
 8003714:	e01a      	b.n	800374c <UART_SetConfig+0x874>
 8003716:	a49e      	add	r4, pc, #632	; (adr r4, 8003990 <UART_SetConfig+0xab8>)
 8003718:	e9d4 3400 	ldrd	r3, r4, [r4]
 800371c:	e016      	b.n	800374c <UART_SetConfig+0x874>
 800371e:	4ba6      	ldr	r3, [pc, #664]	; (80039b8 <UART_SetConfig+0xae0>)
 8003720:	f04f 0400 	mov.w	r4, #0
 8003724:	e012      	b.n	800374c <UART_SetConfig+0x874>
 8003726:	4ba5      	ldr	r3, [pc, #660]	; (80039bc <UART_SetConfig+0xae4>)
 8003728:	f04f 0400 	mov.w	r4, #0
 800372c:	e00e      	b.n	800374c <UART_SetConfig+0x874>
 800372e:	a49a      	add	r4, pc, #616	; (adr r4, 8003998 <UART_SetConfig+0xac0>)
 8003730:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003734:	e00a      	b.n	800374c <UART_SetConfig+0x874>
 8003736:	4ba2      	ldr	r3, [pc, #648]	; (80039c0 <UART_SetConfig+0xae8>)
 8003738:	f04f 0400 	mov.w	r4, #0
 800373c:	e006      	b.n	800374c <UART_SetConfig+0x874>
 800373e:	4ba1      	ldr	r3, [pc, #644]	; (80039c4 <UART_SetConfig+0xaec>)
 8003740:	f04f 0400 	mov.w	r4, #0
 8003744:	e002      	b.n	800374c <UART_SetConfig+0x874>
 8003746:	4b97      	ldr	r3, [pc, #604]	; (80039a4 <UART_SetConfig+0xacc>)
 8003748:	f04f 0400 	mov.w	r4, #0
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6852      	ldr	r2, [r2, #4]
 8003750:	0852      	lsrs	r2, r2, #1
 8003752:	4611      	mov	r1, r2
 8003754:	f04f 0200 	mov.w	r2, #0
 8003758:	eb13 0b01 	adds.w	fp, r3, r1
 800375c:	eb44 0c02 	adc.w	ip, r4, r2
 8003760:	4658      	mov	r0, fp
 8003762:	4661      	mov	r1, ip
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f04f 0400 	mov.w	r4, #0
 800376c:	461a      	mov	r2, r3
 800376e:	4623      	mov	r3, r4
 8003770:	f7fc fd52 	bl	8000218 <__aeabi_uldivmod>
 8003774:	4603      	mov	r3, r0
 8003776:	460c      	mov	r4, r1
 8003778:	61fb      	str	r3, [r7, #28]
            break;
 800377a:	e14a      	b.n	8003a12 <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800377c:	f7ff f830 	bl	80027e0 <HAL_RCC_GetSysClockFreq>
 8003780:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	4618      	mov	r0, r3
 8003786:	f04f 0100 	mov.w	r1, #0
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	2b00      	cmp	r3, #0
 8003790:	d067      	beq.n	8003862 <UART_SetConfig+0x98a>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003796:	2b01      	cmp	r3, #1
 8003798:	d05e      	beq.n	8003858 <UART_SetConfig+0x980>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d055      	beq.n	800384e <UART_SetConfig+0x976>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a6:	2b03      	cmp	r3, #3
 80037a8:	d04c      	beq.n	8003844 <UART_SetConfig+0x96c>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	d043      	beq.n	800383a <UART_SetConfig+0x962>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b6:	2b05      	cmp	r3, #5
 80037b8:	d03a      	beq.n	8003830 <UART_SetConfig+0x958>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	2b06      	cmp	r3, #6
 80037c0:	d031      	beq.n	8003826 <UART_SetConfig+0x94e>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c6:	2b07      	cmp	r3, #7
 80037c8:	d028      	beq.n	800381c <UART_SetConfig+0x944>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ce:	2b08      	cmp	r3, #8
 80037d0:	d01f      	beq.n	8003812 <UART_SetConfig+0x93a>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d6:	2b09      	cmp	r3, #9
 80037d8:	d016      	beq.n	8003808 <UART_SetConfig+0x930>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037de:	2b0a      	cmp	r3, #10
 80037e0:	d00d      	beq.n	80037fe <UART_SetConfig+0x926>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e6:	2b0b      	cmp	r3, #11
 80037e8:	d104      	bne.n	80037f4 <UART_SetConfig+0x91c>
 80037ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037ee:	f04f 0400 	mov.w	r4, #0
 80037f2:	e03a      	b.n	800386a <UART_SetConfig+0x992>
 80037f4:	f04f 0301 	mov.w	r3, #1
 80037f8:	f04f 0400 	mov.w	r4, #0
 80037fc:	e035      	b.n	800386a <UART_SetConfig+0x992>
 80037fe:	f04f 0380 	mov.w	r3, #128	; 0x80
 8003802:	f04f 0400 	mov.w	r4, #0
 8003806:	e030      	b.n	800386a <UART_SetConfig+0x992>
 8003808:	f04f 0340 	mov.w	r3, #64	; 0x40
 800380c:	f04f 0400 	mov.w	r4, #0
 8003810:	e02b      	b.n	800386a <UART_SetConfig+0x992>
 8003812:	f04f 0320 	mov.w	r3, #32
 8003816:	f04f 0400 	mov.w	r4, #0
 800381a:	e026      	b.n	800386a <UART_SetConfig+0x992>
 800381c:	f04f 0310 	mov.w	r3, #16
 8003820:	f04f 0400 	mov.w	r4, #0
 8003824:	e021      	b.n	800386a <UART_SetConfig+0x992>
 8003826:	f04f 030c 	mov.w	r3, #12
 800382a:	f04f 0400 	mov.w	r4, #0
 800382e:	e01c      	b.n	800386a <UART_SetConfig+0x992>
 8003830:	f04f 030a 	mov.w	r3, #10
 8003834:	f04f 0400 	mov.w	r4, #0
 8003838:	e017      	b.n	800386a <UART_SetConfig+0x992>
 800383a:	f04f 0308 	mov.w	r3, #8
 800383e:	f04f 0400 	mov.w	r4, #0
 8003842:	e012      	b.n	800386a <UART_SetConfig+0x992>
 8003844:	f04f 0306 	mov.w	r3, #6
 8003848:	f04f 0400 	mov.w	r4, #0
 800384c:	e00d      	b.n	800386a <UART_SetConfig+0x992>
 800384e:	f04f 0304 	mov.w	r3, #4
 8003852:	f04f 0400 	mov.w	r4, #0
 8003856:	e008      	b.n	800386a <UART_SetConfig+0x992>
 8003858:	f04f 0302 	mov.w	r3, #2
 800385c:	f04f 0400 	mov.w	r4, #0
 8003860:	e003      	b.n	800386a <UART_SetConfig+0x992>
 8003862:	f04f 0301 	mov.w	r3, #1
 8003866:	f04f 0400 	mov.w	r4, #0
 800386a:	461a      	mov	r2, r3
 800386c:	4623      	mov	r3, r4
 800386e:	f7fc fcd3 	bl	8000218 <__aeabi_uldivmod>
 8003872:	4603      	mov	r3, r0
 8003874:	460c      	mov	r4, r1
 8003876:	4619      	mov	r1, r3
 8003878:	4622      	mov	r2, r4
 800387a:	f04f 0300 	mov.w	r3, #0
 800387e:	f04f 0400 	mov.w	r4, #0
 8003882:	0214      	lsls	r4, r2, #8
 8003884:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003888:	020b      	lsls	r3, r1, #8
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	6852      	ldr	r2, [r2, #4]
 800388e:	0852      	lsrs	r2, r2, #1
 8003890:	4611      	mov	r1, r2
 8003892:	f04f 0200 	mov.w	r2, #0
 8003896:	eb13 0b01 	adds.w	fp, r3, r1
 800389a:	eb44 0c02 	adc.w	ip, r4, r2
 800389e:	4658      	mov	r0, fp
 80038a0:	4661      	mov	r1, ip
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f04f 0400 	mov.w	r4, #0
 80038aa:	461a      	mov	r2, r3
 80038ac:	4623      	mov	r3, r4
 80038ae:	f7fc fcb3 	bl	8000218 <__aeabi_uldivmod>
 80038b2:	4603      	mov	r3, r0
 80038b4:	460c      	mov	r4, r1
 80038b6:	61fb      	str	r3, [r7, #28]
            break;
 80038b8:	e0ab      	b.n	8003a12 <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f000 8088 	beq.w	80039d4 <UART_SetConfig+0xafc>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d05b      	beq.n	8003984 <UART_SetConfig+0xaac>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d052      	beq.n	800397a <UART_SetConfig+0xaa2>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	2b03      	cmp	r3, #3
 80038da:	d04a      	beq.n	8003972 <UART_SetConfig+0xa9a>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	2b04      	cmp	r3, #4
 80038e2:	d041      	beq.n	8003968 <UART_SetConfig+0xa90>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e8:	2b05      	cmp	r3, #5
 80038ea:	d039      	beq.n	8003960 <UART_SetConfig+0xa88>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f0:	2b06      	cmp	r3, #6
 80038f2:	d031      	beq.n	8003958 <UART_SetConfig+0xa80>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f8:	2b07      	cmp	r3, #7
 80038fa:	d028      	beq.n	800394e <UART_SetConfig+0xa76>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	2b08      	cmp	r3, #8
 8003902:	d01f      	beq.n	8003944 <UART_SetConfig+0xa6c>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	2b09      	cmp	r3, #9
 800390a:	d016      	beq.n	800393a <UART_SetConfig+0xa62>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003910:	2b0a      	cmp	r3, #10
 8003912:	d00d      	beq.n	8003930 <UART_SetConfig+0xa58>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	2b0b      	cmp	r3, #11
 800391a:	d104      	bne.n	8003926 <UART_SetConfig+0xa4e>
 800391c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003920:	f04f 0400 	mov.w	r4, #0
 8003924:	e05a      	b.n	80039dc <UART_SetConfig+0xb04>
 8003926:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800392a:	f04f 0400 	mov.w	r4, #0
 800392e:	e055      	b.n	80039dc <UART_SetConfig+0xb04>
 8003930:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003934:	f04f 0400 	mov.w	r4, #0
 8003938:	e050      	b.n	80039dc <UART_SetConfig+0xb04>
 800393a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800393e:	f04f 0400 	mov.w	r4, #0
 8003942:	e04b      	b.n	80039dc <UART_SetConfig+0xb04>
 8003944:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003948:	f04f 0400 	mov.w	r4, #0
 800394c:	e046      	b.n	80039dc <UART_SetConfig+0xb04>
 800394e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003952:	f04f 0400 	mov.w	r4, #0
 8003956:	e041      	b.n	80039dc <UART_SetConfig+0xb04>
 8003958:	4b1b      	ldr	r3, [pc, #108]	; (80039c8 <UART_SetConfig+0xaf0>)
 800395a:	f04f 0400 	mov.w	r4, #0
 800395e:	e03d      	b.n	80039dc <UART_SetConfig+0xb04>
 8003960:	4b1a      	ldr	r3, [pc, #104]	; (80039cc <UART_SetConfig+0xaf4>)
 8003962:	f04f 0400 	mov.w	r4, #0
 8003966:	e039      	b.n	80039dc <UART_SetConfig+0xb04>
 8003968:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800396c:	f04f 0400 	mov.w	r4, #0
 8003970:	e034      	b.n	80039dc <UART_SetConfig+0xb04>
 8003972:	4b17      	ldr	r3, [pc, #92]	; (80039d0 <UART_SetConfig+0xaf8>)
 8003974:	f04f 0400 	mov.w	r4, #0
 8003978:	e030      	b.n	80039dc <UART_SetConfig+0xb04>
 800397a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800397e:	f04f 0400 	mov.w	r4, #0
 8003982:	e02b      	b.n	80039dc <UART_SetConfig+0xb04>
 8003984:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003988:	f04f 0400 	mov.w	r4, #0
 800398c:	e026      	b.n	80039dc <UART_SetConfig+0xb04>
 800398e:	bf00      	nop
 8003990:	14585500 	.word	0x14585500
 8003994:	00000000 	.word	0x00000000
 8003998:	28b0aa00 	.word	0x28b0aa00
 800399c:	00000000 	.word	0x00000000
 80039a0:	00f42400 	.word	0x00f42400
 80039a4:	f4240000 	.word	0xf4240000
 80039a8:	01e84800 	.word	0x01e84800
 80039ac:	03d09000 	.word	0x03d09000
 80039b0:	07a12000 	.word	0x07a12000
 80039b4:	0f424000 	.word	0x0f424000
 80039b8:	186a0000 	.word	0x186a0000
 80039bc:	1e848000 	.word	0x1e848000
 80039c0:	3d090000 	.word	0x3d090000
 80039c4:	7a120000 	.word	0x7a120000
 80039c8:	000aaa00 	.word	0x000aaa00
 80039cc:	000ccc00 	.word	0x000ccc00
 80039d0:	00155500 	.word	0x00155500
 80039d4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80039d8:	f04f 0400 	mov.w	r4, #0
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	6852      	ldr	r2, [r2, #4]
 80039e0:	0852      	lsrs	r2, r2, #1
 80039e2:	4611      	mov	r1, r2
 80039e4:	f04f 0200 	mov.w	r2, #0
 80039e8:	eb13 0b01 	adds.w	fp, r3, r1
 80039ec:	eb44 0c02 	adc.w	ip, r4, r2
 80039f0:	4658      	mov	r0, fp
 80039f2:	4661      	mov	r1, ip
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f04f 0400 	mov.w	r4, #0
 80039fc:	461a      	mov	r2, r3
 80039fe:	4623      	mov	r3, r4
 8003a00:	f7fc fc0a 	bl	8000218 <__aeabi_uldivmod>
 8003a04:	4603      	mov	r3, r0
 8003a06:	460c      	mov	r4, r1
 8003a08:	61fb      	str	r3, [r7, #28]
            break;
 8003a0a:	e002      	b.n	8003a12 <UART_SetConfig+0xb3a>
          default:
            ret = HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	76fb      	strb	r3, [r7, #27]
            break;
 8003a10:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a18:	d309      	bcc.n	8003a2e <UART_SetConfig+0xb56>
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a20:	d205      	bcs.n	8003a2e <UART_SetConfig+0xb56>
        {
          huart->Instance->BRR = usartdiv;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	69fa      	ldr	r2, [r7, #28]
 8003a28:	60da      	str	r2, [r3, #12]
 8003a2a:	f000 bc18 	b.w	800425e <UART_SetConfig+0x1386>
        }
        else
        {
          ret = HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	76fb      	strb	r3, [r7, #27]
 8003a32:	f000 bc14 	b.w	800425e <UART_SetConfig+0x1386>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a3e:	f040 8204 	bne.w	8003e4a <UART_SetConfig+0xf72>
  {
    switch (clocksource)
 8003a42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a46:	2b08      	cmp	r3, #8
 8003a48:	f200 81df 	bhi.w	8003e0a <UART_SetConfig+0xf32>
 8003a4c:	a201      	add	r2, pc, #4	; (adr r2, 8003a54 <UART_SetConfig+0xb7c>)
 8003a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a52:	bf00      	nop
 8003a54:	08003a79 	.word	0x08003a79
 8003a58:	08003b31 	.word	0x08003b31
 8003a5c:	08003be9 	.word	0x08003be9
 8003a60:	08003e0b 	.word	0x08003e0b
 8003a64:	08003c91 	.word	0x08003c91
 8003a68:	08003e0b 	.word	0x08003e0b
 8003a6c:	08003e0b 	.word	0x08003e0b
 8003a70:	08003e0b 	.word	0x08003e0b
 8003a74:	08003d49 	.word	0x08003d49
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a78:	f7fe ff20 	bl	80028bc <HAL_RCC_GetPCLK1Freq>
 8003a7c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d044      	beq.n	8003b10 <UART_SetConfig+0xc38>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d03e      	beq.n	8003b0c <UART_SetConfig+0xc34>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d038      	beq.n	8003b08 <UART_SetConfig+0xc30>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9a:	2b03      	cmp	r3, #3
 8003a9c:	d032      	beq.n	8003b04 <UART_SetConfig+0xc2c>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa2:	2b04      	cmp	r3, #4
 8003aa4:	d02c      	beq.n	8003b00 <UART_SetConfig+0xc28>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	2b05      	cmp	r3, #5
 8003aac:	d026      	beq.n	8003afc <UART_SetConfig+0xc24>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab2:	2b06      	cmp	r3, #6
 8003ab4:	d020      	beq.n	8003af8 <UART_SetConfig+0xc20>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aba:	2b07      	cmp	r3, #7
 8003abc:	d01a      	beq.n	8003af4 <UART_SetConfig+0xc1c>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac2:	2b08      	cmp	r3, #8
 8003ac4:	d014      	beq.n	8003af0 <UART_SetConfig+0xc18>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aca:	2b09      	cmp	r3, #9
 8003acc:	d00e      	beq.n	8003aec <UART_SetConfig+0xc14>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad2:	2b0a      	cmp	r3, #10
 8003ad4:	d008      	beq.n	8003ae8 <UART_SetConfig+0xc10>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ada:	2b0b      	cmp	r3, #11
 8003adc:	d102      	bne.n	8003ae4 <UART_SetConfig+0xc0c>
 8003ade:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ae2:	e016      	b.n	8003b12 <UART_SetConfig+0xc3a>
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e014      	b.n	8003b12 <UART_SetConfig+0xc3a>
 8003ae8:	2380      	movs	r3, #128	; 0x80
 8003aea:	e012      	b.n	8003b12 <UART_SetConfig+0xc3a>
 8003aec:	2340      	movs	r3, #64	; 0x40
 8003aee:	e010      	b.n	8003b12 <UART_SetConfig+0xc3a>
 8003af0:	2320      	movs	r3, #32
 8003af2:	e00e      	b.n	8003b12 <UART_SetConfig+0xc3a>
 8003af4:	2310      	movs	r3, #16
 8003af6:	e00c      	b.n	8003b12 <UART_SetConfig+0xc3a>
 8003af8:	230c      	movs	r3, #12
 8003afa:	e00a      	b.n	8003b12 <UART_SetConfig+0xc3a>
 8003afc:	230a      	movs	r3, #10
 8003afe:	e008      	b.n	8003b12 <UART_SetConfig+0xc3a>
 8003b00:	2308      	movs	r3, #8
 8003b02:	e006      	b.n	8003b12 <UART_SetConfig+0xc3a>
 8003b04:	2306      	movs	r3, #6
 8003b06:	e004      	b.n	8003b12 <UART_SetConfig+0xc3a>
 8003b08:	2304      	movs	r3, #4
 8003b0a:	e002      	b.n	8003b12 <UART_SetConfig+0xc3a>
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	e000      	b.n	8003b12 <UART_SetConfig+0xc3a>
 8003b10:	2301      	movs	r3, #1
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b18:	005a      	lsls	r2, r3, #1
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	085b      	lsrs	r3, r3, #1
 8003b20:	441a      	add	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	61fb      	str	r3, [r7, #28]
        break;
 8003b2e:	e16f      	b.n	8003e10 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b30:	f7fe feda 	bl	80028e8 <HAL_RCC_GetPCLK2Freq>
 8003b34:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d044      	beq.n	8003bc8 <UART_SetConfig+0xcf0>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d03e      	beq.n	8003bc4 <UART_SetConfig+0xcec>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d038      	beq.n	8003bc0 <UART_SetConfig+0xce8>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b52:	2b03      	cmp	r3, #3
 8003b54:	d032      	beq.n	8003bbc <UART_SetConfig+0xce4>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5a:	2b04      	cmp	r3, #4
 8003b5c:	d02c      	beq.n	8003bb8 <UART_SetConfig+0xce0>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b62:	2b05      	cmp	r3, #5
 8003b64:	d026      	beq.n	8003bb4 <UART_SetConfig+0xcdc>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6a:	2b06      	cmp	r3, #6
 8003b6c:	d020      	beq.n	8003bb0 <UART_SetConfig+0xcd8>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b72:	2b07      	cmp	r3, #7
 8003b74:	d01a      	beq.n	8003bac <UART_SetConfig+0xcd4>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7a:	2b08      	cmp	r3, #8
 8003b7c:	d014      	beq.n	8003ba8 <UART_SetConfig+0xcd0>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b82:	2b09      	cmp	r3, #9
 8003b84:	d00e      	beq.n	8003ba4 <UART_SetConfig+0xccc>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8a:	2b0a      	cmp	r3, #10
 8003b8c:	d008      	beq.n	8003ba0 <UART_SetConfig+0xcc8>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b92:	2b0b      	cmp	r3, #11
 8003b94:	d102      	bne.n	8003b9c <UART_SetConfig+0xcc4>
 8003b96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b9a:	e016      	b.n	8003bca <UART_SetConfig+0xcf2>
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e014      	b.n	8003bca <UART_SetConfig+0xcf2>
 8003ba0:	2380      	movs	r3, #128	; 0x80
 8003ba2:	e012      	b.n	8003bca <UART_SetConfig+0xcf2>
 8003ba4:	2340      	movs	r3, #64	; 0x40
 8003ba6:	e010      	b.n	8003bca <UART_SetConfig+0xcf2>
 8003ba8:	2320      	movs	r3, #32
 8003baa:	e00e      	b.n	8003bca <UART_SetConfig+0xcf2>
 8003bac:	2310      	movs	r3, #16
 8003bae:	e00c      	b.n	8003bca <UART_SetConfig+0xcf2>
 8003bb0:	230c      	movs	r3, #12
 8003bb2:	e00a      	b.n	8003bca <UART_SetConfig+0xcf2>
 8003bb4:	230a      	movs	r3, #10
 8003bb6:	e008      	b.n	8003bca <UART_SetConfig+0xcf2>
 8003bb8:	2308      	movs	r3, #8
 8003bba:	e006      	b.n	8003bca <UART_SetConfig+0xcf2>
 8003bbc:	2306      	movs	r3, #6
 8003bbe:	e004      	b.n	8003bca <UART_SetConfig+0xcf2>
 8003bc0:	2304      	movs	r3, #4
 8003bc2:	e002      	b.n	8003bca <UART_SetConfig+0xcf2>
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	e000      	b.n	8003bca <UART_SetConfig+0xcf2>
 8003bc8:	2301      	movs	r3, #1
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd0:	005a      	lsls	r2, r3, #1
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	085b      	lsrs	r3, r3, #1
 8003bd8:	441a      	add	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	61fb      	str	r3, [r7, #28]
        break;
 8003be6:	e113      	b.n	8003e10 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d043      	beq.n	8003c78 <UART_SetConfig+0xda0>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d03d      	beq.n	8003c74 <UART_SetConfig+0xd9c>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d037      	beq.n	8003c70 <UART_SetConfig+0xd98>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	2b03      	cmp	r3, #3
 8003c06:	d031      	beq.n	8003c6c <UART_SetConfig+0xd94>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0c:	2b04      	cmp	r3, #4
 8003c0e:	d02b      	beq.n	8003c68 <UART_SetConfig+0xd90>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	2b05      	cmp	r3, #5
 8003c16:	d025      	beq.n	8003c64 <UART_SetConfig+0xd8c>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1c:	2b06      	cmp	r3, #6
 8003c1e:	d01f      	beq.n	8003c60 <UART_SetConfig+0xd88>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c24:	2b07      	cmp	r3, #7
 8003c26:	d019      	beq.n	8003c5c <UART_SetConfig+0xd84>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2c:	2b08      	cmp	r3, #8
 8003c2e:	d013      	beq.n	8003c58 <UART_SetConfig+0xd80>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c34:	2b09      	cmp	r3, #9
 8003c36:	d00d      	beq.n	8003c54 <UART_SetConfig+0xd7c>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3c:	2b0a      	cmp	r3, #10
 8003c3e:	d007      	beq.n	8003c50 <UART_SetConfig+0xd78>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	2b0b      	cmp	r3, #11
 8003c46:	d101      	bne.n	8003c4c <UART_SetConfig+0xd74>
 8003c48:	4b8d      	ldr	r3, [pc, #564]	; (8003e80 <UART_SetConfig+0xfa8>)
 8003c4a:	e016      	b.n	8003c7a <UART_SetConfig+0xda2>
 8003c4c:	4b8d      	ldr	r3, [pc, #564]	; (8003e84 <UART_SetConfig+0xfac>)
 8003c4e:	e014      	b.n	8003c7a <UART_SetConfig+0xda2>
 8003c50:	4b8d      	ldr	r3, [pc, #564]	; (8003e88 <UART_SetConfig+0xfb0>)
 8003c52:	e012      	b.n	8003c7a <UART_SetConfig+0xda2>
 8003c54:	4b8d      	ldr	r3, [pc, #564]	; (8003e8c <UART_SetConfig+0xfb4>)
 8003c56:	e010      	b.n	8003c7a <UART_SetConfig+0xda2>
 8003c58:	4b8d      	ldr	r3, [pc, #564]	; (8003e90 <UART_SetConfig+0xfb8>)
 8003c5a:	e00e      	b.n	8003c7a <UART_SetConfig+0xda2>
 8003c5c:	4b8d      	ldr	r3, [pc, #564]	; (8003e94 <UART_SetConfig+0xfbc>)
 8003c5e:	e00c      	b.n	8003c7a <UART_SetConfig+0xda2>
 8003c60:	4b8d      	ldr	r3, [pc, #564]	; (8003e98 <UART_SetConfig+0xfc0>)
 8003c62:	e00a      	b.n	8003c7a <UART_SetConfig+0xda2>
 8003c64:	4b8d      	ldr	r3, [pc, #564]	; (8003e9c <UART_SetConfig+0xfc4>)
 8003c66:	e008      	b.n	8003c7a <UART_SetConfig+0xda2>
 8003c68:	4b8d      	ldr	r3, [pc, #564]	; (8003ea0 <UART_SetConfig+0xfc8>)
 8003c6a:	e006      	b.n	8003c7a <UART_SetConfig+0xda2>
 8003c6c:	4b8d      	ldr	r3, [pc, #564]	; (8003ea4 <UART_SetConfig+0xfcc>)
 8003c6e:	e004      	b.n	8003c7a <UART_SetConfig+0xda2>
 8003c70:	4b8d      	ldr	r3, [pc, #564]	; (8003ea8 <UART_SetConfig+0xfd0>)
 8003c72:	e002      	b.n	8003c7a <UART_SetConfig+0xda2>
 8003c74:	4b8d      	ldr	r3, [pc, #564]	; (8003eac <UART_SetConfig+0xfd4>)
 8003c76:	e000      	b.n	8003c7a <UART_SetConfig+0xda2>
 8003c78:	4b82      	ldr	r3, [pc, #520]	; (8003e84 <UART_SetConfig+0xfac>)
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	6852      	ldr	r2, [r2, #4]
 8003c7e:	0852      	lsrs	r2, r2, #1
 8003c80:	441a      	add	r2, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	61fb      	str	r3, [r7, #28]
        break;
 8003c8e:	e0bf      	b.n	8003e10 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c90:	f7fe fda6 	bl	80027e0 <HAL_RCC_GetSysClockFreq>
 8003c94:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d044      	beq.n	8003d28 <UART_SetConfig+0xe50>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d03e      	beq.n	8003d24 <UART_SetConfig+0xe4c>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d038      	beq.n	8003d20 <UART_SetConfig+0xe48>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb2:	2b03      	cmp	r3, #3
 8003cb4:	d032      	beq.n	8003d1c <UART_SetConfig+0xe44>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cba:	2b04      	cmp	r3, #4
 8003cbc:	d02c      	beq.n	8003d18 <UART_SetConfig+0xe40>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc2:	2b05      	cmp	r3, #5
 8003cc4:	d026      	beq.n	8003d14 <UART_SetConfig+0xe3c>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cca:	2b06      	cmp	r3, #6
 8003ccc:	d020      	beq.n	8003d10 <UART_SetConfig+0xe38>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd2:	2b07      	cmp	r3, #7
 8003cd4:	d01a      	beq.n	8003d0c <UART_SetConfig+0xe34>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cda:	2b08      	cmp	r3, #8
 8003cdc:	d014      	beq.n	8003d08 <UART_SetConfig+0xe30>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce2:	2b09      	cmp	r3, #9
 8003ce4:	d00e      	beq.n	8003d04 <UART_SetConfig+0xe2c>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	2b0a      	cmp	r3, #10
 8003cec:	d008      	beq.n	8003d00 <UART_SetConfig+0xe28>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf2:	2b0b      	cmp	r3, #11
 8003cf4:	d102      	bne.n	8003cfc <UART_SetConfig+0xe24>
 8003cf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cfa:	e016      	b.n	8003d2a <UART_SetConfig+0xe52>
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e014      	b.n	8003d2a <UART_SetConfig+0xe52>
 8003d00:	2380      	movs	r3, #128	; 0x80
 8003d02:	e012      	b.n	8003d2a <UART_SetConfig+0xe52>
 8003d04:	2340      	movs	r3, #64	; 0x40
 8003d06:	e010      	b.n	8003d2a <UART_SetConfig+0xe52>
 8003d08:	2320      	movs	r3, #32
 8003d0a:	e00e      	b.n	8003d2a <UART_SetConfig+0xe52>
 8003d0c:	2310      	movs	r3, #16
 8003d0e:	e00c      	b.n	8003d2a <UART_SetConfig+0xe52>
 8003d10:	230c      	movs	r3, #12
 8003d12:	e00a      	b.n	8003d2a <UART_SetConfig+0xe52>
 8003d14:	230a      	movs	r3, #10
 8003d16:	e008      	b.n	8003d2a <UART_SetConfig+0xe52>
 8003d18:	2308      	movs	r3, #8
 8003d1a:	e006      	b.n	8003d2a <UART_SetConfig+0xe52>
 8003d1c:	2306      	movs	r3, #6
 8003d1e:	e004      	b.n	8003d2a <UART_SetConfig+0xe52>
 8003d20:	2304      	movs	r3, #4
 8003d22:	e002      	b.n	8003d2a <UART_SetConfig+0xe52>
 8003d24:	2302      	movs	r3, #2
 8003d26:	e000      	b.n	8003d2a <UART_SetConfig+0xe52>
 8003d28:	2301      	movs	r3, #1
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d30:	005a      	lsls	r2, r3, #1
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	085b      	lsrs	r3, r3, #1
 8003d38:	441a      	add	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	61fb      	str	r3, [r7, #28]
        break;
 8003d46:	e063      	b.n	8003e10 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d04f      	beq.n	8003df0 <UART_SetConfig+0xf18>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d048      	beq.n	8003dea <UART_SetConfig+0xf12>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d041      	beq.n	8003de4 <UART_SetConfig+0xf0c>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d64:	2b03      	cmp	r3, #3
 8003d66:	d03a      	beq.n	8003dde <UART_SetConfig+0xf06>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6c:	2b04      	cmp	r3, #4
 8003d6e:	d033      	beq.n	8003dd8 <UART_SetConfig+0xf00>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d74:	2b05      	cmp	r3, #5
 8003d76:	d02c      	beq.n	8003dd2 <UART_SetConfig+0xefa>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7c:	2b06      	cmp	r3, #6
 8003d7e:	d025      	beq.n	8003dcc <UART_SetConfig+0xef4>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	2b07      	cmp	r3, #7
 8003d86:	d01e      	beq.n	8003dc6 <UART_SetConfig+0xeee>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	2b08      	cmp	r3, #8
 8003d8e:	d017      	beq.n	8003dc0 <UART_SetConfig+0xee8>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d94:	2b09      	cmp	r3, #9
 8003d96:	d010      	beq.n	8003dba <UART_SetConfig+0xee2>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9c:	2b0a      	cmp	r3, #10
 8003d9e:	d009      	beq.n	8003db4 <UART_SetConfig+0xedc>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da4:	2b0b      	cmp	r3, #11
 8003da6:	d102      	bne.n	8003dae <UART_SetConfig+0xed6>
 8003da8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003dac:	e022      	b.n	8003df4 <UART_SetConfig+0xf1c>
 8003dae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003db2:	e01f      	b.n	8003df4 <UART_SetConfig+0xf1c>
 8003db4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003db8:	e01c      	b.n	8003df4 <UART_SetConfig+0xf1c>
 8003dba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dbe:	e019      	b.n	8003df4 <UART_SetConfig+0xf1c>
 8003dc0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003dc4:	e016      	b.n	8003df4 <UART_SetConfig+0xf1c>
 8003dc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dca:	e013      	b.n	8003df4 <UART_SetConfig+0xf1c>
 8003dcc:	f241 5354 	movw	r3, #5460	; 0x1554
 8003dd0:	e010      	b.n	8003df4 <UART_SetConfig+0xf1c>
 8003dd2:	f641 1398 	movw	r3, #6552	; 0x1998
 8003dd6:	e00d      	b.n	8003df4 <UART_SetConfig+0xf1c>
 8003dd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ddc:	e00a      	b.n	8003df4 <UART_SetConfig+0xf1c>
 8003dde:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8003de2:	e007      	b.n	8003df4 <UART_SetConfig+0xf1c>
 8003de4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003de8:	e004      	b.n	8003df4 <UART_SetConfig+0xf1c>
 8003dea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dee:	e001      	b.n	8003df4 <UART_SetConfig+0xf1c>
 8003df0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	6852      	ldr	r2, [r2, #4]
 8003df8:	0852      	lsrs	r2, r2, #1
 8003dfa:	441a      	add	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	61fb      	str	r3, [r7, #28]
        break;
 8003e08:	e002      	b.n	8003e10 <UART_SetConfig+0xf38>
      default:
        ret = HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	76fb      	strb	r3, [r7, #27]
        break;
 8003e0e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	2b0f      	cmp	r3, #15
 8003e14:	d916      	bls.n	8003e44 <UART_SetConfig+0xf6c>
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e1c:	d212      	bcs.n	8003e44 <UART_SetConfig+0xf6c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	f023 030f 	bic.w	r3, r3, #15
 8003e26:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	085b      	lsrs	r3, r3, #1
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	f003 0307 	and.w	r3, r3, #7
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	89fb      	ldrh	r3, [r7, #14]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	89fa      	ldrh	r2, [r7, #14]
 8003e40:	60da      	str	r2, [r3, #12]
 8003e42:	e20c      	b.n	800425e <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	76fb      	strb	r3, [r7, #27]
 8003e48:	e209      	b.n	800425e <UART_SetConfig+0x1386>
    }
  }
  else
  {
    switch (clocksource)
 8003e4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e4e:	2b08      	cmp	r3, #8
 8003e50:	f200 81f4 	bhi.w	800423c <UART_SetConfig+0x1364>
 8003e54:	a201      	add	r2, pc, #4	; (adr r2, 8003e5c <UART_SetConfig+0xf84>)
 8003e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e5a:	bf00      	nop
 8003e5c:	08003eb1 	.word	0x08003eb1
 8003e60:	08003f67 	.word	0x08003f67
 8003e64:	0800401d 	.word	0x0800401d
 8003e68:	0800423d 	.word	0x0800423d
 8003e6c:	080040c7 	.word	0x080040c7
 8003e70:	0800423d 	.word	0x0800423d
 8003e74:	0800423d 	.word	0x0800423d
 8003e78:	0800423d 	.word	0x0800423d
 8003e7c:	0800417d 	.word	0x0800417d
 8003e80:	0001e848 	.word	0x0001e848
 8003e84:	01e84800 	.word	0x01e84800
 8003e88:	0003d090 	.word	0x0003d090
 8003e8c:	0007a120 	.word	0x0007a120
 8003e90:	000f4240 	.word	0x000f4240
 8003e94:	001e8480 	.word	0x001e8480
 8003e98:	0028b0aa 	.word	0x0028b0aa
 8003e9c:	0030d400 	.word	0x0030d400
 8003ea0:	003d0900 	.word	0x003d0900
 8003ea4:	00516154 	.word	0x00516154
 8003ea8:	007a1200 	.word	0x007a1200
 8003eac:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003eb0:	f7fe fd04 	bl	80028bc <HAL_RCC_GetPCLK1Freq>
 8003eb4:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d044      	beq.n	8003f48 <UART_SetConfig+0x1070>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d03e      	beq.n	8003f44 <UART_SetConfig+0x106c>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d038      	beq.n	8003f40 <UART_SetConfig+0x1068>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	2b03      	cmp	r3, #3
 8003ed4:	d032      	beq.n	8003f3c <UART_SetConfig+0x1064>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	d02c      	beq.n	8003f38 <UART_SetConfig+0x1060>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee2:	2b05      	cmp	r3, #5
 8003ee4:	d026      	beq.n	8003f34 <UART_SetConfig+0x105c>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eea:	2b06      	cmp	r3, #6
 8003eec:	d020      	beq.n	8003f30 <UART_SetConfig+0x1058>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef2:	2b07      	cmp	r3, #7
 8003ef4:	d01a      	beq.n	8003f2c <UART_SetConfig+0x1054>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efa:	2b08      	cmp	r3, #8
 8003efc:	d014      	beq.n	8003f28 <UART_SetConfig+0x1050>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f02:	2b09      	cmp	r3, #9
 8003f04:	d00e      	beq.n	8003f24 <UART_SetConfig+0x104c>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0a:	2b0a      	cmp	r3, #10
 8003f0c:	d008      	beq.n	8003f20 <UART_SetConfig+0x1048>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f12:	2b0b      	cmp	r3, #11
 8003f14:	d102      	bne.n	8003f1c <UART_SetConfig+0x1044>
 8003f16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f1a:	e016      	b.n	8003f4a <UART_SetConfig+0x1072>
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e014      	b.n	8003f4a <UART_SetConfig+0x1072>
 8003f20:	2380      	movs	r3, #128	; 0x80
 8003f22:	e012      	b.n	8003f4a <UART_SetConfig+0x1072>
 8003f24:	2340      	movs	r3, #64	; 0x40
 8003f26:	e010      	b.n	8003f4a <UART_SetConfig+0x1072>
 8003f28:	2320      	movs	r3, #32
 8003f2a:	e00e      	b.n	8003f4a <UART_SetConfig+0x1072>
 8003f2c:	2310      	movs	r3, #16
 8003f2e:	e00c      	b.n	8003f4a <UART_SetConfig+0x1072>
 8003f30:	230c      	movs	r3, #12
 8003f32:	e00a      	b.n	8003f4a <UART_SetConfig+0x1072>
 8003f34:	230a      	movs	r3, #10
 8003f36:	e008      	b.n	8003f4a <UART_SetConfig+0x1072>
 8003f38:	2308      	movs	r3, #8
 8003f3a:	e006      	b.n	8003f4a <UART_SetConfig+0x1072>
 8003f3c:	2306      	movs	r3, #6
 8003f3e:	e004      	b.n	8003f4a <UART_SetConfig+0x1072>
 8003f40:	2304      	movs	r3, #4
 8003f42:	e002      	b.n	8003f4a <UART_SetConfig+0x1072>
 8003f44:	2302      	movs	r3, #2
 8003f46:	e000      	b.n	8003f4a <UART_SetConfig+0x1072>
 8003f48:	2301      	movs	r3, #1
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	085b      	lsrs	r3, r3, #1
 8003f56:	441a      	add	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	61fb      	str	r3, [r7, #28]
        break;
 8003f64:	e16d      	b.n	8004242 <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f66:	f7fe fcbf 	bl	80028e8 <HAL_RCC_GetPCLK2Freq>
 8003f6a:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d044      	beq.n	8003ffe <UART_SetConfig+0x1126>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d03e      	beq.n	8003ffa <UART_SetConfig+0x1122>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d038      	beq.n	8003ff6 <UART_SetConfig+0x111e>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f88:	2b03      	cmp	r3, #3
 8003f8a:	d032      	beq.n	8003ff2 <UART_SetConfig+0x111a>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f90:	2b04      	cmp	r3, #4
 8003f92:	d02c      	beq.n	8003fee <UART_SetConfig+0x1116>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f98:	2b05      	cmp	r3, #5
 8003f9a:	d026      	beq.n	8003fea <UART_SetConfig+0x1112>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	2b06      	cmp	r3, #6
 8003fa2:	d020      	beq.n	8003fe6 <UART_SetConfig+0x110e>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	2b07      	cmp	r3, #7
 8003faa:	d01a      	beq.n	8003fe2 <UART_SetConfig+0x110a>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	2b08      	cmp	r3, #8
 8003fb2:	d014      	beq.n	8003fde <UART_SetConfig+0x1106>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb8:	2b09      	cmp	r3, #9
 8003fba:	d00e      	beq.n	8003fda <UART_SetConfig+0x1102>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc0:	2b0a      	cmp	r3, #10
 8003fc2:	d008      	beq.n	8003fd6 <UART_SetConfig+0x10fe>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc8:	2b0b      	cmp	r3, #11
 8003fca:	d102      	bne.n	8003fd2 <UART_SetConfig+0x10fa>
 8003fcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fd0:	e016      	b.n	8004000 <UART_SetConfig+0x1128>
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e014      	b.n	8004000 <UART_SetConfig+0x1128>
 8003fd6:	2380      	movs	r3, #128	; 0x80
 8003fd8:	e012      	b.n	8004000 <UART_SetConfig+0x1128>
 8003fda:	2340      	movs	r3, #64	; 0x40
 8003fdc:	e010      	b.n	8004000 <UART_SetConfig+0x1128>
 8003fde:	2320      	movs	r3, #32
 8003fe0:	e00e      	b.n	8004000 <UART_SetConfig+0x1128>
 8003fe2:	2310      	movs	r3, #16
 8003fe4:	e00c      	b.n	8004000 <UART_SetConfig+0x1128>
 8003fe6:	230c      	movs	r3, #12
 8003fe8:	e00a      	b.n	8004000 <UART_SetConfig+0x1128>
 8003fea:	230a      	movs	r3, #10
 8003fec:	e008      	b.n	8004000 <UART_SetConfig+0x1128>
 8003fee:	2308      	movs	r3, #8
 8003ff0:	e006      	b.n	8004000 <UART_SetConfig+0x1128>
 8003ff2:	2306      	movs	r3, #6
 8003ff4:	e004      	b.n	8004000 <UART_SetConfig+0x1128>
 8003ff6:	2304      	movs	r3, #4
 8003ff8:	e002      	b.n	8004000 <UART_SetConfig+0x1128>
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	e000      	b.n	8004000 <UART_SetConfig+0x1128>
 8003ffe:	2301      	movs	r3, #1
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	fbb2 f2f3 	udiv	r2, r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	085b      	lsrs	r3, r3, #1
 800400c:	441a      	add	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	fbb2 f3f3 	udiv	r3, r2, r3
 8004016:	b29b      	uxth	r3, r3
 8004018:	61fb      	str	r3, [r7, #28]
        break;
 800401a:	e112      	b.n	8004242 <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	2b00      	cmp	r3, #0
 8004022:	d044      	beq.n	80040ae <UART_SetConfig+0x11d6>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	2b01      	cmp	r3, #1
 800402a:	d03e      	beq.n	80040aa <UART_SetConfig+0x11d2>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004030:	2b02      	cmp	r3, #2
 8004032:	d038      	beq.n	80040a6 <UART_SetConfig+0x11ce>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	2b03      	cmp	r3, #3
 800403a:	d032      	beq.n	80040a2 <UART_SetConfig+0x11ca>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004040:	2b04      	cmp	r3, #4
 8004042:	d02c      	beq.n	800409e <UART_SetConfig+0x11c6>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004048:	2b05      	cmp	r3, #5
 800404a:	d026      	beq.n	800409a <UART_SetConfig+0x11c2>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004050:	2b06      	cmp	r3, #6
 8004052:	d020      	beq.n	8004096 <UART_SetConfig+0x11be>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004058:	2b07      	cmp	r3, #7
 800405a:	d01a      	beq.n	8004092 <UART_SetConfig+0x11ba>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004060:	2b08      	cmp	r3, #8
 8004062:	d014      	beq.n	800408e <UART_SetConfig+0x11b6>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004068:	2b09      	cmp	r3, #9
 800406a:	d00e      	beq.n	800408a <UART_SetConfig+0x11b2>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004070:	2b0a      	cmp	r3, #10
 8004072:	d008      	beq.n	8004086 <UART_SetConfig+0x11ae>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004078:	2b0b      	cmp	r3, #11
 800407a:	d102      	bne.n	8004082 <UART_SetConfig+0x11aa>
 800407c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004080:	e016      	b.n	80040b0 <UART_SetConfig+0x11d8>
 8004082:	4b81      	ldr	r3, [pc, #516]	; (8004288 <UART_SetConfig+0x13b0>)
 8004084:	e014      	b.n	80040b0 <UART_SetConfig+0x11d8>
 8004086:	4b81      	ldr	r3, [pc, #516]	; (800428c <UART_SetConfig+0x13b4>)
 8004088:	e012      	b.n	80040b0 <UART_SetConfig+0x11d8>
 800408a:	4b81      	ldr	r3, [pc, #516]	; (8004290 <UART_SetConfig+0x13b8>)
 800408c:	e010      	b.n	80040b0 <UART_SetConfig+0x11d8>
 800408e:	4b81      	ldr	r3, [pc, #516]	; (8004294 <UART_SetConfig+0x13bc>)
 8004090:	e00e      	b.n	80040b0 <UART_SetConfig+0x11d8>
 8004092:	4b81      	ldr	r3, [pc, #516]	; (8004298 <UART_SetConfig+0x13c0>)
 8004094:	e00c      	b.n	80040b0 <UART_SetConfig+0x11d8>
 8004096:	4b81      	ldr	r3, [pc, #516]	; (800429c <UART_SetConfig+0x13c4>)
 8004098:	e00a      	b.n	80040b0 <UART_SetConfig+0x11d8>
 800409a:	4b81      	ldr	r3, [pc, #516]	; (80042a0 <UART_SetConfig+0x13c8>)
 800409c:	e008      	b.n	80040b0 <UART_SetConfig+0x11d8>
 800409e:	4b81      	ldr	r3, [pc, #516]	; (80042a4 <UART_SetConfig+0x13cc>)
 80040a0:	e006      	b.n	80040b0 <UART_SetConfig+0x11d8>
 80040a2:	4b81      	ldr	r3, [pc, #516]	; (80042a8 <UART_SetConfig+0x13d0>)
 80040a4:	e004      	b.n	80040b0 <UART_SetConfig+0x11d8>
 80040a6:	4b81      	ldr	r3, [pc, #516]	; (80042ac <UART_SetConfig+0x13d4>)
 80040a8:	e002      	b.n	80040b0 <UART_SetConfig+0x11d8>
 80040aa:	4b81      	ldr	r3, [pc, #516]	; (80042b0 <UART_SetConfig+0x13d8>)
 80040ac:	e000      	b.n	80040b0 <UART_SetConfig+0x11d8>
 80040ae:	4b76      	ldr	r3, [pc, #472]	; (8004288 <UART_SetConfig+0x13b0>)
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	6852      	ldr	r2, [r2, #4]
 80040b4:	0852      	lsrs	r2, r2, #1
 80040b6:	441a      	add	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	61fb      	str	r3, [r7, #28]
        break;
 80040c4:	e0bd      	b.n	8004242 <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040c6:	f7fe fb8b 	bl	80027e0 <HAL_RCC_GetSysClockFreq>
 80040ca:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d044      	beq.n	800415e <UART_SetConfig+0x1286>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d03e      	beq.n	800415a <UART_SetConfig+0x1282>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d038      	beq.n	8004156 <UART_SetConfig+0x127e>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	2b03      	cmp	r3, #3
 80040ea:	d032      	beq.n	8004152 <UART_SetConfig+0x127a>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f0:	2b04      	cmp	r3, #4
 80040f2:	d02c      	beq.n	800414e <UART_SetConfig+0x1276>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f8:	2b05      	cmp	r3, #5
 80040fa:	d026      	beq.n	800414a <UART_SetConfig+0x1272>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004100:	2b06      	cmp	r3, #6
 8004102:	d020      	beq.n	8004146 <UART_SetConfig+0x126e>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004108:	2b07      	cmp	r3, #7
 800410a:	d01a      	beq.n	8004142 <UART_SetConfig+0x126a>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004110:	2b08      	cmp	r3, #8
 8004112:	d014      	beq.n	800413e <UART_SetConfig+0x1266>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	2b09      	cmp	r3, #9
 800411a:	d00e      	beq.n	800413a <UART_SetConfig+0x1262>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004120:	2b0a      	cmp	r3, #10
 8004122:	d008      	beq.n	8004136 <UART_SetConfig+0x125e>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004128:	2b0b      	cmp	r3, #11
 800412a:	d102      	bne.n	8004132 <UART_SetConfig+0x125a>
 800412c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004130:	e016      	b.n	8004160 <UART_SetConfig+0x1288>
 8004132:	2301      	movs	r3, #1
 8004134:	e014      	b.n	8004160 <UART_SetConfig+0x1288>
 8004136:	2380      	movs	r3, #128	; 0x80
 8004138:	e012      	b.n	8004160 <UART_SetConfig+0x1288>
 800413a:	2340      	movs	r3, #64	; 0x40
 800413c:	e010      	b.n	8004160 <UART_SetConfig+0x1288>
 800413e:	2320      	movs	r3, #32
 8004140:	e00e      	b.n	8004160 <UART_SetConfig+0x1288>
 8004142:	2310      	movs	r3, #16
 8004144:	e00c      	b.n	8004160 <UART_SetConfig+0x1288>
 8004146:	230c      	movs	r3, #12
 8004148:	e00a      	b.n	8004160 <UART_SetConfig+0x1288>
 800414a:	230a      	movs	r3, #10
 800414c:	e008      	b.n	8004160 <UART_SetConfig+0x1288>
 800414e:	2308      	movs	r3, #8
 8004150:	e006      	b.n	8004160 <UART_SetConfig+0x1288>
 8004152:	2306      	movs	r3, #6
 8004154:	e004      	b.n	8004160 <UART_SetConfig+0x1288>
 8004156:	2304      	movs	r3, #4
 8004158:	e002      	b.n	8004160 <UART_SetConfig+0x1288>
 800415a:	2302      	movs	r3, #2
 800415c:	e000      	b.n	8004160 <UART_SetConfig+0x1288>
 800415e:	2301      	movs	r3, #1
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	fbb2 f2f3 	udiv	r2, r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	085b      	lsrs	r3, r3, #1
 800416c:	441a      	add	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	fbb2 f3f3 	udiv	r3, r2, r3
 8004176:	b29b      	uxth	r3, r3
 8004178:	61fb      	str	r3, [r7, #28]
        break;
 800417a:	e062      	b.n	8004242 <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004180:	2b00      	cmp	r3, #0
 8004182:	d04e      	beq.n	8004222 <UART_SetConfig+0x134a>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	2b01      	cmp	r3, #1
 800418a:	d047      	beq.n	800421c <UART_SetConfig+0x1344>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004190:	2b02      	cmp	r3, #2
 8004192:	d040      	beq.n	8004216 <UART_SetConfig+0x133e>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	2b03      	cmp	r3, #3
 800419a:	d039      	beq.n	8004210 <UART_SetConfig+0x1338>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a0:	2b04      	cmp	r3, #4
 80041a2:	d032      	beq.n	800420a <UART_SetConfig+0x1332>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a8:	2b05      	cmp	r3, #5
 80041aa:	d02b      	beq.n	8004204 <UART_SetConfig+0x132c>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b0:	2b06      	cmp	r3, #6
 80041b2:	d024      	beq.n	80041fe <UART_SetConfig+0x1326>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	2b07      	cmp	r3, #7
 80041ba:	d01d      	beq.n	80041f8 <UART_SetConfig+0x1320>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c0:	2b08      	cmp	r3, #8
 80041c2:	d016      	beq.n	80041f2 <UART_SetConfig+0x131a>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c8:	2b09      	cmp	r3, #9
 80041ca:	d00f      	beq.n	80041ec <UART_SetConfig+0x1314>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d0:	2b0a      	cmp	r3, #10
 80041d2:	d008      	beq.n	80041e6 <UART_SetConfig+0x130e>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d8:	2b0b      	cmp	r3, #11
 80041da:	d101      	bne.n	80041e0 <UART_SetConfig+0x1308>
 80041dc:	2380      	movs	r3, #128	; 0x80
 80041de:	e022      	b.n	8004226 <UART_SetConfig+0x134e>
 80041e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041e4:	e01f      	b.n	8004226 <UART_SetConfig+0x134e>
 80041e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041ea:	e01c      	b.n	8004226 <UART_SetConfig+0x134e>
 80041ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041f0:	e019      	b.n	8004226 <UART_SetConfig+0x134e>
 80041f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80041f6:	e016      	b.n	8004226 <UART_SetConfig+0x134e>
 80041f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80041fc:	e013      	b.n	8004226 <UART_SetConfig+0x134e>
 80041fe:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8004202:	e010      	b.n	8004226 <UART_SetConfig+0x134e>
 8004204:	f640 43cc 	movw	r3, #3276	; 0xccc
 8004208:	e00d      	b.n	8004226 <UART_SetConfig+0x134e>
 800420a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800420e:	e00a      	b.n	8004226 <UART_SetConfig+0x134e>
 8004210:	f241 5355 	movw	r3, #5461	; 0x1555
 8004214:	e007      	b.n	8004226 <UART_SetConfig+0x134e>
 8004216:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800421a:	e004      	b.n	8004226 <UART_SetConfig+0x134e>
 800421c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004220:	e001      	b.n	8004226 <UART_SetConfig+0x134e>
 8004222:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	6852      	ldr	r2, [r2, #4]
 800422a:	0852      	lsrs	r2, r2, #1
 800422c:	441a      	add	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	fbb2 f3f3 	udiv	r3, r2, r3
 8004236:	b29b      	uxth	r3, r3
 8004238:	61fb      	str	r3, [r7, #28]
        break;
 800423a:	e002      	b.n	8004242 <UART_SetConfig+0x136a>
      default:
        ret = HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	76fb      	strb	r3, [r7, #27]
        break;
 8004240:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	2b0f      	cmp	r3, #15
 8004246:	d908      	bls.n	800425a <UART_SetConfig+0x1382>
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800424e:	d204      	bcs.n	800425a <UART_SetConfig+0x1382>
    {
      huart->Instance->BRR = usartdiv;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	69fa      	ldr	r2, [r7, #28]
 8004256:	60da      	str	r2, [r3, #12]
 8004258:	e001      	b.n	800425e <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2201      	movs	r2, #1
 8004262:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2201      	movs	r2, #1
 800426a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800427a:	7efb      	ldrb	r3, [r7, #27]
}
 800427c:	4618      	mov	r0, r3
 800427e:	3728      	adds	r7, #40	; 0x28
 8004280:	46bd      	mov	sp, r7
 8004282:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004286:	bf00      	nop
 8004288:	00f42400 	.word	0x00f42400
 800428c:	0001e848 	.word	0x0001e848
 8004290:	0003d090 	.word	0x0003d090
 8004294:	0007a120 	.word	0x0007a120
 8004298:	000f4240 	.word	0x000f4240
 800429c:	00145855 	.word	0x00145855
 80042a0:	00186a00 	.word	0x00186a00
 80042a4:	001e8480 	.word	0x001e8480
 80042a8:	0028b0aa 	.word	0x0028b0aa
 80042ac:	003d0900 	.word	0x003d0900
 80042b0:	007a1200 	.word	0x007a1200

080042b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00a      	beq.n	80042de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	430a      	orrs	r2, r1
 80042dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00a      	beq.n	8004300 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00a      	beq.n	8004322 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	430a      	orrs	r2, r1
 8004320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004326:	f003 0308 	and.w	r3, r3, #8
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00a      	beq.n	8004344 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	430a      	orrs	r2, r1
 8004342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004348:	f003 0310 	and.w	r3, r3, #16
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00a      	beq.n	8004366 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	430a      	orrs	r2, r1
 8004364:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436a:	f003 0320 	and.w	r3, r3, #32
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00a      	beq.n	8004388 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	430a      	orrs	r2, r1
 8004386:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004390:	2b00      	cmp	r3, #0
 8004392:	d01a      	beq.n	80043ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043b2:	d10a      	bne.n	80043ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00a      	beq.n	80043ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	430a      	orrs	r2, r1
 80043ea:	605a      	str	r2, [r3, #4]
  }
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b086      	sub	sp, #24
 80043fc:	af02      	add	r7, sp, #8
 80043fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004408:	f7fc fba6 	bl	8000b58 <HAL_GetTick>
 800440c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0308 	and.w	r3, r3, #8
 8004418:	2b08      	cmp	r3, #8
 800441a:	d10e      	bne.n	800443a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800441c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004420:	9300      	str	r3, [sp, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f82c 	bl	8004488 <UART_WaitOnFlagUntilTimeout>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e022      	b.n	8004480 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0304 	and.w	r3, r3, #4
 8004444:	2b04      	cmp	r3, #4
 8004446:	d10e      	bne.n	8004466 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004448:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800444c:	9300      	str	r3, [sp, #0]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f816 	bl	8004488 <UART_WaitOnFlagUntilTimeout>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e00c      	b.n	8004480 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2220      	movs	r2, #32
 800446a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2220      	movs	r2, #32
 8004472:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	603b      	str	r3, [r7, #0]
 8004494:	4613      	mov	r3, r2
 8004496:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004498:	e02c      	b.n	80044f4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044a0:	d028      	beq.n	80044f4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044a2:	f7fc fb59 	bl	8000b58 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d302      	bcc.n	80044b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d11d      	bne.n	80044f4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80044c6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	689a      	ldr	r2, [r3, #8]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 0201 	bic.w	r2, r2, #1
 80044d6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2220      	movs	r2, #32
 80044dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2220      	movs	r2, #32
 80044e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e00f      	b.n	8004514 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	69da      	ldr	r2, [r3, #28]
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	4013      	ands	r3, r2
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	429a      	cmp	r2, r3
 8004502:	bf0c      	ite	eq
 8004504:	2301      	moveq	r3, #1
 8004506:	2300      	movne	r3, #0
 8004508:	b2db      	uxtb	r3, r3
 800450a:	461a      	mov	r2, r3
 800450c:	79fb      	ldrb	r3, [r7, #7]
 800450e:	429a      	cmp	r2, r3
 8004510:	d0c3      	beq.n	800449a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800452a:	2b01      	cmp	r3, #1
 800452c:	d101      	bne.n	8004532 <HAL_UARTEx_DisableFifoMode+0x16>
 800452e:	2302      	movs	r3, #2
 8004530:	e027      	b.n	8004582 <HAL_UARTEx_DisableFifoMode+0x66>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2224      	movs	r2, #36	; 0x24
 800453e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f022 0201 	bic.w	r2, r2, #1
 8004558:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004560:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2220      	movs	r2, #32
 8004574:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3714      	adds	r7, #20
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr

0800458e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b084      	sub	sp, #16
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
 8004596:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d101      	bne.n	80045a6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80045a2:	2302      	movs	r3, #2
 80045a4:	e02d      	b.n	8004602 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2224      	movs	r2, #36	; 0x24
 80045b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f022 0201 	bic.w	r2, r2, #1
 80045cc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	430a      	orrs	r2, r1
 80045e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f850 	bl	8004688 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2220      	movs	r2, #32
 80045f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800460a:	b580      	push	{r7, lr}
 800460c:	b084      	sub	sp, #16
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
 8004612:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800461a:	2b01      	cmp	r3, #1
 800461c:	d101      	bne.n	8004622 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800461e:	2302      	movs	r3, #2
 8004620:	e02d      	b.n	800467e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2224      	movs	r2, #36	; 0x24
 800462e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 0201 	bic.w	r2, r2, #1
 8004648:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	430a      	orrs	r2, r1
 800465c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f812 	bl	8004688 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2220      	movs	r2, #32
 8004670:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
	...

08004688 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004688:	b480      	push	{r7}
 800468a:	b089      	sub	sp, #36	; 0x24
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004690:	4a2f      	ldr	r2, [pc, #188]	; (8004750 <UARTEx_SetNbDataToProcess+0xc8>)
 8004692:	f107 0314 	add.w	r3, r7, #20
 8004696:	e892 0003 	ldmia.w	r2, {r0, r1}
 800469a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800469e:	4a2d      	ldr	r2, [pc, #180]	; (8004754 <UARTEx_SetNbDataToProcess+0xcc>)
 80046a0:	f107 030c 	add.w	r3, r7, #12
 80046a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80046a8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d108      	bne.n	80046c6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80046c4:	e03d      	b.n	8004742 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80046c6:	2308      	movs	r3, #8
 80046c8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80046ca:	2308      	movs	r3, #8
 80046cc:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	0e5b      	lsrs	r3, r3, #25
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	f003 0307 	and.w	r3, r3, #7
 80046dc:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	0f5b      	lsrs	r3, r3, #29
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	f003 0307 	and.w	r3, r3, #7
 80046ec:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80046ee:	7fbb      	ldrb	r3, [r7, #30]
 80046f0:	7f3a      	ldrb	r2, [r7, #28]
 80046f2:	f107 0120 	add.w	r1, r7, #32
 80046f6:	440a      	add	r2, r1
 80046f8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80046fc:	fb02 f303 	mul.w	r3, r2, r3
 8004700:	7f3a      	ldrb	r2, [r7, #28]
 8004702:	f107 0120 	add.w	r1, r7, #32
 8004706:	440a      	add	r2, r1
 8004708:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800470c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004710:	b29a      	uxth	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004718:	7ffb      	ldrb	r3, [r7, #31]
 800471a:	7f7a      	ldrb	r2, [r7, #29]
 800471c:	f107 0120 	add.w	r1, r7, #32
 8004720:	440a      	add	r2, r1
 8004722:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004726:	fb02 f303 	mul.w	r3, r2, r3
 800472a:	7f7a      	ldrb	r2, [r7, #29]
 800472c:	f107 0120 	add.w	r1, r7, #32
 8004730:	440a      	add	r2, r1
 8004732:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004736:	fb93 f3f2 	sdiv	r3, r3, r2
 800473a:	b29a      	uxth	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004742:	bf00      	nop
 8004744:	3724      	adds	r7, #36	; 0x24
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	080047c8 	.word	0x080047c8
 8004754:	080047d0 	.word	0x080047d0

08004758 <__libc_init_array>:
 8004758:	b570      	push	{r4, r5, r6, lr}
 800475a:	4e0d      	ldr	r6, [pc, #52]	; (8004790 <__libc_init_array+0x38>)
 800475c:	4c0d      	ldr	r4, [pc, #52]	; (8004794 <__libc_init_array+0x3c>)
 800475e:	1ba4      	subs	r4, r4, r6
 8004760:	10a4      	asrs	r4, r4, #2
 8004762:	2500      	movs	r5, #0
 8004764:	42a5      	cmp	r5, r4
 8004766:	d109      	bne.n	800477c <__libc_init_array+0x24>
 8004768:	4e0b      	ldr	r6, [pc, #44]	; (8004798 <__libc_init_array+0x40>)
 800476a:	4c0c      	ldr	r4, [pc, #48]	; (800479c <__libc_init_array+0x44>)
 800476c:	f000 f820 	bl	80047b0 <_init>
 8004770:	1ba4      	subs	r4, r4, r6
 8004772:	10a4      	asrs	r4, r4, #2
 8004774:	2500      	movs	r5, #0
 8004776:	42a5      	cmp	r5, r4
 8004778:	d105      	bne.n	8004786 <__libc_init_array+0x2e>
 800477a:	bd70      	pop	{r4, r5, r6, pc}
 800477c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004780:	4798      	blx	r3
 8004782:	3501      	adds	r5, #1
 8004784:	e7ee      	b.n	8004764 <__libc_init_array+0xc>
 8004786:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800478a:	4798      	blx	r3
 800478c:	3501      	adds	r5, #1
 800478e:	e7f2      	b.n	8004776 <__libc_init_array+0x1e>
 8004790:	080047f8 	.word	0x080047f8
 8004794:	080047f8 	.word	0x080047f8
 8004798:	080047f8 	.word	0x080047f8
 800479c:	080047fc 	.word	0x080047fc

080047a0 <memset>:
 80047a0:	4402      	add	r2, r0
 80047a2:	4603      	mov	r3, r0
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d100      	bne.n	80047aa <memset+0xa>
 80047a8:	4770      	bx	lr
 80047aa:	f803 1b01 	strb.w	r1, [r3], #1
 80047ae:	e7f9      	b.n	80047a4 <memset+0x4>

080047b0 <_init>:
 80047b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047b2:	bf00      	nop
 80047b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047b6:	bc08      	pop	{r3}
 80047b8:	469e      	mov	lr, r3
 80047ba:	4770      	bx	lr

080047bc <_fini>:
 80047bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047be:	bf00      	nop
 80047c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047c2:	bc08      	pop	{r3}
 80047c4:	469e      	mov	lr, r3
 80047c6:	4770      	bx	lr
