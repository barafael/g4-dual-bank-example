
g474-bankswap.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a70  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002c48  08002c48  00012c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c58  08002c58  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c58  08002c58  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c58  08002c58  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c58  08002c58  00012c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c5c  08002c5c  00012c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08002c60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  2000002c  08002c8c  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000054  08002c8c  00020054  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007146  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001628  00000000  00000000  000271a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000708  00000000  00000000  000287d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000668  00000000  00000000  00028ed8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023007  00000000  00000000  00029540  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005c38  00000000  00000000  0004c547  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dcf91  00000000  00000000  0005217f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012f110  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a90  00000000  00000000  0012f18c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000002c 	.word	0x2000002c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002c30 	.word	0x08002c30

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000030 	.word	0x20000030
 8000214:	08002c30 	.word	0x08002c30

08000218 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t pin) {
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	80fb      	strh	r3, [r7, #6]
    if (pin == GPIO_PIN_13) {
 8000222:	88fb      	ldrh	r3, [r7, #6]
 8000224:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000228:	d102      	bne.n	8000230 <HAL_GPIO_EXTI_Callback+0x18>
        updateState = PREPARATION;
 800022a:	4b04      	ldr	r3, [pc, #16]	; (800023c <HAL_GPIO_EXTI_Callback+0x24>)
 800022c:	2201      	movs	r2, #1
 800022e:	701a      	strb	r2, [r3, #0]
    }

}
 8000230:	bf00      	nop
 8000232:	370c      	adds	r7, #12
 8000234:	46bd      	mov	sp, r7
 8000236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023a:	4770      	bx	lr
 800023c:	20000048 	.word	0x20000048

08000240 <HAL_FLASH_EndOfOperationCallback>:

void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue) {
 8000240:	b480      	push	{r7}
 8000242:	b083      	sub	sp, #12
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
    if (FLASH_ERASING && ReturnValue == 0xffffffff) {
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800024e:	d103      	bne.n	8000258 <HAL_FLASH_EndOfOperationCallback+0x18>
        updateState = FLASH_ERASE_DONE;
 8000250:	4b08      	ldr	r3, [pc, #32]	; (8000274 <HAL_FLASH_EndOfOperationCallback+0x34>)
 8000252:	2203      	movs	r2, #3
 8000254:	701a      	strb	r2, [r3, #0]
    } else if (updateState == FLASH_WRITE_IN_PROGRESS) {
        updateState = FLASH_WRITE_DONE;
    }
}
 8000256:	e007      	b.n	8000268 <HAL_FLASH_EndOfOperationCallback+0x28>
    } else if (updateState == FLASH_WRITE_IN_PROGRESS) {
 8000258:	4b06      	ldr	r3, [pc, #24]	; (8000274 <HAL_FLASH_EndOfOperationCallback+0x34>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	b2db      	uxtb	r3, r3
 800025e:	2b04      	cmp	r3, #4
 8000260:	d102      	bne.n	8000268 <HAL_FLASH_EndOfOperationCallback+0x28>
        updateState = FLASH_WRITE_DONE;
 8000262:	4b04      	ldr	r3, [pc, #16]	; (8000274 <HAL_FLASH_EndOfOperationCallback+0x34>)
 8000264:	2205      	movs	r2, #5
 8000266:	701a      	strb	r2, [r3, #0]
}
 8000268:	bf00      	nop
 800026a:	370c      	adds	r7, #12
 800026c:	46bd      	mov	sp, r7
 800026e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000272:	4770      	bx	lr
 8000274:	20000048 	.word	0x20000048

08000278 <toggleBankAndReset>:

void toggleBankAndReset() {
 8000278:	b580      	push	{r7, lr}
 800027a:	b08e      	sub	sp, #56	; 0x38
 800027c:	af00      	add	r7, sp, #0
    FLASH_OBProgramInitTypeDef OBInit;
    HAL_FLASH_Unlock();
 800027e:	f000 fd6d 	bl	8000d5c <HAL_FLASH_Unlock>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000282:	4b20      	ldr	r3, [pc, #128]	; (8000304 <toggleBankAndReset+0x8c>)
 8000284:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000288:	611a      	str	r2, [r3, #16]
    HAL_FLASH_OB_Unlock();
 800028a:	f000 fda3 	bl	8000dd4 <HAL_FLASH_OB_Unlock>
    HAL_FLASHEx_OBGetConfig(&OBInit);
 800028e:	1d3b      	adds	r3, r7, #4
 8000290:	4618      	mov	r0, r3
 8000292:	f000 ffa7 	bl	80011e4 <HAL_FLASHEx_OBGetConfig>

    OBInit.OptionType = OPTIONBYTE_USER;
 8000296:	2304      	movs	r3, #4
 8000298:	607b      	str	r3, [r7, #4]
    OBInit.USERType = OB_USER_BFB2;
 800029a:	2380      	movs	r3, #128	; 0x80
 800029c:	61bb      	str	r3, [r7, #24]

    if (((OBInit.USERConfig) & (OB_BFB2_ENABLE)) == OB_BFB2_ENABLE) {
 800029e:	69fb      	ldr	r3, [r7, #28]
 80002a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d002      	beq.n	80002ae <toggleBankAndReset+0x36>
        OBInit.USERConfig = OB_BFB2_DISABLE;
 80002a8:	2300      	movs	r3, #0
 80002aa:	61fb      	str	r3, [r7, #28]
 80002ac:	e002      	b.n	80002b4 <toggleBankAndReset+0x3c>
    } else {
        OBInit.USERConfig = OB_BFB2_ENABLE;
 80002ae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80002b2:	61fb      	str	r3, [r7, #28]
    }
    if (HAL_FLASHEx_OBProgram(&OBInit) != HAL_OK) {
 80002b4:	1d3b      	adds	r3, r7, #4
 80002b6:	4618      	mov	r0, r3
 80002b8:	f000 ff04 	bl	80010c4 <HAL_FLASHEx_OBProgram>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d009      	beq.n	80002d6 <toggleBankAndReset+0x5e>
        // uint32_t errorCode = HAL_FLASH_GetError();
        while (1) {
            HAL_Delay(1000);
 80002c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002c6:	f000 fae9 	bl	800089c <HAL_Delay>
            HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80002ca:	2120      	movs	r1, #32
 80002cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002d0:	f001 feb0 	bl	8002034 <HAL_GPIO_TogglePin>
            HAL_Delay(1000);
 80002d4:	e7f5      	b.n	80002c2 <toggleBankAndReset+0x4a>
        }
    }
    if (HAL_FLASH_OB_Launch() != HAL_OK) {
 80002d6:	f000 fdbf 	bl	8000e58 <HAL_FLASH_OB_Launch>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d008      	beq.n	80002f2 <toggleBankAndReset+0x7a>
        //uint32_t errorCode = HAL_FLASH_GetError();
        while (1) {
            HAL_Delay(100);
 80002e0:	2064      	movs	r0, #100	; 0x64
 80002e2:	f000 fadb 	bl	800089c <HAL_Delay>
            HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80002e6:	2120      	movs	r1, #32
 80002e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ec:	f001 fea2 	bl	8002034 <HAL_GPIO_TogglePin>
            HAL_Delay(100);
 80002f0:	e7f6      	b.n	80002e0 <toggleBankAndReset+0x68>
        }
    }
    HAL_FLASH_OB_Lock();
 80002f2:	f000 fd95 	bl	8000e20 <HAL_FLASH_OB_Lock>
    HAL_FLASH_Lock();
 80002f6:	f000 fd53 	bl	8000da0 <HAL_FLASH_Lock>
}
 80002fa:	bf00      	nop
 80002fc:	3738      	adds	r7, #56	; 0x38
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	40022000 	.word	0x40022000

08000308 <getActiveBank>:

uint8_t getActiveBank() {
 8000308:	b580      	push	{r7, lr}
 800030a:	b08e      	sub	sp, #56	; 0x38
 800030c:	af00      	add	r7, sp, #0
    FLASH_OBProgramInitTypeDef OBInit;

    HAL_FLASHEx_OBGetConfig(&OBInit);
 800030e:	463b      	mov	r3, r7
 8000310:	4618      	mov	r0, r3
 8000312:	f000 ff67 	bl	80011e4 <HAL_FLASHEx_OBGetConfig>

    OBInit.OptionType = OPTIONBYTE_USER;
 8000316:	2304      	movs	r3, #4
 8000318:	603b      	str	r3, [r7, #0]
    OBInit.USERType = OB_USER_BFB2;
 800031a:	2380      	movs	r3, #128	; 0x80
 800031c:	617b      	str	r3, [r7, #20]

    uint8_t result;
    if (((OBInit.USERConfig) & (OB_BFB2_ENABLE)) == OB_BFB2_ENABLE) {
 800031e:	69bb      	ldr	r3, [r7, #24]
 8000320:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000324:	2b00      	cmp	r3, #0
 8000326:	d003      	beq.n	8000330 <getActiveBank+0x28>
        result = 2;
 8000328:	2302      	movs	r3, #2
 800032a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800032e:	e002      	b.n	8000336 <getActiveBank+0x2e>
    } else {
        result = 1;
 8000330:	2301      	movs	r3, #1
 8000332:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }
    return result;
 8000336:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800033a:	4618      	mov	r0, r3
 800033c:	3738      	adds	r7, #56	; 0x38
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
	...

08000344 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000344:	b590      	push	{r4, r7, lr}
 8000346:	b08f      	sub	sp, #60	; 0x3c
 8000348:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800034a:	f000 fa36 	bl	80007ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800034e:	f000 f895 	bl	800047c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000352:	f000 f8df 	bl	8000514 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
    uint8_t bank = getActiveBank();
 8000356:	f7ff ffd7 	bl	8000308 <getActiveBank>
 800035a:	4603      	mov	r3, r0
 800035c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    uint32_t last = HAL_GetTick();
 8000360:	f000 fa90 	bl	8000884 <HAL_GetTick>
 8000364:	6378      	str	r0, [r7, #52]	; 0x34
    uint32_t delay;
    if (bank == 1) {
 8000366:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800036a:	2b01      	cmp	r3, #1
 800036c:	d103      	bne.n	8000376 <main+0x32>
        delay = 1000;
 800036e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000372:	633b      	str	r3, [r7, #48]	; 0x30
 8000374:	e002      	b.n	800037c <main+0x38>
    } else {
        delay = 500;
 8000376:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800037a:	633b      	str	r3, [r7, #48]	; 0x30
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1) {
        uint32_t now = HAL_GetTick();
 800037c:	f000 fa82 	bl	8000884 <HAL_GetTick>
 8000380:	62b8      	str	r0, [r7, #40]	; 0x28
        if (now - last > delay) {
 8000382:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000386:	1ad3      	subs	r3, r2, r3
 8000388:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800038a:	429a      	cmp	r2, r3
 800038c:	d206      	bcs.n	800039c <main+0x58>
            HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800038e:	2120      	movs	r1, #32
 8000390:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000394:	f001 fe4e 	bl	8002034 <HAL_GPIO_TogglePin>
            last = now;
 8000398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800039a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        switch (updateState) {
 800039c:	4b34      	ldr	r3, [pc, #208]	; (8000470 <main+0x12c>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	b2db      	uxtb	r3, r3
 80003a2:	2b06      	cmp	r3, #6
 80003a4:	d8ea      	bhi.n	800037c <main+0x38>
 80003a6:	a201      	add	r2, pc, #4	; (adr r2, 80003ac <main+0x68>)
 80003a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ac:	0800037d 	.word	0x0800037d
 80003b0:	080003c9 	.word	0x080003c9
 80003b4:	08000409 	.word	0x08000409
 80003b8:	0800040f 	.word	0x0800040f
 80003bc:	08000409 	.word	0x08000409
 80003c0:	0800040f 	.word	0x0800040f
 80003c4:	08000467 	.word	0x08000467
        case NONE:
            break;
        case PREPARATION: {
            FLASH_EraseInitTypeDef erase = { 0 };
 80003c8:	1d3b      	adds	r3, r7, #4
 80003ca:	2200      	movs	r2, #0
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	605a      	str	r2, [r3, #4]
 80003d0:	609a      	str	r2, [r3, #8]
 80003d2:	60da      	str	r2, [r3, #12]
            erase.TypeErase = FLASH_TYPEERASE_PAGES;
 80003d4:	2300      	movs	r3, #0
 80003d6:	607b      	str	r3, [r7, #4]
            erase.Banks = bank == 1 ? FLASH_BANK_2 : FLASH_BANK_1;
 80003d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80003dc:	2b01      	cmp	r3, #1
 80003de:	d101      	bne.n	80003e4 <main+0xa0>
 80003e0:	2302      	movs	r3, #2
 80003e2:	e000      	b.n	80003e6 <main+0xa2>
 80003e4:	2301      	movs	r3, #1
 80003e6:	60bb      	str	r3, [r7, #8]
            erase.NbPages = NUM_PAGES;
 80003e8:	2364      	movs	r3, #100	; 0x64
 80003ea:	613b      	str	r3, [r7, #16]
            erase.Page = 0;
 80003ec:	2300      	movs	r3, #0
 80003ee:	60fb      	str	r3, [r7, #12]

            HAL_FLASH_Unlock();
 80003f0:	f000 fcb4 	bl	8000d5c <HAL_FLASH_Unlock>
            HAL_StatusTypeDef status = HAL_FLASHEx_Erase_IT(&erase);
 80003f4:	1d3b      	adds	r3, r7, #4
 80003f6:	4618      	mov	r0, r3
 80003f8:	f000 fdec 	bl	8000fd4 <HAL_FLASHEx_Erase_IT>
 80003fc:	4603      	mov	r3, r0
 80003fe:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
                // TODO error case
            }

            updateState = FLASH_ERASING;
 8000400:	4b1b      	ldr	r3, [pc, #108]	; (8000470 <main+0x12c>)
 8000402:	2202      	movs	r2, #2
 8000404:	701a      	strb	r2, [r3, #0]
        }
            break;
 8000406:	e031      	b.n	800046c <main+0x128>

        case FLASH_ERASING:
        case FLASH_WRITE_IN_PROGRESS:
            delay = 200;
 8000408:	23c8      	movs	r3, #200	; 0xc8
 800040a:	633b      	str	r3, [r7, #48]	; 0x30
            break;
 800040c:	e02e      	b.n	800046c <main+0x128>

        case FLASH_ERASE_DONE:
        case FLASH_WRITE_DONE: {
            delay = 50;
 800040e:	2332      	movs	r3, #50	; 0x32
 8000410:	633b      	str	r3, [r7, #48]	; 0x30
            static size_t index = 0;

            uint32_t dest = 0x08040000;
 8000412:	4b18      	ldr	r3, [pc, #96]	; (8000474 <main+0x130>)
 8000414:	627b      	str	r3, [r7, #36]	; 0x24
            uint8_t *src = (uint8_t*) 0x08000000;
 8000416:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800041a:	623b      	str	r3, [r7, #32]

            if (index < NUM_DOUBLEWORDS) {
 800041c:	4b16      	ldr	r3, [pc, #88]	; (8000478 <main+0x134>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	f5b3 4fc8 	cmp.w	r3, #25600	; 0x6400
 8000424:	d21b      	bcs.n	800045e <main+0x11a>
                uint64_t doubleword = *(uint64_t*) (src + (index * 8));
 8000426:	4b14      	ldr	r3, [pc, #80]	; (8000478 <main+0x134>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	00db      	lsls	r3, r3, #3
 800042c:	6a3a      	ldr	r2, [r7, #32]
 800042e:	4413      	add	r3, r2
 8000430:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000434:	e9c7 3406 	strd	r3, r4, [r7, #24]

                updateState = FLASH_WRITE_IN_PROGRESS;
 8000438:	4b0d      	ldr	r3, [pc, #52]	; (8000470 <main+0x12c>)
 800043a:	2204      	movs	r2, #4
 800043c:	701a      	strb	r2, [r3, #0]
                HAL_FLASH_Program_IT(FLASH_TYPEPROGRAM_DOUBLEWORD, dest + index * 8, doubleword); index++;
 800043e:	4b0e      	ldr	r3, [pc, #56]	; (8000478 <main+0x134>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	00da      	lsls	r2, r3, #3
 8000444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000446:	18d1      	adds	r1, r2, r3
 8000448:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800044c:	2000      	movs	r0, #0
 800044e:	f000 fb57 	bl	8000b00 <HAL_FLASH_Program_IT>
 8000452:	4b09      	ldr	r3, [pc, #36]	; (8000478 <main+0x134>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	3301      	adds	r3, #1
 8000458:	4a07      	ldr	r2, [pc, #28]	; (8000478 <main+0x134>)
 800045a:	6013      	str	r3, [r2, #0]
            } else {
                updateState = UPDATE_DONE;
            }
        }
            break;
 800045c:	e006      	b.n	800046c <main+0x128>
                updateState = UPDATE_DONE;
 800045e:	4b04      	ldr	r3, [pc, #16]	; (8000470 <main+0x12c>)
 8000460:	2206      	movs	r2, #6
 8000462:	701a      	strb	r2, [r3, #0]
            break;
 8000464:	e002      	b.n	800046c <main+0x128>
        case UPDATE_DONE:
            toggleBankAndReset();
 8000466:	f7ff ff07 	bl	8000278 <toggleBankAndReset>
            break;
 800046a:	bf00      	nop
    while (1) {
 800046c:	e786      	b.n	800037c <main+0x38>
 800046e:	bf00      	nop
 8000470:	20000048 	.word	0x20000048
 8000474:	08040000 	.word	0x08040000
 8000478:	2000004c 	.word	0x2000004c

0800047c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b094      	sub	sp, #80	; 0x50
 8000480:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000482:	f107 0318 	add.w	r3, r7, #24
 8000486:	2238      	movs	r2, #56	; 0x38
 8000488:	2100      	movs	r1, #0
 800048a:	4618      	mov	r0, r3
 800048c:	f002 fbc8 	bl	8002c20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000490:	1d3b      	adds	r3, r7, #4
 8000492:	2200      	movs	r2, #0
 8000494:	601a      	str	r2, [r3, #0]
 8000496:	605a      	str	r2, [r3, #4]
 8000498:	609a      	str	r2, [r3, #8]
 800049a:	60da      	str	r2, [r3, #12]
 800049c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800049e:	2000      	movs	r0, #0
 80004a0:	f001 fdfa 	bl	8002098 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004a4:	2302      	movs	r3, #2
 80004a6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004ae:	2340      	movs	r3, #64	; 0x40
 80004b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004b2:	2302      	movs	r3, #2
 80004b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004b6:	2302      	movs	r3, #2
 80004b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80004ba:	2304      	movs	r3, #4
 80004bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80004be:	2355      	movs	r3, #85	; 0x55
 80004c0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004c2:	2302      	movs	r3, #2
 80004c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80004c6:	2302      	movs	r3, #2
 80004c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004ca:	2302      	movs	r3, #2
 80004cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ce:	f107 0318 	add.w	r3, r7, #24
 80004d2:	4618      	mov	r0, r3
 80004d4:	f001 fe84 	bl	80021e0 <HAL_RCC_OscConfig>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80004de:	f000 f899 	bl	8000614 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004e2:	230f      	movs	r3, #15
 80004e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004e6:	2303      	movs	r3, #3
 80004e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ea:	2300      	movs	r3, #0
 80004ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004ee:	2300      	movs	r3, #0
 80004f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004f2:	2300      	movs	r3, #0
 80004f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	2108      	movs	r1, #8
 80004fa:	4618      	mov	r0, r3
 80004fc:	f002 f988 	bl	8002810 <HAL_RCC_ClockConfig>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000506:	f000 f885 	bl	8000614 <Error_Handler>
  }
}
 800050a:	bf00      	nop
 800050c:	3750      	adds	r7, #80	; 0x50
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
	...

08000514 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b08a      	sub	sp, #40	; 0x28
 8000518:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051a:	f107 0314 	add.w	r3, r7, #20
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
 8000526:	60da      	str	r2, [r3, #12]
 8000528:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800052a:	4b37      	ldr	r3, [pc, #220]	; (8000608 <MX_GPIO_Init+0xf4>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	4a36      	ldr	r2, [pc, #216]	; (8000608 <MX_GPIO_Init+0xf4>)
 8000530:	f043 0304 	orr.w	r3, r3, #4
 8000534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000536:	4b34      	ldr	r3, [pc, #208]	; (8000608 <MX_GPIO_Init+0xf4>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053a:	f003 0304 	and.w	r3, r3, #4
 800053e:	613b      	str	r3, [r7, #16]
 8000540:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000542:	4b31      	ldr	r3, [pc, #196]	; (8000608 <MX_GPIO_Init+0xf4>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000546:	4a30      	ldr	r2, [pc, #192]	; (8000608 <MX_GPIO_Init+0xf4>)
 8000548:	f043 0320 	orr.w	r3, r3, #32
 800054c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800054e:	4b2e      	ldr	r3, [pc, #184]	; (8000608 <MX_GPIO_Init+0xf4>)
 8000550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000552:	f003 0320 	and.w	r3, r3, #32
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800055a:	4b2b      	ldr	r3, [pc, #172]	; (8000608 <MX_GPIO_Init+0xf4>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055e:	4a2a      	ldr	r2, [pc, #168]	; (8000608 <MX_GPIO_Init+0xf4>)
 8000560:	f043 0301 	orr.w	r3, r3, #1
 8000564:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000566:	4b28      	ldr	r3, [pc, #160]	; (8000608 <MX_GPIO_Init+0xf4>)
 8000568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000572:	4b25      	ldr	r3, [pc, #148]	; (8000608 <MX_GPIO_Init+0xf4>)
 8000574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000576:	4a24      	ldr	r2, [pc, #144]	; (8000608 <MX_GPIO_Init+0xf4>)
 8000578:	f043 0302 	orr.w	r3, r3, #2
 800057c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800057e:	4b22      	ldr	r3, [pc, #136]	; (8000608 <MX_GPIO_Init+0xf4>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000582:	f003 0302 	and.w	r3, r3, #2
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	2120      	movs	r1, #32
 800058e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000592:	f001 fd37 	bl	8002004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000596:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800059a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800059c:	4b1b      	ldr	r3, [pc, #108]	; (800060c <MX_GPIO_Init+0xf8>)
 800059e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005a4:	f107 0314 	add.w	r3, r7, #20
 80005a8:	4619      	mov	r1, r3
 80005aa:	4819      	ldr	r0, [pc, #100]	; (8000610 <MX_GPIO_Init+0xfc>)
 80005ac:	f001 fba8 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80005b0:	230c      	movs	r3, #12
 80005b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b4:	2302      	movs	r3, #2
 80005b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005bc:	2300      	movs	r3, #0
 80005be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80005c0:	230c      	movs	r3, #12
 80005c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c4:	f107 0314 	add.w	r3, r7, #20
 80005c8:	4619      	mov	r1, r3
 80005ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ce:	f001 fb97 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005d2:	2320      	movs	r3, #32
 80005d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d6:	2301      	movs	r3, #1
 80005d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005da:	2300      	movs	r3, #0
 80005dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005de:	2300      	movs	r3, #0
 80005e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	4619      	mov	r1, r3
 80005e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ec:	f001 fb88 	bl	8001d00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2100      	movs	r1, #0
 80005f4:	2028      	movs	r0, #40	; 0x28
 80005f6:	f000 fa4e 	bl	8000a96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005fa:	2028      	movs	r0, #40	; 0x28
 80005fc:	f000 fa65 	bl	8000aca <HAL_NVIC_EnableIRQ>

}
 8000600:	bf00      	nop
 8000602:	3728      	adds	r7, #40	; 0x28
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40021000 	.word	0x40021000
 800060c:	10110000 	.word	0x10110000
 8000610:	48000800 	.word	0x48000800

08000614 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
	...

08000624 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000628:	4b05      	ldr	r3, [pc, #20]	; (8000640 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800062a:	689b      	ldr	r3, [r3, #8]
 800062c:	4a04      	ldr	r2, [pc, #16]	; (8000640 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800062e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000632:	6093      	str	r3, [r2, #8]
}
 8000634:	bf00      	nop
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	40007000 	.word	0x40007000

08000644 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800064a:	4b13      	ldr	r3, [pc, #76]	; (8000698 <HAL_MspInit+0x54>)
 800064c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800064e:	4a12      	ldr	r2, [pc, #72]	; (8000698 <HAL_MspInit+0x54>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6613      	str	r3, [r2, #96]	; 0x60
 8000656:	4b10      	ldr	r3, [pc, #64]	; (8000698 <HAL_MspInit+0x54>)
 8000658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000662:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <HAL_MspInit+0x54>)
 8000664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000666:	4a0c      	ldr	r2, [pc, #48]	; (8000698 <HAL_MspInit+0x54>)
 8000668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066c:	6593      	str	r3, [r2, #88]	; 0x58
 800066e:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <HAL_MspInit+0x54>)
 8000670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 800067a:	2200      	movs	r2, #0
 800067c:	2100      	movs	r1, #0
 800067e:	2004      	movs	r0, #4
 8000680:	f000 fa09 	bl	8000a96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8000684:	2004      	movs	r0, #4
 8000686:	f000 fa20 	bl	8000aca <HAL_NVIC_EnableIRQ>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 800068a:	f7ff ffcb 	bl	8000624 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40021000 	.word	0x40021000

0800069c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
	...

080006ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80006b2:	2120      	movs	r1, #32
 80006b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b8:	f001 fcbc 	bl	8002034 <HAL_GPIO_TogglePin>
    for (size_t index = 0; index < 400000; index++) {
 80006bc:	2300      	movs	r3, #0
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	e003      	b.n	80006ca <HardFault_Handler+0x1e>
        asm("nop");
 80006c2:	bf00      	nop
    for (size_t index = 0; index < 400000; index++) {
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	3301      	adds	r3, #1
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4a01      	ldr	r2, [pc, #4]	; (80006d4 <HardFault_Handler+0x28>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d9f7      	bls.n	80006c2 <HardFault_Handler+0x16>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80006d2:	e7ee      	b.n	80006b2 <HardFault_Handler+0x6>
 80006d4:	00061a7f 	.word	0x00061a7f

080006d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006dc:	e7fe      	b.n	80006dc <MemManage_Handler+0x4>

080006de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006e2:	e7fe      	b.n	80006e2 <BusFault_Handler+0x4>

080006e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <UsageFault_Handler+0x4>

080006ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ee:	bf00      	nop
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr

080006f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr

08000706 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800070a:	bf00      	nop
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr

08000714 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000718:	f000 f8a2 	bl	8000860 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}

08000720 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8000724:	f000 fa3c 	bl	8000ba0 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}

0800072c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000730:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000734:	f001 fc98 	bl	8002068 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}

0800073c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000740:	4b08      	ldr	r3, [pc, #32]	; (8000764 <SystemInit+0x28>)
 8000742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000746:	4a07      	ldr	r2, [pc, #28]	; (8000764 <SystemInit+0x28>)
 8000748:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800074c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000750:	4b04      	ldr	r3, [pc, #16]	; (8000764 <SystemInit+0x28>)
 8000752:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000756:	609a      	str	r2, [r3, #8]
#endif
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	e000ed00 	.word	0xe000ed00

08000768 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000768:	480d      	ldr	r0, [pc, #52]	; (80007a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800076a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800076c:	480d      	ldr	r0, [pc, #52]	; (80007a4 <LoopForever+0x6>)
  ldr r1, =_edata
 800076e:	490e      	ldr	r1, [pc, #56]	; (80007a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000770:	4a0e      	ldr	r2, [pc, #56]	; (80007ac <LoopForever+0xe>)
  movs r3, #0
 8000772:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000774:	e002      	b.n	800077c <LoopCopyDataInit>

08000776 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000776:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000778:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800077a:	3304      	adds	r3, #4

0800077c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800077c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800077e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000780:	d3f9      	bcc.n	8000776 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000782:	4a0b      	ldr	r2, [pc, #44]	; (80007b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000784:	4c0b      	ldr	r4, [pc, #44]	; (80007b4 <LoopForever+0x16>)
  movs r3, #0
 8000786:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000788:	e001      	b.n	800078e <LoopFillZerobss>

0800078a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800078a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800078c:	3204      	adds	r2, #4

0800078e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800078e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000790:	d3fb      	bcc.n	800078a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000792:	f7ff ffd3 	bl	800073c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000796:	f002 fa1f 	bl	8002bd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800079a:	f7ff fdd3 	bl	8000344 <main>

0800079e <LoopForever>:

LoopForever:
    b LoopForever
 800079e:	e7fe      	b.n	800079e <LoopForever>
  ldr   r0, =_estack
 80007a0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80007a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007a8:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80007ac:	08002c60 	.word	0x08002c60
  ldr r2, =_sbss
 80007b0:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80007b4:	20000054 	.word	0x20000054

080007b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007b8:	e7fe      	b.n	80007b8 <ADC1_2_IRQHandler>

080007ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b082      	sub	sp, #8
 80007be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007c0:	2300      	movs	r3, #0
 80007c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007c4:	2003      	movs	r0, #3
 80007c6:	f000 f95b 	bl	8000a80 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007ca:	2000      	movs	r0, #0
 80007cc:	f000 f80e 	bl	80007ec <HAL_InitTick>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d002      	beq.n	80007dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80007d6:	2301      	movs	r3, #1
 80007d8:	71fb      	strb	r3, [r7, #7]
 80007da:	e001      	b.n	80007e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007dc:	f7ff ff32 	bl	8000644 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007e0:	79fb      	ldrb	r3, [r7, #7]

}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
	...

080007ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007f4:	2300      	movs	r3, #0
 80007f6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80007f8:	4b16      	ldr	r3, [pc, #88]	; (8000854 <HAL_InitTick+0x68>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d022      	beq.n	8000846 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000800:	4b15      	ldr	r3, [pc, #84]	; (8000858 <HAL_InitTick+0x6c>)
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	4b13      	ldr	r3, [pc, #76]	; (8000854 <HAL_InitTick+0x68>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800080c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000810:	fbb2 f3f3 	udiv	r3, r2, r3
 8000814:	4618      	mov	r0, r3
 8000816:	f000 f966 	bl	8000ae6 <HAL_SYSTICK_Config>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d10f      	bne.n	8000840 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2b0f      	cmp	r3, #15
 8000824:	d809      	bhi.n	800083a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000826:	2200      	movs	r2, #0
 8000828:	6879      	ldr	r1, [r7, #4]
 800082a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800082e:	f000 f932 	bl	8000a96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000832:	4a0a      	ldr	r2, [pc, #40]	; (800085c <HAL_InitTick+0x70>)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	6013      	str	r3, [r2, #0]
 8000838:	e007      	b.n	800084a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800083a:	2301      	movs	r3, #1
 800083c:	73fb      	strb	r3, [r7, #15]
 800083e:	e004      	b.n	800084a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000840:	2301      	movs	r3, #1
 8000842:	73fb      	strb	r3, [r7, #15]
 8000844:	e001      	b.n	800084a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000846:	2301      	movs	r3, #1
 8000848:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800084a:	7bfb      	ldrb	r3, [r7, #15]
}
 800084c:	4618      	mov	r0, r3
 800084e:	3710      	adds	r7, #16
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000008 	.word	0x20000008
 8000858:	20000000 	.word	0x20000000
 800085c:	20000004 	.word	0x20000004

08000860 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <HAL_IncTick+0x1c>)
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	4b05      	ldr	r3, [pc, #20]	; (8000880 <HAL_IncTick+0x20>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4413      	add	r3, r2
 800086e:	4a03      	ldr	r2, [pc, #12]	; (800087c <HAL_IncTick+0x1c>)
 8000870:	6013      	str	r3, [r2, #0]
}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr
 800087c:	20000050 	.word	0x20000050
 8000880:	20000008 	.word	0x20000008

08000884 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  return uwTick;
 8000888:	4b03      	ldr	r3, [pc, #12]	; (8000898 <HAL_GetTick+0x14>)
 800088a:	681b      	ldr	r3, [r3, #0]
}
 800088c:	4618      	mov	r0, r3
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	20000050 	.word	0x20000050

0800089c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008a4:	f7ff ffee 	bl	8000884 <HAL_GetTick>
 80008a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80008b4:	d004      	beq.n	80008c0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80008b6:	4b09      	ldr	r3, [pc, #36]	; (80008dc <HAL_Delay+0x40>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	68fa      	ldr	r2, [r7, #12]
 80008bc:	4413      	add	r3, r2
 80008be:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008c0:	bf00      	nop
 80008c2:	f7ff ffdf 	bl	8000884 <HAL_GetTick>
 80008c6:	4602      	mov	r2, r0
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	1ad3      	subs	r3, r2, r3
 80008cc:	68fa      	ldr	r2, [r7, #12]
 80008ce:	429a      	cmp	r2, r3
 80008d0:	d8f7      	bhi.n	80008c2 <HAL_Delay+0x26>
  {
  }
}
 80008d2:	bf00      	nop
 80008d4:	3710      	adds	r7, #16
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000008 	.word	0x20000008

080008e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	f003 0307 	and.w	r3, r3, #7
 80008ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <__NVIC_SetPriorityGrouping+0x44>)
 80008f2:	68db      	ldr	r3, [r3, #12]
 80008f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008f6:	68ba      	ldr	r2, [r7, #8]
 80008f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008fc:	4013      	ands	r3, r2
 80008fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000908:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800090c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000910:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000912:	4a04      	ldr	r2, [pc, #16]	; (8000924 <__NVIC_SetPriorityGrouping+0x44>)
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	60d3      	str	r3, [r2, #12]
}
 8000918:	bf00      	nop
 800091a:	3714      	adds	r7, #20
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800092c:	4b04      	ldr	r3, [pc, #16]	; (8000940 <__NVIC_GetPriorityGrouping+0x18>)
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	0a1b      	lsrs	r3, r3, #8
 8000932:	f003 0307 	and.w	r3, r3, #7
}
 8000936:	4618      	mov	r0, r3
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800094e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000952:	2b00      	cmp	r3, #0
 8000954:	db0b      	blt.n	800096e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	f003 021f 	and.w	r2, r3, #31
 800095c:	4907      	ldr	r1, [pc, #28]	; (800097c <__NVIC_EnableIRQ+0x38>)
 800095e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000962:	095b      	lsrs	r3, r3, #5
 8000964:	2001      	movs	r0, #1
 8000966:	fa00 f202 	lsl.w	r2, r0, r2
 800096a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800096e:	bf00      	nop
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	e000e100 	.word	0xe000e100

08000980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	6039      	str	r1, [r7, #0]
 800098a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800098c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000990:	2b00      	cmp	r3, #0
 8000992:	db0a      	blt.n	80009aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	b2da      	uxtb	r2, r3
 8000998:	490c      	ldr	r1, [pc, #48]	; (80009cc <__NVIC_SetPriority+0x4c>)
 800099a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099e:	0112      	lsls	r2, r2, #4
 80009a0:	b2d2      	uxtb	r2, r2
 80009a2:	440b      	add	r3, r1
 80009a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009a8:	e00a      	b.n	80009c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	b2da      	uxtb	r2, r3
 80009ae:	4908      	ldr	r1, [pc, #32]	; (80009d0 <__NVIC_SetPriority+0x50>)
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	f003 030f 	and.w	r3, r3, #15
 80009b6:	3b04      	subs	r3, #4
 80009b8:	0112      	lsls	r2, r2, #4
 80009ba:	b2d2      	uxtb	r2, r2
 80009bc:	440b      	add	r3, r1
 80009be:	761a      	strb	r2, [r3, #24]
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	e000e100 	.word	0xe000e100
 80009d0:	e000ed00 	.word	0xe000ed00

080009d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b089      	sub	sp, #36	; 0x24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	60f8      	str	r0, [r7, #12]
 80009dc:	60b9      	str	r1, [r7, #8]
 80009de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	f003 0307 	and.w	r3, r3, #7
 80009e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009e8:	69fb      	ldr	r3, [r7, #28]
 80009ea:	f1c3 0307 	rsb	r3, r3, #7
 80009ee:	2b04      	cmp	r3, #4
 80009f0:	bf28      	it	cs
 80009f2:	2304      	movcs	r3, #4
 80009f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	3304      	adds	r3, #4
 80009fa:	2b06      	cmp	r3, #6
 80009fc:	d902      	bls.n	8000a04 <NVIC_EncodePriority+0x30>
 80009fe:	69fb      	ldr	r3, [r7, #28]
 8000a00:	3b03      	subs	r3, #3
 8000a02:	e000      	b.n	8000a06 <NVIC_EncodePriority+0x32>
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a0c:	69bb      	ldr	r3, [r7, #24]
 8000a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a12:	43da      	mvns	r2, r3
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	401a      	ands	r2, r3
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	fa01 f303 	lsl.w	r3, r1, r3
 8000a26:	43d9      	mvns	r1, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a2c:	4313      	orrs	r3, r2
         );
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3724      	adds	r7, #36	; 0x24
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
	...

08000a3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a4c:	d301      	bcc.n	8000a52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a4e:	2301      	movs	r3, #1
 8000a50:	e00f      	b.n	8000a72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a52:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <SysTick_Config+0x40>)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	3b01      	subs	r3, #1
 8000a58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a5a:	210f      	movs	r1, #15
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a60:	f7ff ff8e 	bl	8000980 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a64:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <SysTick_Config+0x40>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a6a:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <SysTick_Config+0x40>)
 8000a6c:	2207      	movs	r2, #7
 8000a6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	e000e010 	.word	0xe000e010

08000a80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f7ff ff29 	bl	80008e0 <__NVIC_SetPriorityGrouping>
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b086      	sub	sp, #24
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	60b9      	str	r1, [r7, #8]
 8000aa0:	607a      	str	r2, [r7, #4]
 8000aa2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000aa4:	f7ff ff40 	bl	8000928 <__NVIC_GetPriorityGrouping>
 8000aa8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aaa:	687a      	ldr	r2, [r7, #4]
 8000aac:	68b9      	ldr	r1, [r7, #8]
 8000aae:	6978      	ldr	r0, [r7, #20]
 8000ab0:	f7ff ff90 	bl	80009d4 <NVIC_EncodePriority>
 8000ab4:	4602      	mov	r2, r0
 8000ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aba:	4611      	mov	r1, r2
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff ff5f 	bl	8000980 <__NVIC_SetPriority>
}
 8000ac2:	bf00      	nop
 8000ac4:	3718      	adds	r7, #24
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	b082      	sub	sp, #8
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff ff33 	bl	8000944 <__NVIC_EnableIRQ>
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b082      	sub	sp, #8
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f7ff ffa4 	bl	8000a3c <SysTick_Config>
 8000af4:	4603      	mov	r3, r0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
	...

08000b00 <HAL_FLASH_Program_IT>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	e9c7 2300 	strd	r2, r3, [r7]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000b0e:	4b22      	ldr	r3, [pc, #136]	; (8000b98 <HAL_FLASH_Program_IT+0x98>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d101      	bne.n	8000b1a <HAL_FLASH_Program_IT+0x1a>
 8000b16:	2302      	movs	r3, #2
 8000b18:	e03a      	b.n	8000b90 <HAL_FLASH_Program_IT+0x90>
 8000b1a:	4b1f      	ldr	r3, [pc, #124]	; (8000b98 <HAL_FLASH_Program_IT+0x98>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000b20:	4b1d      	ldr	r3, [pc, #116]	; (8000b98 <HAL_FLASH_Program_IT+0x98>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000b26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b2a:	f000 f9a7 	bl	8000e7c <FLASH_WaitForLastOperation>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	75fb      	strb	r3, [r7, #23]

  if (status != HAL_OK)
 8000b32:	7dfb      	ldrb	r3, [r7, #23]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d003      	beq.n	8000b40 <HAL_FLASH_Program_IT+0x40>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8000b38:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <HAL_FLASH_Program_IT+0x98>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	701a      	strb	r2, [r3, #0]
 8000b3e:	e026      	b.n	8000b8e <HAL_FLASH_Program_IT+0x8e>
  }
  else
  {
    /* Set internal variables used by the IRQ handler */
    if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	2b02      	cmp	r3, #2
 8000b44:	d103      	bne.n	8000b4e <HAL_FLASH_Program_IT+0x4e>
    {
      pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM_LAST;
 8000b46:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <HAL_FLASH_Program_IT+0x98>)
 8000b48:	2204      	movs	r2, #4
 8000b4a:	721a      	strb	r2, [r3, #8]
 8000b4c:	e002      	b.n	8000b54 <HAL_FLASH_Program_IT+0x54>
    }
    else
    {
      pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM;
 8000b4e:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <HAL_FLASH_Program_IT+0x98>)
 8000b50:	2203      	movs	r2, #3
 8000b52:	721a      	strb	r2, [r3, #8]
    }
    pFlash.Address = Address;
 8000b54:	4a10      	ldr	r2, [pc, #64]	; (8000b98 <HAL_FLASH_Program_IT+0x98>)
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	60d3      	str	r3, [r2, #12]

    /* Enable End of Operation and Error interrupts */
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8000b5a:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <HAL_FLASH_Program_IT+0x9c>)
 8000b5c:	695b      	ldr	r3, [r3, #20]
 8000b5e:	4a0f      	ldr	r2, [pc, #60]	; (8000b9c <HAL_FLASH_Program_IT+0x9c>)
 8000b60:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8000b64:	6153      	str	r3, [r2, #20]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d105      	bne.n	8000b78 <HAL_FLASH_Program_IT+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8000b6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000b70:	68b8      	ldr	r0, [r7, #8]
 8000b72:	f000 f9d7 	bl	8000f24 <FLASH_Program_DoubleWord>
 8000b76:	e00a      	b.n	8000b8e <HAL_FLASH_Program_IT+0x8e>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d002      	beq.n	8000b84 <HAL_FLASH_Program_IT+0x84>
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	2b02      	cmp	r3, #2
 8000b82:	d104      	bne.n	8000b8e <HAL_FLASH_Program_IT+0x8e>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	4619      	mov	r1, r3
 8000b88:	68b8      	ldr	r0, [r7, #8]
 8000b8a:	f000 f9ef 	bl	8000f6c <FLASH_Program_Fast>
    {
      /* Nothing to do */
    }
  }

  return status;
 8000b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3718      	adds	r7, #24
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	2000000c 	.word	0x2000000c
 8000b9c:	40022000 	.word	0x40022000

08000ba0 <HAL_FLASH_IRQHandler>:
/**
  * @brief  Handle FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
  uint32_t tmp_page;
  uint32_t error;
  FLASH_ProcedureTypeDef procedure;

  /* If the operation is completed, disable the PG, PNB, MER1, MER2 and PER Bit */
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_MER1 | FLASH_CR_PER | FLASH_CR_PNB));
 8000ba6:	4b66      	ldr	r3, [pc, #408]	; (8000d40 <HAL_FLASH_IRQHandler+0x1a0>)
 8000ba8:	695b      	ldr	r3, [r3, #20]
 8000baa:	4a65      	ldr	r2, [pc, #404]	; (8000d40 <HAL_FLASH_IRQHandler+0x1a0>)
 8000bac:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000bb0:	f023 0303 	bic.w	r3, r3, #3
 8000bb4:	6153      	str	r3, [r2, #20]
#if defined (FLASH_OPTR_DBANK)
  CLEAR_BIT(FLASH->CR, FLASH_CR_MER2);
 8000bb6:	4b62      	ldr	r3, [pc, #392]	; (8000d40 <HAL_FLASH_IRQHandler+0x1a0>)
 8000bb8:	695b      	ldr	r3, [r3, #20]
 8000bba:	4a61      	ldr	r2, [pc, #388]	; (8000d40 <HAL_FLASH_IRQHandler+0x1a0>)
 8000bbc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000bc0:	6153      	str	r3, [r2, #20]
#endif

  /* Disable the FSTPG Bit only if it is the last row programmed */
  if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAM_LAST)
 8000bc2:	4b60      	ldr	r3, [pc, #384]	; (8000d44 <HAL_FLASH_IRQHandler+0x1a4>)
 8000bc4:	7a1b      	ldrb	r3, [r3, #8]
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	2b04      	cmp	r3, #4
 8000bca:	d105      	bne.n	8000bd8 <HAL_FLASH_IRQHandler+0x38>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8000bcc:	4b5c      	ldr	r3, [pc, #368]	; (8000d40 <HAL_FLASH_IRQHandler+0x1a0>)
 8000bce:	695b      	ldr	r3, [r3, #20]
 8000bd0:	4a5b      	ldr	r2, [pc, #364]	; (8000d40 <HAL_FLASH_IRQHandler+0x1a0>)
 8000bd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bd6:	6153      	str	r3, [r2, #20]
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8000bd8:	4b59      	ldr	r3, [pc, #356]	; (8000d40 <HAL_FLASH_IRQHandler+0x1a0>)
 8000bda:	691a      	ldr	r2, [r3, #16]
 8000bdc:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8000be0:	4013      	ands	r3, r2
 8000be2:	60fb      	str	r3, [r7, #12]

  if (error != 0U)
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d041      	beq.n	8000c6e <HAL_FLASH_IRQHandler+0xce>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8000bea:	4b56      	ldr	r3, [pc, #344]	; (8000d44 <HAL_FLASH_IRQHandler+0x1a4>)
 8000bec:	685a      	ldr	r2, [r3, #4]
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	4a54      	ldr	r2, [pc, #336]	; (8000d44 <HAL_FLASH_IRQHandler+0x1a4>)
 8000bf4:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d007      	beq.n	8000c10 <HAL_FLASH_IRQHandler+0x70>
 8000c00:	4b4f      	ldr	r3, [pc, #316]	; (8000d40 <HAL_FLASH_IRQHandler+0x1a0>)
 8000c02:	699a      	ldr	r2, [r3, #24]
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8000c0a:	494d      	ldr	r1, [pc, #308]	; (8000d40 <HAL_FLASH_IRQHandler+0x1a0>)
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	618b      	str	r3, [r1, #24]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d004      	beq.n	8000c24 <HAL_FLASH_IRQHandler+0x84>
 8000c1a:	4a49      	ldr	r2, [pc, #292]	; (8000d40 <HAL_FLASH_IRQHandler+0x1a0>)
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000c22:	6113      	str	r3, [r2, #16]

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches() ;
 8000c24:	f000 fbca 	bl	80013bc <FLASH_FlushCaches>

    /* FLASH error interrupt user callback */
    procedure = pFlash.ProcedureOnGoing;
 8000c28:	4b46      	ldr	r3, [pc, #280]	; (8000d44 <HAL_FLASH_IRQHandler+0x1a4>)
 8000c2a:	7a1b      	ldrb	r3, [r3, #8]
 8000c2c:	72fb      	strb	r3, [r7, #11]
    if (procedure == FLASH_PROC_PAGE_ERASE)
 8000c2e:	7afb      	ldrb	r3, [r7, #11]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d105      	bne.n	8000c40 <HAL_FLASH_IRQHandler+0xa0>
    {
      HAL_FLASH_OperationErrorCallback(pFlash.Page);
 8000c34:	4b43      	ldr	r3, [pc, #268]	; (8000d44 <HAL_FLASH_IRQHandler+0x1a4>)
 8000c36:	695b      	ldr	r3, [r3, #20]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f000 f885 	bl	8000d48 <HAL_FLASH_OperationErrorCallback>
 8000c3e:	e013      	b.n	8000c68 <HAL_FLASH_IRQHandler+0xc8>
    }
    else if (procedure == FLASH_PROC_MASS_ERASE)
 8000c40:	7afb      	ldrb	r3, [r7, #11]
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d105      	bne.n	8000c52 <HAL_FLASH_IRQHandler+0xb2>
    {
      HAL_FLASH_OperationErrorCallback(pFlash.Bank);
 8000c46:	4b3f      	ldr	r3, [pc, #252]	; (8000d44 <HAL_FLASH_IRQHandler+0x1a4>)
 8000c48:	691b      	ldr	r3, [r3, #16]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 f87c 	bl	8000d48 <HAL_FLASH_OperationErrorCallback>
 8000c50:	e00a      	b.n	8000c68 <HAL_FLASH_IRQHandler+0xc8>
    }
    else if ((procedure == FLASH_PROC_PROGRAM) ||
 8000c52:	7afb      	ldrb	r3, [r7, #11]
 8000c54:	2b03      	cmp	r3, #3
 8000c56:	d002      	beq.n	8000c5e <HAL_FLASH_IRQHandler+0xbe>
 8000c58:	7afb      	ldrb	r3, [r7, #11]
 8000c5a:	2b04      	cmp	r3, #4
 8000c5c:	d104      	bne.n	8000c68 <HAL_FLASH_IRQHandler+0xc8>
             (procedure == FLASH_PROC_PROGRAM_LAST))
    {
      HAL_FLASH_OperationErrorCallback(pFlash.Address);
 8000c5e:	4b39      	ldr	r3, [pc, #228]	; (8000d44 <HAL_FLASH_IRQHandler+0x1a4>)
 8000c60:	68db      	ldr	r3, [r3, #12]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 f870 	bl	8000d48 <HAL_FLASH_OperationErrorCallback>
    {
      /* Nothing to do */
    }

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8000c68:	4b36      	ldr	r3, [pc, #216]	; (8000d44 <HAL_FLASH_IRQHandler+0x1a4>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	721a      	strb	r2, [r3, #8]
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000c6e:	4b34      	ldr	r3, [pc, #208]	; (8000d40 <HAL_FLASH_IRQHandler+0x1a0>)
 8000c70:	691b      	ldr	r3, [r3, #16]
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d14f      	bne.n	8000d1a <HAL_FLASH_IRQHandler+0x17a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000c7a:	4b31      	ldr	r3, [pc, #196]	; (8000d40 <HAL_FLASH_IRQHandler+0x1a0>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	611a      	str	r2, [r3, #16]

    if (pFlash.ProcedureOnGoing == FLASH_PROC_PAGE_ERASE)
 8000c80:	4b30      	ldr	r3, [pc, #192]	; (8000d44 <HAL_FLASH_IRQHandler+0x1a4>)
 8000c82:	7a1b      	ldrb	r3, [r3, #8]
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d12b      	bne.n	8000ce2 <HAL_FLASH_IRQHandler+0x142>
    {
      /* Nb of pages to erased can be decreased */
      pFlash.NbPagesToErase--;
 8000c8a:	4b2e      	ldr	r3, [pc, #184]	; (8000d44 <HAL_FLASH_IRQHandler+0x1a4>)
 8000c8c:	699b      	ldr	r3, [r3, #24]
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	4a2c      	ldr	r2, [pc, #176]	; (8000d44 <HAL_FLASH_IRQHandler+0x1a4>)
 8000c92:	6193      	str	r3, [r2, #24]

      /* Check if there are still pages to erase*/
      if (pFlash.NbPagesToErase != 0U)
 8000c94:	4b2b      	ldr	r3, [pc, #172]	; (8000d44 <HAL_FLASH_IRQHandler+0x1a4>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d013      	beq.n	8000cc4 <HAL_FLASH_IRQHandler+0x124>
      {
        /* Indicate user which page has been erased*/
        HAL_FLASH_EndOfOperationCallback(pFlash.Page);
 8000c9c:	4b29      	ldr	r3, [pc, #164]	; (8000d44 <HAL_FLASH_IRQHandler+0x1a4>)
 8000c9e:	695b      	ldr	r3, [r3, #20]
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff facd 	bl	8000240 <HAL_FLASH_EndOfOperationCallback>

        /* Increment page number */
        pFlash.Page++;
 8000ca6:	4b27      	ldr	r3, [pc, #156]	; (8000d44 <HAL_FLASH_IRQHandler+0x1a4>)
 8000ca8:	695b      	ldr	r3, [r3, #20]
 8000caa:	3301      	adds	r3, #1
 8000cac:	4a25      	ldr	r2, [pc, #148]	; (8000d44 <HAL_FLASH_IRQHandler+0x1a4>)
 8000cae:	6153      	str	r3, [r2, #20]
        tmp_page = pFlash.Page;
 8000cb0:	4b24      	ldr	r3, [pc, #144]	; (8000d44 <HAL_FLASH_IRQHandler+0x1a4>)
 8000cb2:	695b      	ldr	r3, [r3, #20]
 8000cb4:	607b      	str	r3, [r7, #4]
        FLASH_PageErase(tmp_page, pFlash.Bank);
 8000cb6:	4b23      	ldr	r3, [pc, #140]	; (8000d44 <HAL_FLASH_IRQHandler+0x1a4>)
 8000cb8:	691b      	ldr	r3, [r3, #16]
 8000cba:	4619      	mov	r1, r3
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f000 fb39 	bl	8001334 <FLASH_PageErase>
 8000cc2:	e02a      	b.n	8000d1a <HAL_FLASH_IRQHandler+0x17a>
      }
      else
      {
        /* No more pages to Erase */
        /* Reset Address and stop Erase pages procedure */
        pFlash.Page = 0xFFFFFFFFU;
 8000cc4:	4b1f      	ldr	r3, [pc, #124]	; (8000d44 <HAL_FLASH_IRQHandler+0x1a4>)
 8000cc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cca:	615a      	str	r2, [r3, #20]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8000ccc:	4b1d      	ldr	r3, [pc, #116]	; (8000d44 <HAL_FLASH_IRQHandler+0x1a4>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	721a      	strb	r2, [r3, #8]

        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8000cd2:	f000 fb73 	bl	80013bc <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Page);
 8000cd6:	4b1b      	ldr	r3, [pc, #108]	; (8000d44 <HAL_FLASH_IRQHandler+0x1a4>)
 8000cd8:	695b      	ldr	r3, [r3, #20]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff fab0 	bl	8000240 <HAL_FLASH_EndOfOperationCallback>
 8000ce0:	e01b      	b.n	8000d1a <HAL_FLASH_IRQHandler+0x17a>
      }
    }
    else
    {
      /* Flush the caches to be sure of the data consistency */
      FLASH_FlushCaches() ;
 8000ce2:	f000 fb6b 	bl	80013bc <FLASH_FlushCaches>

      procedure = pFlash.ProcedureOnGoing;
 8000ce6:	4b17      	ldr	r3, [pc, #92]	; (8000d44 <HAL_FLASH_IRQHandler+0x1a4>)
 8000ce8:	7a1b      	ldrb	r3, [r3, #8]
 8000cea:	72fb      	strb	r3, [r7, #11]
      if (procedure == FLASH_PROC_MASS_ERASE)
 8000cec:	7afb      	ldrb	r3, [r7, #11]
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d105      	bne.n	8000cfe <HAL_FLASH_IRQHandler+0x15e>
      {
        /* MassErase ended. Return the selected bank */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8000cf2:	4b14      	ldr	r3, [pc, #80]	; (8000d44 <HAL_FLASH_IRQHandler+0x1a4>)
 8000cf4:	691b      	ldr	r3, [r3, #16]
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff faa2 	bl	8000240 <HAL_FLASH_EndOfOperationCallback>
 8000cfc:	e00a      	b.n	8000d14 <HAL_FLASH_IRQHandler+0x174>
      }
      else if ((procedure == FLASH_PROC_PROGRAM) ||
 8000cfe:	7afb      	ldrb	r3, [r7, #11]
 8000d00:	2b03      	cmp	r3, #3
 8000d02:	d002      	beq.n	8000d0a <HAL_FLASH_IRQHandler+0x16a>
 8000d04:	7afb      	ldrb	r3, [r7, #11]
 8000d06:	2b04      	cmp	r3, #4
 8000d08:	d104      	bne.n	8000d14 <HAL_FLASH_IRQHandler+0x174>
               (procedure == FLASH_PROC_PROGRAM_LAST))
      {
        /* Program ended. Return the selected address */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <HAL_FLASH_IRQHandler+0x1a4>)
 8000d0c:	68db      	ldr	r3, [r3, #12]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff fa96 	bl	8000240 <HAL_FLASH_EndOfOperationCallback>
      {
        /* Nothing to do */
      }

      /*Clear the procedure ongoing*/
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8000d14:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <HAL_FLASH_IRQHandler+0x1a4>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	721a      	strb	r2, [r3, #8]
    }
  }

  if (pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <HAL_FLASH_IRQHandler+0x1a4>)
 8000d1c:	7a1b      	ldrb	r3, [r3, #8]
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d108      	bne.n	8000d36 <HAL_FLASH_IRQHandler+0x196>
  {
    /* Disable End of Operation and Error interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <HAL_FLASH_IRQHandler+0x1a0>)
 8000d26:	695b      	ldr	r3, [r3, #20]
 8000d28:	4a05      	ldr	r2, [pc, #20]	; (8000d40 <HAL_FLASH_IRQHandler+0x1a0>)
 8000d2a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000d2e:	6153      	str	r3, [r2, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8000d30:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <HAL_FLASH_IRQHandler+0x1a4>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	701a      	strb	r2, [r3, #0]
  }
}
 8000d36:	bf00      	nop
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40022000 	.word	0x40022000
 8000d44:	2000000c 	.word	0x2000000c

08000d48 <HAL_FLASH_OperationErrorCallback>:
  *           @arg Page Erase: Page number which returned an error
  *           @arg Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000d62:	2300      	movs	r3, #0
 8000d64:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8000d66:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <HAL_FLASH_Unlock+0x38>)
 8000d68:	695b      	ldr	r3, [r3, #20]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	da0b      	bge.n	8000d86 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000d6e:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <HAL_FLASH_Unlock+0x38>)
 8000d70:	4a09      	ldr	r2, [pc, #36]	; (8000d98 <HAL_FLASH_Unlock+0x3c>)
 8000d72:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000d74:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <HAL_FLASH_Unlock+0x38>)
 8000d76:	4a09      	ldr	r2, [pc, #36]	; (8000d9c <HAL_FLASH_Unlock+0x40>)
 8000d78:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8000d7a:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <HAL_FLASH_Unlock+0x38>)
 8000d7c:	695b      	ldr	r3, [r3, #20]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	da01      	bge.n	8000d86 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8000d86:	79fb      	ldrb	r3, [r7, #7]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	40022000 	.word	0x40022000
 8000d98:	45670123 	.word	0x45670123
 8000d9c:	cdef89ab 	.word	0xcdef89ab

08000da0 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000daa:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <HAL_FLASH_Lock+0x30>)
 8000dac:	695b      	ldr	r3, [r3, #20]
 8000dae:	4a08      	ldr	r2, [pc, #32]	; (8000dd0 <HAL_FLASH_Lock+0x30>)
 8000db0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000db4:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8000db6:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_FLASH_Lock+0x30>)
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	da01      	bge.n	8000dc2 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	40022000 	.word	0x40022000

08000dd4 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 8000dde:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <HAL_FLASH_OB_Unlock+0x40>)
 8000de0:	695b      	ldr	r3, [r3, #20]
 8000de2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d00d      	beq.n	8000e06 <HAL_FLASH_OB_Unlock+0x32>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8000dea:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <HAL_FLASH_OB_Unlock+0x40>)
 8000dec:	4a0a      	ldr	r2, [pc, #40]	; (8000e18 <HAL_FLASH_OB_Unlock+0x44>)
 8000dee:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8000df0:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <HAL_FLASH_OB_Unlock+0x40>)
 8000df2:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <HAL_FLASH_OB_Unlock+0x48>)
 8000df4:	60da      	str	r2, [r3, #12]

    /* verify option bytes are unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 8000df6:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <HAL_FLASH_OB_Unlock+0x40>)
 8000df8:	695b      	ldr	r3, [r3, #20]
 8000dfa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <HAL_FLASH_OB_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8000e06:	79fb      	ldrb	r3, [r7, #7]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	40022000 	.word	0x40022000
 8000e18:	08192a3b 	.word	0x08192a3b
 8000e1c:	4c5d6e7f 	.word	0x4c5d6e7f

08000e20 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Bytes Registers access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	71fb      	strb	r3, [r7, #7]

  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 8000e2a:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <HAL_FLASH_OB_Lock+0x34>)
 8000e2c:	695b      	ldr	r3, [r3, #20]
 8000e2e:	4a09      	ldr	r2, [pc, #36]	; (8000e54 <HAL_FLASH_OB_Lock+0x34>)
 8000e30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000e34:	6153      	str	r3, [r2, #20]

  /* Verify option bytes are locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 8000e36:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <HAL_FLASH_OB_Lock+0x34>)
 8000e38:	695b      	ldr	r3, [r3, #20]
 8000e3a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <HAL_FLASH_OB_Lock+0x26>
  {
    status = HAL_OK;
 8000e42:	2300      	movs	r3, #0
 8000e44:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8000e46:	79fb      	ldrb	r3, [r7, #7]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	40022000 	.word	0x40022000

08000e58 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* Set the bit to force the option byte reloading */
  SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <HAL_FLASH_OB_Launch+0x20>)
 8000e5e:	695b      	ldr	r3, [r3, #20]
 8000e60:	4a05      	ldr	r2, [pc, #20]	; (8000e78 <HAL_FLASH_OB_Launch+0x20>)
 8000e62:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000e66:	6153      	str	r3, [r2, #20]

  /* Wait for last operation to be completed */
  return (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE));
 8000e68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e6c:	f000 f806 	bl	8000e7c <FLASH_WaitForLastOperation>
 8000e70:	4603      	mov	r3, r0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40022000 	.word	0x40022000

08000e7c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8000e84:	f7ff fcfe 	bl	8000884 <HAL_GetTick>
 8000e88:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8000e8a:	e009      	b.n	8000ea0 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8000e8c:	f7ff fcfa 	bl	8000884 <HAL_GetTick>
 8000e90:	4602      	mov	r2, r0
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d201      	bcs.n	8000ea0 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	e038      	b.n	8000f12 <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8000ea0:	4b1e      	ldr	r3, [pc, #120]	; (8000f1c <FLASH_WaitForLastOperation+0xa0>)
 8000ea2:	691b      	ldr	r3, [r3, #16]
 8000ea4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eac:	d0ee      	beq.n	8000e8c <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8000eae:	4b1b      	ldr	r3, [pc, #108]	; (8000f1c <FLASH_WaitForLastOperation+0xa0>)
 8000eb0:	691a      	ldr	r2, [r3, #16]
 8000eb2:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d01e      	beq.n	8000efe <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8000ec0:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <FLASH_WaitForLastOperation+0xa4>)
 8000ec2:	685a      	ldr	r2, [r3, #4]
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	4a15      	ldr	r2, [pc, #84]	; (8000f20 <FLASH_WaitForLastOperation+0xa4>)
 8000eca:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d007      	beq.n	8000ee6 <FLASH_WaitForLastOperation+0x6a>
 8000ed6:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <FLASH_WaitForLastOperation+0xa0>)
 8000ed8:	699a      	ldr	r2, [r3, #24]
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8000ee0:	490e      	ldr	r1, [pc, #56]	; (8000f1c <FLASH_WaitForLastOperation+0xa0>)
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	618b      	str	r3, [r1, #24]
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d004      	beq.n	8000efa <FLASH_WaitForLastOperation+0x7e>
 8000ef0:	4a0a      	ldr	r2, [pc, #40]	; (8000f1c <FLASH_WaitForLastOperation+0xa0>)
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000ef8:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e009      	b.n	8000f12 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000efe:	4b07      	ldr	r3, [pc, #28]	; (8000f1c <FLASH_WaitForLastOperation+0xa0>)
 8000f00:	691b      	ldr	r3, [r3, #16]
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d102      	bne.n	8000f10 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000f0a:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <FLASH_WaitForLastOperation+0xa0>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40022000 	.word	0x40022000
 8000f20:	2000000c 	.word	0x2000000c

08000f24 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8000f24:	b490      	push	{r4, r7}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000f30:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <FLASH_Program_DoubleWord+0x44>)
 8000f32:	695b      	ldr	r3, [r3, #20]
 8000f34:	4a0c      	ldr	r2, [pc, #48]	; (8000f68 <FLASH_Program_DoubleWord+0x44>)
 8000f36:	f043 0301 	orr.w	r3, r3, #1
 8000f3a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	683a      	ldr	r2, [r7, #0]
 8000f40:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000f42:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8000f46:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000f4a:	f04f 0300 	mov.w	r3, #0
 8000f4e:	f04f 0400 	mov.w	r4, #0
 8000f52:	0013      	movs	r3, r2
 8000f54:	2400      	movs	r4, #0
 8000f56:	68fa      	ldr	r2, [r7, #12]
 8000f58:	3204      	adds	r2, #4
 8000f5a:	6013      	str	r3, [r2, #0]
}
 8000f5c:	bf00      	nop
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bc90      	pop	{r4, r7}
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	40022000 	.word	0x40022000

08000f6c <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b089      	sub	sp, #36	; 0x24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8000f76:	2340      	movs	r3, #64	; 0x40
 8000f78:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8000f82:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <FLASH_Program_Fast+0x64>)
 8000f84:	695b      	ldr	r3, [r3, #20]
 8000f86:	4a12      	ldr	r2, [pc, #72]	; (8000fd0 <FLASH_Program_Fast+0x64>)
 8000f88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f8c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000f8e:	f3ef 8310 	mrs	r3, PRIMASK
 8000f92:	60fb      	str	r3, [r7, #12]
  return(result);
 8000f94:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8000f96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8000f98:	b672      	cpsid	i
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	3304      	adds	r3, #4
 8000fa6:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	3304      	adds	r3, #4
 8000fac:	617b      	str	r3, [r7, #20]
    row_index--;
 8000fae:	7ffb      	ldrb	r3, [r7, #31]
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8000fb4:	7ffb      	ldrb	r3, [r7, #31]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d1ef      	bne.n	8000f9a <FLASH_Program_Fast+0x2e>
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	f383 8810 	msr	PRIMASK, r3

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8000fc4:	bf00      	nop
 8000fc6:	3724      	adds	r7, #36	; 0x24
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	40022000 	.word	0x40022000

08000fd4 <HAL_FLASHEx_Erase_IT>:
  * @param  pEraseInit pointer to an FLASH_EraseInitTypeDef structure that
  *         contains the configuration information for the erasing.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000fe0:	4b36      	ldr	r3, [pc, #216]	; (80010bc <HAL_FLASHEx_Erase_IT+0xe8>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d101      	bne.n	8000fec <HAL_FLASHEx_Erase_IT+0x18>
 8000fe8:	2302      	movs	r3, #2
 8000fea:	e063      	b.n	80010b4 <HAL_FLASHEx_Erase_IT+0xe0>
 8000fec:	4b33      	ldr	r3, [pc, #204]	; (80010bc <HAL_FLASHEx_Erase_IT+0xe8>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000ff2:	4b32      	ldr	r3, [pc, #200]	; (80010bc <HAL_FLASHEx_Erase_IT+0xe8>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	605a      	str	r2, [r3, #4]

  /* Deactivate the cache if they are activated to avoid data misbehavior */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8000ff8:	4b31      	ldr	r3, [pc, #196]	; (80010c0 <HAL_FLASHEx_Erase_IT+0xec>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001000:	2b00      	cmp	r3, #0
 8001002:	d019      	beq.n	8001038 <HAL_FLASHEx_Erase_IT+0x64>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001004:	4b2e      	ldr	r3, [pc, #184]	; (80010c0 <HAL_FLASHEx_Erase_IT+0xec>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a2d      	ldr	r2, [pc, #180]	; (80010c0 <HAL_FLASHEx_Erase_IT+0xec>)
 800100a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800100e:	6013      	str	r3, [r2, #0]

    if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001010:	4b2b      	ldr	r3, [pc, #172]	; (80010c0 <HAL_FLASHEx_Erase_IT+0xec>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001018:	2b00      	cmp	r3, #0
 800101a:	d009      	beq.n	8001030 <HAL_FLASHEx_Erase_IT+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800101c:	4b28      	ldr	r3, [pc, #160]	; (80010c0 <HAL_FLASHEx_Erase_IT+0xec>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a27      	ldr	r2, [pc, #156]	; (80010c0 <HAL_FLASHEx_Erase_IT+0xec>)
 8001022:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001026:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8001028:	4b24      	ldr	r3, [pc, #144]	; (80010bc <HAL_FLASHEx_Erase_IT+0xe8>)
 800102a:	2203      	movs	r2, #3
 800102c:	771a      	strb	r2, [r3, #28]
 800102e:	e016      	b.n	800105e <HAL_FLASHEx_Erase_IT+0x8a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8001030:	4b22      	ldr	r3, [pc, #136]	; (80010bc <HAL_FLASHEx_Erase_IT+0xe8>)
 8001032:	2201      	movs	r2, #1
 8001034:	771a      	strb	r2, [r3, #28]
 8001036:	e012      	b.n	800105e <HAL_FLASHEx_Erase_IT+0x8a>
    }
  }
  else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001038:	4b21      	ldr	r3, [pc, #132]	; (80010c0 <HAL_FLASHEx_Erase_IT+0xec>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001040:	2b00      	cmp	r3, #0
 8001042:	d009      	beq.n	8001058 <HAL_FLASHEx_Erase_IT+0x84>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001044:	4b1e      	ldr	r3, [pc, #120]	; (80010c0 <HAL_FLASHEx_Erase_IT+0xec>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a1d      	ldr	r2, [pc, #116]	; (80010c0 <HAL_FLASHEx_Erase_IT+0xec>)
 800104a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800104e:	6013      	str	r3, [r2, #0]
    pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001050:	4b1a      	ldr	r3, [pc, #104]	; (80010bc <HAL_FLASHEx_Erase_IT+0xe8>)
 8001052:	2202      	movs	r2, #2
 8001054:	771a      	strb	r2, [r3, #28]
 8001056:	e002      	b.n	800105e <HAL_FLASHEx_Erase_IT+0x8a>
  }
  else
  {
    pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001058:	4b18      	ldr	r3, [pc, #96]	; (80010bc <HAL_FLASHEx_Erase_IT+0xe8>)
 800105a:	2200      	movs	r2, #0
 800105c:	771a      	strb	r2, [r3, #28]
  }

  /* Enable End of Operation and Error interrupts */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 800105e:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <HAL_FLASHEx_Erase_IT+0xec>)
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	4a17      	ldr	r2, [pc, #92]	; (80010c0 <HAL_FLASHEx_Erase_IT+0xec>)
 8001064:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8001068:	6153      	str	r3, [r2, #20]

  pFlash.Bank = pEraseInit->Banks;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	4a13      	ldr	r2, [pc, #76]	; (80010bc <HAL_FLASHEx_Erase_IT+0xe8>)
 8001070:	6113      	str	r3, [r2, #16]

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d108      	bne.n	800108c <HAL_FLASHEx_Erase_IT+0xb8>
  {
    /* Mass erase to be done */
    pFlash.ProcedureOnGoing = FLASH_PROC_MASS_ERASE;
 800107a:	4b10      	ldr	r3, [pc, #64]	; (80010bc <HAL_FLASHEx_Erase_IT+0xe8>)
 800107c:	2202      	movs	r2, #2
 800107e:	721a      	strb	r2, [r3, #8]
    FLASH_MassErase(pEraseInit->Banks);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	4618      	mov	r0, r3
 8001086:	f000 f91d 	bl	80012c4 <FLASH_MassErase>
 800108a:	e012      	b.n	80010b2 <HAL_FLASHEx_Erase_IT+0xde>
  }
  else
  {
    /* Erase by page to be done */
    pFlash.ProcedureOnGoing = FLASH_PROC_PAGE_ERASE;
 800108c:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <HAL_FLASHEx_Erase_IT+0xe8>)
 800108e:	2201      	movs	r2, #1
 8001090:	721a      	strb	r2, [r3, #8]
    pFlash.NbPagesToErase = pEraseInit->NbPages;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	4a09      	ldr	r2, [pc, #36]	; (80010bc <HAL_FLASHEx_Erase_IT+0xe8>)
 8001098:	6193      	str	r3, [r2, #24]
    pFlash.Page = pEraseInit->Page;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	4a07      	ldr	r2, [pc, #28]	; (80010bc <HAL_FLASHEx_Erase_IT+0xe8>)
 80010a0:	6153      	str	r3, [r2, #20]

    /*Erase 1st page and wait for IT */
    FLASH_PageErase(pEraseInit->Page, pEraseInit->Banks);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	689a      	ldr	r2, [r3, #8]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	4619      	mov	r1, r3
 80010ac:	4610      	mov	r0, r2
 80010ae:	f000 f941 	bl	8001334 <FLASH_PageErase>
  }

  return status;
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	2000000c 	.word	0x2000000c
 80010c0:	40022000 	.word	0x40022000

080010c4 <HAL_FLASHEx_OBProgram>:
  *         - after an option bytes launch through the call of HAL_FLASH_OB_Launch()
  *         - after a power reset (BOR reset or exit from Standby/Shutdown modes)
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010cc:	2300      	movs	r3, #0
 80010ce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80010d0:	4b43      	ldr	r3, [pc, #268]	; (80011e0 <HAL_FLASHEx_OBProgram+0x11c>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d101      	bne.n	80010dc <HAL_FLASHEx_OBProgram+0x18>
 80010d8:	2302      	movs	r3, #2
 80010da:	e07d      	b.n	80011d8 <HAL_FLASHEx_OBProgram+0x114>
 80010dc:	4b40      	ldr	r3, [pc, #256]	; (80011e0 <HAL_FLASHEx_OBProgram+0x11c>)
 80010de:	2201      	movs	r2, #1
 80010e0:	701a      	strb	r2, [r3, #0]

  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80010e2:	4b3f      	ldr	r3, [pc, #252]	; (80011e0 <HAL_FLASHEx_OBProgram+0x11c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	605a      	str	r2, [r3, #4]

  /* Write protection configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_WRP) != 0U)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 0301 	and.w	r3, r3, #1
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d00d      	beq.n	8001110 <HAL_FLASHEx_OBProgram+0x4c>
  {
    /* Configure of Write protection on the selected area */
    if (FLASH_OB_WRPConfig(pOBInit->WRPArea, pOBInit->WRPStartOffset, pOBInit->WRPEndOffset) != HAL_OK)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6858      	ldr	r0, [r3, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6899      	ldr	r1, [r3, #8]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	461a      	mov	r2, r3
 8001102:	f000 f99f 	bl	8001444 <FLASH_OB_WRPConfig>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <HAL_FLASHEx_OBProgram+0x4c>
    {
      status = HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Read protection configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d009      	beq.n	8001130 <HAL_FLASHEx_OBProgram+0x6c>
  {
    /* Configure the Read protection level */
    if (FLASH_OB_RDPConfig(pOBInit->RDPLevel) != HAL_OK)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	691b      	ldr	r3, [r3, #16]
 8001120:	4618      	mov	r0, r3
 8001122:	f000 f9d9 	bl	80014d8 <FLASH_OB_RDPConfig>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <HAL_FLASHEx_OBProgram+0x6c>
    {
      status = HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* User Configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0304 	and.w	r3, r3, #4
 8001138:	2b00      	cmp	r3, #0
 800113a:	d00c      	beq.n	8001156 <HAL_FLASHEx_OBProgram+0x92>
  {
    /* Configure the user option bytes */
    if (FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig) != HAL_OK)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	695a      	ldr	r2, [r3, #20]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	4619      	mov	r1, r3
 8001146:	4610      	mov	r0, r2
 8001148:	f000 f9ee 	bl	8001528 <FLASH_OB_UserConfig>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <HAL_FLASHEx_OBProgram+0x92>
    {
      status = HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* PCROP Configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0U)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 0308 	and.w	r3, r3, #8
 800115e:	2b00      	cmp	r3, #0
 8001160:	d013      	beq.n	800118a <HAL_FLASHEx_OBProgram+0xc6>
  {
    if (pOBInit->PCROPStartAddr != pOBInit->PCROPEndAddr)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6a1a      	ldr	r2, [r3, #32]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116a:	429a      	cmp	r2, r3
 800116c:	d00d      	beq.n	800118a <HAL_FLASHEx_OBProgram+0xc6>
    {
      /* Configure the Proprietary code readout protection */
      if (FLASH_OB_PCROPConfig(pOBInit->PCROPConfig, pOBInit->PCROPStartAddr, pOBInit->PCROPEndAddr) != HAL_OK)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	69d8      	ldr	r0, [r3, #28]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6a19      	ldr	r1, [r3, #32]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117a:	461a      	mov	r2, r3
 800117c:	f000 faf4 	bl	8001768 <FLASH_OB_PCROPConfig>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <HAL_FLASHEx_OBProgram+0xc6>
      {
        status = HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  /* Securable memory Configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_SEC) != 0U)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0320 	and.w	r3, r3, #32
 8001192:	2b00      	cmp	r3, #0
 8001194:	d00c      	beq.n	80011b0 <HAL_FLASHEx_OBProgram+0xec>
  {
    /* Configure the securable memory area */
    if (FLASH_OB_SecMemConfig(pOBInit->SecBank, pOBInit->SecSize) != HAL_OK)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	4619      	mov	r1, r3
 80011a0:	4610      	mov	r0, r2
 80011a2:	f000 fbdb 	bl	800195c <FLASH_OB_SecMemConfig>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <HAL_FLASHEx_OBProgram+0xec>
    {
      status = HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Boot Entry Point Configuration */
  if ((pOBInit->OptionType & OPTIONBYTE_BOOT_LOCK) != 0U)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0310 	and.w	r3, r3, #16
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d009      	beq.n	80011d0 <HAL_FLASHEx_OBProgram+0x10c>
  {
    /* Configure the boot unique entry point option */
    if (FLASH_OB_BootLockConfig(pOBInit->BootEntryPoint) != HAL_OK)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c0:	4618      	mov	r0, r3
 80011c2:	f000 fc03 	bl	80019cc <FLASH_OB_BootLockConfig>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <HAL_FLASHEx_OBProgram+0x10c>
    {
      status = HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80011d0:	4b03      	ldr	r3, [pc, #12]	; (80011e0 <HAL_FLASHEx_OBProgram+0x11c>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	701a      	strb	r2, [r3, #0]

  return status;
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	2000000c 	.word	0x2000000c

080011e4 <HAL_FLASHEx_OBGetConfig>:
  * @note   The fields pOBInit->WRPArea and pOBInit->PCROPConfig should indicate
  *         which area is requested for the WRP and PCROP, else no information will be returned.
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = (OPTIONBYTE_RDP | OPTIONBYTE_USER);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2206      	movs	r2, #6
 80011f0:	601a      	str	r2, [r3, #0]

#if defined (FLASH_OPTR_DBANK)
  if ((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d00b      	beq.n	8001212 <HAL_FLASHEx_OBGetConfig+0x2e>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d007      	beq.n	8001212 <HAL_FLASHEx_OBGetConfig+0x2e>
      (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
  if ((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 8001206:	2b02      	cmp	r3, #2
 8001208:	d003      	beq.n	8001212 <HAL_FLASHEx_OBGetConfig+0x2e>
      (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	2b04      	cmp	r3, #4
 8001210:	d10f      	bne.n	8001232 <HAL_FLASHEx_OBGetConfig+0x4e>
#else
  if ((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB))
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_WRP;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f043 0201 	orr.w	r2, r3, #1
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	601a      	str	r2, [r3, #0]
    /* Get write protection on the selected area */
    FLASH_OB_GetWRP(pOBInit->WRPArea, &(pOBInit->WRPStartOffset), &(pOBInit->WRPEndOffset));
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6858      	ldr	r0, [r3, #4]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f103 0108 	add.w	r1, r3, #8
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	330c      	adds	r3, #12
 800122c:	461a      	mov	r2, r3
 800122e:	f000 fc21 	bl	8001a74 <FLASH_OB_GetWRP>
  }

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 8001232:	f000 fc71 	bl	8001b18 <FLASH_OB_GetRDP>
 8001236:	4602      	mov	r2, r0
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	611a      	str	r2, [r3, #16]

  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
 800123c:	f000 fc84 	bl	8001b48 <FLASH_OB_GetUser>
 8001240:	4602      	mov	r2, r0
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	619a      	str	r2, [r3, #24]

#if defined (FLASH_OPTR_DBANK)
  if ((pOBInit->PCROPConfig == FLASH_BANK_1) || (pOBInit->PCROPConfig == FLASH_BANK_2))
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d003      	beq.n	8001256 <HAL_FLASHEx_OBGetConfig+0x72>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	69db      	ldr	r3, [r3, #28]
 8001252:	2b02      	cmp	r3, #2
 8001254:	d110      	bne.n	8001278 <HAL_FLASHEx_OBGetConfig+0x94>
#else
  if (pOBInit->PCROPConfig == FLASH_BANK_1)
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_PCROP;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f043 0208 	orr.w	r2, r3, #8
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	601a      	str	r2, [r3, #0]
    /* Get the Proprietary code readout protection */
    FLASH_OB_GetPCROP(&(pOBInit->PCROPConfig), &(pOBInit->PCROPStartAddr), &(pOBInit->PCROPEndAddr));
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f103 001c 	add.w	r0, r3, #28
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f103 0120 	add.w	r1, r3, #32
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	3324      	adds	r3, #36	; 0x24
 8001272:	461a      	mov	r2, r3
 8001274:	f000 fc7c 	bl	8001b70 <FLASH_OB_GetPCROP>
  }

  pOBInit->OptionType |= OPTIONBYTE_BOOT_LOCK;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f043 0210 	orr.w	r2, r3, #16
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	601a      	str	r2, [r3, #0]

  /* Get the boot entry point */
  pOBInit->BootEntryPoint = FLASH_OB_GetBootLock();
 8001284:	f000 fbe8 	bl	8001a58 <FLASH_OB_GetBootLock>
 8001288:	4602      	mov	r2, r0
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Get the securable memory area configuration */
#if defined (FLASH_OPTR_DBANK)
  if ((pOBInit->SecBank == FLASH_BANK_1) || (pOBInit->SecBank == FLASH_BANK_2))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001292:	2b01      	cmp	r3, #1
 8001294:	d003      	beq.n	800129e <HAL_FLASHEx_OBGetConfig+0xba>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800129a:	2b02      	cmp	r3, #2
 800129c:	d10d      	bne.n	80012ba <HAL_FLASHEx_OBGetConfig+0xd6>
#else
  if (pOBInit->SecBank == FLASH_BANK_1)
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_SEC;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f043 0220 	orr.w	r2, r3, #32
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	601a      	str	r2, [r3, #0]
    FLASH_OB_GetSecMem(pOBInit->SecBank, &(pOBInit->SecSize));
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	3330      	adds	r3, #48	; 0x30
 80012b2:	4619      	mov	r1, r3
 80012b4:	4610      	mov	r0, r2
 80012b6:	f000 fbb1 	bl	8001a1c <FLASH_OB_GetSecMem>
  }
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 80012cc:	4b18      	ldr	r3, [pc, #96]	; (8001330 <FLASH_MassErase+0x6c>)
 80012ce:	6a1b      	ldr	r3, [r3, #32]
 80012d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d016      	beq.n	8001306 <FLASH_MassErase+0x42>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d005      	beq.n	80012ee <FLASH_MassErase+0x2a>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80012e2:	4b13      	ldr	r3, [pc, #76]	; (8001330 <FLASH_MassErase+0x6c>)
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	4a12      	ldr	r2, [pc, #72]	; (8001330 <FLASH_MassErase+0x6c>)
 80012e8:	f043 0304 	orr.w	r3, r3, #4
 80012ec:	6153      	str	r3, [r2, #20]
    }

#if defined (FLASH_OPTR_DBANK)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if ((Banks & FLASH_BANK_2) != 0U)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d00e      	beq.n	8001316 <FLASH_MassErase+0x52>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 80012f8:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <FLASH_MassErase+0x6c>)
 80012fa:	695b      	ldr	r3, [r3, #20]
 80012fc:	4a0c      	ldr	r2, [pc, #48]	; (8001330 <FLASH_MassErase+0x6c>)
 80012fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001302:	6153      	str	r3, [r2, #20]
 8001304:	e007      	b.n	8001316 <FLASH_MassErase+0x52>
#endif
  }
#if defined (FLASH_OPTR_DBANK)
  else
  {
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8001306:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <FLASH_MassErase+0x6c>)
 8001308:	695b      	ldr	r3, [r3, #20]
 800130a:	4a09      	ldr	r2, [pc, #36]	; (8001330 <FLASH_MassErase+0x6c>)
 800130c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001310:	f043 0304 	orr.w	r3, r3, #4
 8001314:	6153      	str	r3, [r2, #20]
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001316:	4b06      	ldr	r3, [pc, #24]	; (8001330 <FLASH_MassErase+0x6c>)
 8001318:	695b      	ldr	r3, [r3, #20]
 800131a:	4a05      	ldr	r2, [pc, #20]	; (8001330 <FLASH_MassErase+0x6c>)
 800131c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001320:	6153      	str	r3, [r2, #20]
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	40022000 	.word	0x40022000

08001334 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 800133e:	4b1e      	ldr	r3, [pc, #120]	; (80013b8 <FLASH_PageErase+0x84>)
 8001340:	6a1b      	ldr	r3, [r3, #32]
 8001342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d106      	bne.n	8001358 <FLASH_PageErase+0x24>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800134a:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <FLASH_PageErase+0x84>)
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	4a1a      	ldr	r2, [pc, #104]	; (80013b8 <FLASH_PageErase+0x84>)
 8001350:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001354:	6153      	str	r3, [r2, #20]
 8001356:	e011      	b.n	800137c <FLASH_PageErase+0x48>
  }
  else
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if ((Banks & FLASH_BANK_1) != 0U)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	2b00      	cmp	r3, #0
 8001360:	d006      	beq.n	8001370 <FLASH_PageErase+0x3c>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8001362:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <FLASH_PageErase+0x84>)
 8001364:	695b      	ldr	r3, [r3, #20]
 8001366:	4a14      	ldr	r2, [pc, #80]	; (80013b8 <FLASH_PageErase+0x84>)
 8001368:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800136c:	6153      	str	r3, [r2, #20]
 800136e:	e005      	b.n	800137c <FLASH_PageErase+0x48>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8001370:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <FLASH_PageErase+0x84>)
 8001372:	695b      	ldr	r3, [r3, #20]
 8001374:	4a10      	ldr	r2, [pc, #64]	; (80013b8 <FLASH_PageErase+0x84>)
 8001376:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800137a:	6153      	str	r3, [r2, #20]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800137c:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <FLASH_PageErase+0x84>)
 800137e:	695b      	ldr	r3, [r3, #20]
 8001380:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800138c:	490a      	ldr	r1, [pc, #40]	; (80013b8 <FLASH_PageErase+0x84>)
 800138e:	4313      	orrs	r3, r2
 8001390:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001392:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <FLASH_PageErase+0x84>)
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	4a08      	ldr	r2, [pc, #32]	; (80013b8 <FLASH_PageErase+0x84>)
 8001398:	f043 0302 	orr.w	r3, r3, #2
 800139c:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <FLASH_PageErase+0x84>)
 80013a0:	695b      	ldr	r3, [r3, #20]
 80013a2:	4a05      	ldr	r2, [pc, #20]	; (80013b8 <FLASH_PageErase+0x84>)
 80013a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013a8:	6153      	str	r3, [r2, #20]
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	40022000 	.word	0x40022000

080013bc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80013c2:	4b1e      	ldr	r3, [pc, #120]	; (800143c <FLASH_FlushCaches+0x80>)
 80013c4:	7f1b      	ldrb	r3, [r3, #28]
 80013c6:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d002      	beq.n	80013d4 <FLASH_FlushCaches+0x18>
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	2b03      	cmp	r3, #3
 80013d2:	d111      	bne.n	80013f8 <FLASH_FlushCaches+0x3c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80013d4:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <FLASH_FlushCaches+0x84>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a19      	ldr	r2, [pc, #100]	; (8001440 <FLASH_FlushCaches+0x84>)
 80013da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013de:	6013      	str	r3, [r2, #0]
 80013e0:	4b17      	ldr	r3, [pc, #92]	; (8001440 <FLASH_FlushCaches+0x84>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a16      	ldr	r2, [pc, #88]	; (8001440 <FLASH_FlushCaches+0x84>)
 80013e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80013ea:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013ec:	4b14      	ldr	r3, [pc, #80]	; (8001440 <FLASH_FlushCaches+0x84>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a13      	ldr	r2, [pc, #76]	; (8001440 <FLASH_FlushCaches+0x84>)
 80013f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013f6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d002      	beq.n	8001404 <FLASH_FlushCaches+0x48>
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	2b03      	cmp	r3, #3
 8001402:	d111      	bne.n	8001428 <FLASH_FlushCaches+0x6c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001404:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <FLASH_FlushCaches+0x84>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a0d      	ldr	r2, [pc, #52]	; (8001440 <FLASH_FlushCaches+0x84>)
 800140a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800140e:	6013      	str	r3, [r2, #0]
 8001410:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <FLASH_FlushCaches+0x84>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a0a      	ldr	r2, [pc, #40]	; (8001440 <FLASH_FlushCaches+0x84>)
 8001416:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800141a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800141c:	4b08      	ldr	r3, [pc, #32]	; (8001440 <FLASH_FlushCaches+0x84>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a07      	ldr	r2, [pc, #28]	; (8001440 <FLASH_FlushCaches+0x84>)
 8001422:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001426:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001428:	4b04      	ldr	r3, [pc, #16]	; (800143c <FLASH_FlushCaches+0x80>)
 800142a:	2200      	movs	r2, #0
 800142c:	771a      	strb	r2, [r3, #28]
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	2000000c 	.word	0x2000000c
 8001440:	40022000 	.word	0x40022000

08001444 <FLASH_OB_WRPConfig>:
  * @param  WRDPEndOffset specifies the end page of the write protected area.
  *         This parameter can be page number between WRPStartOffset and (max number of pages in the bank - 1).
  * @retval HAL_Status
  */
static HAL_StatusTypeDef FLASH_OB_WRPConfig(uint32_t WRPArea, uint32_t WRPStartOffset, uint32_t WRDPEndOffset)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_WRPAREA(WRPArea));
  assert_param(IS_FLASH_PAGE(WRPStartOffset));
  assert_param(IS_FLASH_PAGE(WRDPEndOffset));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001450:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001454:	f7ff fd12 	bl	8000e7c <FLASH_WaitForLastOperation>
 8001458:	4603      	mov	r3, r0
 800145a:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800145c:	7dfb      	ldrb	r3, [r7, #23]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d132      	bne.n	80014c8 <FLASH_OB_WRPConfig+0x84>
  {
    /* Configure the write protected area */
    if (WRPArea == OB_WRPAREA_BANK1_AREAA)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d106      	bne.n	8001476 <FLASH_OB_WRPConfig+0x32>
    {
      FLASH->WRP1AR = ((WRDPEndOffset << FLASH_WRP1AR_WRP1A_END_Pos) | WRPStartOffset);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	041a      	lsls	r2, r3, #16
 800146c:	4919      	ldr	r1, [pc, #100]	; (80014d4 <FLASH_OB_WRPConfig+0x90>)
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	4313      	orrs	r3, r2
 8001472:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001474:	e01c      	b.n	80014b0 <FLASH_OB_WRPConfig+0x6c>
    }
    else if (WRPArea == OB_WRPAREA_BANK1_AREAB)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d106      	bne.n	800148a <FLASH_OB_WRPConfig+0x46>
    {
      FLASH->WRP1BR = ((WRDPEndOffset << FLASH_WRP1BR_WRP1B_END_Pos) | WRPStartOffset);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	041a      	lsls	r2, r3, #16
 8001480:	4914      	ldr	r1, [pc, #80]	; (80014d4 <FLASH_OB_WRPConfig+0x90>)
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	4313      	orrs	r3, r2
 8001486:	630b      	str	r3, [r1, #48]	; 0x30
 8001488:	e012      	b.n	80014b0 <FLASH_OB_WRPConfig+0x6c>
    }
#if defined (FLASH_OPTR_DBANK)
    else if (WRPArea == OB_WRPAREA_BANK2_AREAA)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2b02      	cmp	r3, #2
 800148e:	d106      	bne.n	800149e <FLASH_OB_WRPConfig+0x5a>
    {
      FLASH->WRP2AR = ((WRDPEndOffset << FLASH_WRP2AR_WRP2A_END_Pos) | WRPStartOffset);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	041a      	lsls	r2, r3, #16
 8001494:	490f      	ldr	r1, [pc, #60]	; (80014d4 <FLASH_OB_WRPConfig+0x90>)
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	4313      	orrs	r3, r2
 800149a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800149c:	e008      	b.n	80014b0 <FLASH_OB_WRPConfig+0x6c>
    }
    else if (WRPArea == OB_WRPAREA_BANK2_AREAB)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2b04      	cmp	r3, #4
 80014a2:	d105      	bne.n	80014b0 <FLASH_OB_WRPConfig+0x6c>
    {
      FLASH->WRP2BR = ((WRDPEndOffset << FLASH_WRP2BR_WRP2B_END_Pos) | WRPStartOffset);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	041a      	lsls	r2, r3, #16
 80014a8:	490a      	ldr	r1, [pc, #40]	; (80014d4 <FLASH_OB_WRPConfig+0x90>)
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	650b      	str	r3, [r1, #80]	; 0x50
    {
      /* Nothing to do */
    }

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 80014b0:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <FLASH_OB_WRPConfig+0x90>)
 80014b2:	695b      	ldr	r3, [r3, #20]
 80014b4:	4a07      	ldr	r2, [pc, #28]	; (80014d4 <FLASH_OB_WRPConfig+0x90>)
 80014b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ba:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80014bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014c0:	f7ff fcdc 	bl	8000e7c <FLASH_WaitForLastOperation>
 80014c4:	4603      	mov	r3, r0
 80014c6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80014c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40022000 	.word	0x40022000

080014d8 <FLASH_OB_RDPConfig>:
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  *
  * @retval HAL_Status
  */
static HAL_StatusTypeDef FLASH_OB_RDPConfig(uint32_t RDPLevel)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80014e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014e4:	f7ff fcca 	bl	8000e7c <FLASH_WaitForLastOperation>
 80014e8:	4603      	mov	r3, r0
 80014ea:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d113      	bne.n	800151a <FLASH_OB_RDPConfig+0x42>
  {
    /* Configure the RDP level in the option bytes register */
    MODIFY_REG(FLASH->OPTR, FLASH_OPTR_RDP, RDPLevel);
 80014f2:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <FLASH_OB_RDPConfig+0x4c>)
 80014f4:	6a1b      	ldr	r3, [r3, #32]
 80014f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80014fa:	490a      	ldr	r1, [pc, #40]	; (8001524 <FLASH_OB_RDPConfig+0x4c>)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4313      	orrs	r3, r2
 8001500:	620b      	str	r3, [r1, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8001502:	4b08      	ldr	r3, [pc, #32]	; (8001524 <FLASH_OB_RDPConfig+0x4c>)
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	4a07      	ldr	r2, [pc, #28]	; (8001524 <FLASH_OB_RDPConfig+0x4c>)
 8001508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800150c:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800150e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001512:	f7ff fcb3 	bl	8000e7c <FLASH_WaitForLastOperation>
 8001516:	4603      	mov	r3, r0
 8001518:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800151a:	7bfb      	ldrb	r3, [r7, #15]
}
 800151c:	4618      	mov	r0, r3
 800151e:	3710      	adds	r7, #16
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40022000 	.word	0x40022000

08001528 <FLASH_OB_UserConfig>:
  *         @ref FLASH_OB_USER_NRST_MODE, @ref FLASH_OB_USER_INTERNAL_RESET_HOLDER
  * @note   (*) availability depends on devices
  * @retval HAL_Status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint32_t UserType, uint32_t UserConfig)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  uint32_t optr_reg_val = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	617b      	str	r3, [r7, #20]
  uint32_t optr_reg_mask = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_OB_USER_TYPE(UserType));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800153a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800153e:	f7ff fc9d 	bl	8000e7c <FLASH_WaitForLastOperation>
 8001542:	4603      	mov	r3, r0
 8001544:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001546:	7bfb      	ldrb	r3, [r7, #15]
 8001548:	2b00      	cmp	r3, #0
 800154a:	f040 8105 	bne.w	8001758 <FLASH_OB_UserConfig+0x230>
  {
    if ((UserType & OB_USER_BOR_LEV) != 0U)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	2b00      	cmp	r3, #0
 8001556:	d009      	beq.n	800156c <FLASH_OB_UserConfig+0x44>
    {
      /* BOR level option byte should be modified */
      assert_param(IS_OB_USER_BOR_LEVEL(UserConfig & FLASH_OPTR_BOR_LEV));

      /* Set value and mask for BOR level option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BOR_LEV);
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800155e:	697a      	ldr	r2, [r7, #20]
 8001560:	4313      	orrs	r3, r2
 8001562:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_BOR_LEV;
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800156a:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_nRST_STOP) != 0U)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d009      	beq.n	800158a <FLASH_OB_UserConfig+0x62>
    {
      /* nRST_STOP option byte should be modified */
      assert_param(IS_OB_USER_STOP(UserConfig & FLASH_OPTR_nRST_STOP));

      /* Set value and mask for nRST_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STOP);
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800157c:	697a      	ldr	r2, [r7, #20]
 800157e:	4313      	orrs	r3, r2
 8001580:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_STOP;
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001588:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_nRST_STDBY) != 0U)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f003 0304 	and.w	r3, r3, #4
 8001590:	2b00      	cmp	r3, #0
 8001592:	d009      	beq.n	80015a8 <FLASH_OB_UserConfig+0x80>
    {
      /* nRST_STDBY option byte should be modified */
      assert_param(IS_OB_USER_STANDBY(UserConfig & FLASH_OPTR_nRST_STDBY));

      /* Set value and mask for nRST_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STDBY);
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800159a:	697a      	ldr	r2, [r7, #20]
 800159c:	4313      	orrs	r3, r2
 800159e:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_STDBY;
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015a6:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_nRST_SHDW) != 0U)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d009      	beq.n	80015c6 <FLASH_OB_UserConfig+0x9e>
    {
      /* nRST_SHDW option byte should be modified */
      assert_param(IS_OB_USER_SHUTDOWN(UserConfig & FLASH_OPTR_nRST_SHDW));

      /* Set value and mask for nRST_SHDW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_SHDW);
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015b8:	697a      	ldr	r2, [r7, #20]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_SHDW;
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c4:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_IWDG_SW) != 0U)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f003 0308 	and.w	r3, r3, #8
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d009      	beq.n	80015e4 <FLASH_OB_UserConfig+0xbc>
    {
      /* IWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_IWDG(UserConfig & FLASH_OPTR_IWDG_SW));

      /* Set value and mask for IWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_SW);
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015d6:	697a      	ldr	r2, [r7, #20]
 80015d8:	4313      	orrs	r3, r2
 80015da:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_SW;
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e2:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_IWDG_STOP) != 0U)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f003 0310 	and.w	r3, r3, #16
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d009      	beq.n	8001602 <FLASH_OB_UserConfig+0xda>
    {
      /* IWDG_STOP option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STOP(UserConfig & FLASH_OPTR_IWDG_STOP));

      /* Set value and mask for IWDG_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STOP);
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f4:	697a      	ldr	r2, [r7, #20]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_STOP;
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001600:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_IWDG_STDBY) != 0U)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f003 0320 	and.w	r3, r3, #32
 8001608:	2b00      	cmp	r3, #0
 800160a:	d009      	beq.n	8001620 <FLASH_OB_UserConfig+0xf8>
    {
      /* IWDG_STDBY option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STDBY(UserConfig & FLASH_OPTR_IWDG_STDBY));

      /* Set value and mask for IWDG_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STDBY);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001612:	697a      	ldr	r2, [r7, #20]
 8001614:	4313      	orrs	r3, r2
 8001616:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_STDBY;
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800161e:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_WWDG_SW) != 0U)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001626:	2b00      	cmp	r3, #0
 8001628:	d009      	beq.n	800163e <FLASH_OB_UserConfig+0x116>
    {
      /* WWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_WWDG(UserConfig & FLASH_OPTR_WWDG_SW));

      /* Set value and mask for WWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_WWDG_SW);
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001630:	697a      	ldr	r2, [r7, #20]
 8001632:	4313      	orrs	r3, r2
 8001634:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_WWDG_SW;
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800163c:	613b      	str	r3, [r7, #16]
    }

#if defined (FLASH_OPTR_BFB2)
    if ((UserType & OB_USER_BFB2) != 0U)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001644:	2b00      	cmp	r3, #0
 8001646:	d009      	beq.n	800165c <FLASH_OB_UserConfig+0x134>
    {
      /* BFB2 option byte should be modified */
      assert_param(IS_OB_USER_BFB2(UserConfig & FLASH_OPTR_BFB2));

      /* Set value and mask for BFB2 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BFB2);
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800164e:	697a      	ldr	r2, [r7, #20]
 8001650:	4313      	orrs	r3, r2
 8001652:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_BFB2;
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800165a:	613b      	str	r3, [r7, #16]
    }
#endif

    if ((UserType & OB_USER_nBOOT1) != 0U)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001662:	2b00      	cmp	r3, #0
 8001664:	d009      	beq.n	800167a <FLASH_OB_UserConfig+0x152>
    {
      /* nBOOT1 option byte should be modified */
      assert_param(IS_OB_USER_BOOT1(UserConfig & FLASH_OPTR_nBOOT1));

      /* Set value and mask for nBOOT1 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nBOOT1);
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800166c:	697a      	ldr	r2, [r7, #20]
 800166e:	4313      	orrs	r3, r2
 8001670:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nBOOT1;
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001678:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_SRAM_PE) != 0U)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001680:	2b00      	cmp	r3, #0
 8001682:	d009      	beq.n	8001698 <FLASH_OB_UserConfig+0x170>
    {
      /* SRAM_PE option byte should be modified */
      assert_param(IS_OB_USER_SRAM_PARITY(UserConfig & FLASH_OPTR_SRAM_PE));

      /* Set value and mask for SRAM_PE option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM_PE);
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800168a:	697a      	ldr	r2, [r7, #20]
 800168c:	4313      	orrs	r3, r2
 800168e:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_SRAM_PE;
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001696:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_CCMSRAM_RST) != 0U)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d009      	beq.n	80016b6 <FLASH_OB_UserConfig+0x18e>
    {
      /* CCMSRAM_RST option byte should be modified */
      assert_param(IS_OB_USER_CCMSRAM_RST(UserConfig & FLASH_OPTR_CCMSRAM_RST));

      /* Set value and mask for CCMSRAM_RST option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_CCMSRAM_RST);
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a8:	697a      	ldr	r2, [r7, #20]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_CCMSRAM_RST;
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016b4:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_nSWBOOT0) != 0U)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d009      	beq.n	80016d4 <FLASH_OB_UserConfig+0x1ac>
    {
      /* nSWBOOT0 option byte should be modified */
      assert_param(IS_OB_USER_SWBOOT0(UserConfig & FLASH_OPTR_nSWBOOT0));

      /* Set value and mask for nSWBOOT0 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nSWBOOT0);
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nSWBOOT0;
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80016d2:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_nBOOT0) != 0U)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d009      	beq.n	80016f2 <FLASH_OB_UserConfig+0x1ca>
    {
      /* nBOOT0 option byte should be modified */
      assert_param(IS_OB_USER_BOOT0(UserConfig & FLASH_OPTR_nBOOT0));

      /* Set value and mask for nBOOT0 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nBOOT0);
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80016e4:	697a      	ldr	r2, [r7, #20]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nBOOT0;
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80016f0:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_NRST_MODE) != 0U)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d009      	beq.n	8001710 <FLASH_OB_UserConfig+0x1e8>
    {
      /* Reset Configuration option byte should be modified */
      assert_param(IS_OB_USER_NRST_MODE(UserConfig & FLASH_OPTR_NRST_MODE));

      /* Set value and mask for Reset Configuration option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_NRST_MODE);
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001702:	697a      	ldr	r2, [r7, #20]
 8001704:	4313      	orrs	r3, r2
 8001706:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_NRST_MODE;
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 800170e:	613b      	str	r3, [r7, #16]
    }

    if ((UserType & OB_USER_IRHEN) != 0U)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d009      	beq.n	800172e <FLASH_OB_UserConfig+0x206>
    {
      /* IRH option byte should be modified */
      assert_param(IS_OB_USER_IRHEN(UserConfig & FLASH_OPTR_IRHEN));

      /* Set value and mask for IRH option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IRHEN);
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001720:	697a      	ldr	r2, [r7, #20]
 8001722:	4313      	orrs	r3, r2
 8001724:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IRHEN;
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800172c:	613b      	str	r3, [r7, #16]
    }

    /* Configure the option bytes register */
    MODIFY_REG(FLASH->OPTR, optr_reg_mask, optr_reg_val);
 800172e:	4b0d      	ldr	r3, [pc, #52]	; (8001764 <FLASH_OB_UserConfig+0x23c>)
 8001730:	6a1a      	ldr	r2, [r3, #32]
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	43db      	mvns	r3, r3
 8001736:	401a      	ands	r2, r3
 8001738:	490a      	ldr	r1, [pc, #40]	; (8001764 <FLASH_OB_UserConfig+0x23c>)
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	4313      	orrs	r3, r2
 800173e:	620b      	str	r3, [r1, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <FLASH_OB_UserConfig+0x23c>)
 8001742:	695b      	ldr	r3, [r3, #20]
 8001744:	4a07      	ldr	r2, [pc, #28]	; (8001764 <FLASH_OB_UserConfig+0x23c>)
 8001746:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800174a:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800174c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001750:	f7ff fb94 	bl	8000e7c <FLASH_WaitForLastOperation>
 8001754:	4603      	mov	r3, r0
 8001756:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8001758:	7bfb      	ldrb	r3, [r7, #15]
}
 800175a:	4618      	mov	r0, r3
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40022000 	.word	0x40022000

08001768 <FLASH_OB_PCROPConfig>:
  * @param  PCROPEndAddr specifies the end address of the Proprietary code readout protection.
  *         This parameter can be an address between PCROPStartAddr and end of the bank.
  * @retval HAL_Status
  */
static HAL_StatusTypeDef FLASH_OB_PCROPConfig(uint32_t PCROPConfig, uint32_t PCROPStartAddr, uint32_t PCROPEndAddr)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b088      	sub	sp, #32
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_PCROP_RDP(PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPStartAddr));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPEndAddr));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001774:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001778:	f7ff fb80 	bl	8000e7c <FLASH_WaitForLastOperation>
 800177c:	4603      	mov	r3, r0
 800177e:	77fb      	strb	r3, [r7, #31]

  if (status == HAL_OK)
 8001780:	7ffb      	ldrb	r3, [r7, #31]
 8001782:	2b00      	cmp	r3, #0
 8001784:	f040 80da 	bne.w	800193c <FLASH_OB_PCROPConfig+0x1d4>
  {
#if defined (FLASH_OPTR_DBANK)
    /* Get the information about the bank swapping */
    if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 8001788:	4b6f      	ldr	r3, [pc, #444]	; (8001948 <FLASH_OB_PCROPConfig+0x1e0>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001790:	2b00      	cmp	r3, #0
 8001792:	d114      	bne.n	80017be <FLASH_OB_PCROPConfig+0x56>
    {
      bank1_addr = FLASH_BASE;
 8001794:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001798:	61bb      	str	r3, [r7, #24]
      bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 800179a:	4b6c      	ldr	r3, [pc, #432]	; (800194c <FLASH_OB_PCROPConfig+0x1e4>)
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d008      	beq.n	80017b8 <FLASH_OB_PCROPConfig+0x50>
 80017a6:	4b69      	ldr	r3, [pc, #420]	; (800194c <FLASH_OB_PCROPConfig+0x1e4>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	029b      	lsls	r3, r3, #10
 80017ac:	085a      	lsrs	r2, r3, #1
 80017ae:	4b68      	ldr	r3, [pc, #416]	; (8001950 <FLASH_OB_PCROPConfig+0x1e8>)
 80017b0:	4013      	ands	r3, r2
 80017b2:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80017b6:	e000      	b.n	80017ba <FLASH_OB_PCROPConfig+0x52>
 80017b8:	4b66      	ldr	r3, [pc, #408]	; (8001954 <FLASH_OB_PCROPConfig+0x1ec>)
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	e013      	b.n	80017e6 <FLASH_OB_PCROPConfig+0x7e>
    }
    else
    {
      bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 80017be:	4b63      	ldr	r3, [pc, #396]	; (800194c <FLASH_OB_PCROPConfig+0x1e4>)
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d008      	beq.n	80017dc <FLASH_OB_PCROPConfig+0x74>
 80017ca:	4b60      	ldr	r3, [pc, #384]	; (800194c <FLASH_OB_PCROPConfig+0x1e4>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	029b      	lsls	r3, r3, #10
 80017d0:	085a      	lsrs	r2, r3, #1
 80017d2:	4b5f      	ldr	r3, [pc, #380]	; (8001950 <FLASH_OB_PCROPConfig+0x1e8>)
 80017d4:	4013      	ands	r3, r2
 80017d6:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80017da:	e000      	b.n	80017de <FLASH_OB_PCROPConfig+0x76>
 80017dc:	4b5d      	ldr	r3, [pc, #372]	; (8001954 <FLASH_OB_PCROPConfig+0x1ec>)
 80017de:	61bb      	str	r3, [r7, #24]
      bank2_addr = FLASH_BASE;
 80017e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80017e4:	617b      	str	r3, [r7, #20]
#else
    bank1_addr = FLASH_BASE;
#endif

#if defined (FLASH_OPTR_DBANK)
    if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 80017e6:	4b5c      	ldr	r3, [pc, #368]	; (8001958 <FLASH_OB_PCROPConfig+0x1f0>)
 80017e8:	6a1b      	ldr	r3, [r3, #32]
 80017ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d147      	bne.n	8001882 <FLASH_OB_PCROPConfig+0x11a>
    {
      /* Configure the Proprietary code readout protection */
      if ((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_1)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f003 0303 	and.w	r3, r3, #3
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d11e      	bne.n	800183a <FLASH_OB_PCROPConfig+0xd2>
      {
        reg_value = ((PCROPStartAddr - FLASH_BASE) >> 4);
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001802:	091b      	lsrs	r3, r3, #4
 8001804:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1SR, FLASH_PCROP1SR_PCROP1_STRT, reg_value);
 8001806:	4b54      	ldr	r3, [pc, #336]	; (8001958 <FLASH_OB_PCROPConfig+0x1f0>)
 8001808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800180e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001812:	4951      	ldr	r1, [pc, #324]	; (8001958 <FLASH_OB_PCROPConfig+0x1f0>)
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	4313      	orrs	r3, r2
 8001818:	624b      	str	r3, [r1, #36]	; 0x24

        reg_value = ((PCROPEndAddr - FLASH_BASE) >> 4);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001820:	091b      	lsrs	r3, r3, #4
 8001822:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP1_END, reg_value);
 8001824:	4b4c      	ldr	r3, [pc, #304]	; (8001958 <FLASH_OB_PCROPConfig+0x1f0>)
 8001826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001828:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800182c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001830:	4949      	ldr	r1, [pc, #292]	; (8001958 <FLASH_OB_PCROPConfig+0x1f0>)
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	4313      	orrs	r3, r2
 8001836:	628b      	str	r3, [r1, #40]	; 0x28
 8001838:	e06a      	b.n	8001910 <FLASH_OB_PCROPConfig+0x1a8>
      }
      else if ((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_2)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f003 0303 	and.w	r3, r3, #3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d165      	bne.n	8001910 <FLASH_OB_PCROPConfig+0x1a8>
      {
        reg_value = ((PCROPStartAddr - FLASH_BASE) >> 4);
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800184a:	091b      	lsrs	r3, r3, #4
 800184c:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2SR, FLASH_PCROP2SR_PCROP2_STRT, reg_value);
 800184e:	4b42      	ldr	r3, [pc, #264]	; (8001958 <FLASH_OB_PCROPConfig+0x1f0>)
 8001850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001852:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001856:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800185a:	493f      	ldr	r1, [pc, #252]	; (8001958 <FLASH_OB_PCROPConfig+0x1f0>)
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4313      	orrs	r3, r2
 8001860:	644b      	str	r3, [r1, #68]	; 0x44

        reg_value = ((PCROPEndAddr - FLASH_BASE) >> 4);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001868:	091b      	lsrs	r3, r3, #4
 800186a:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2ER, FLASH_PCROP2ER_PCROP2_END, reg_value);
 800186c:	4b3a      	ldr	r3, [pc, #232]	; (8001958 <FLASH_OB_PCROPConfig+0x1f0>)
 800186e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001870:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001874:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001878:	4937      	ldr	r1, [pc, #220]	; (8001958 <FLASH_OB_PCROPConfig+0x1f0>)
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	4313      	orrs	r3, r2
 800187e:	648b      	str	r3, [r1, #72]	; 0x48
 8001880:	e046      	b.n	8001910 <FLASH_OB_PCROPConfig+0x1a8>
    }
    else
#endif
    {
      /* Configure the Proprietary code readout protection */
      if ((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_1)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f003 0303 	and.w	r3, r3, #3
 8001888:	2b01      	cmp	r3, #1
 800188a:	d11e      	bne.n	80018ca <FLASH_OB_PCROPConfig+0x162>
      {
        reg_value = ((PCROPStartAddr - bank1_addr) >> 3);
 800188c:	68ba      	ldr	r2, [r7, #8]
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	08db      	lsrs	r3, r3, #3
 8001894:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1SR, FLASH_PCROP1SR_PCROP1_STRT, reg_value);
 8001896:	4b30      	ldr	r3, [pc, #192]	; (8001958 <FLASH_OB_PCROPConfig+0x1f0>)
 8001898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800189e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80018a2:	492d      	ldr	r1, [pc, #180]	; (8001958 <FLASH_OB_PCROPConfig+0x1f0>)
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	624b      	str	r3, [r1, #36]	; 0x24

        reg_value = ((PCROPEndAddr - bank1_addr) >> 3);
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	08db      	lsrs	r3, r3, #3
 80018b2:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP1_END, reg_value);
 80018b4:	4b28      	ldr	r3, [pc, #160]	; (8001958 <FLASH_OB_PCROPConfig+0x1f0>)
 80018b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80018bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80018c0:	4925      	ldr	r1, [pc, #148]	; (8001958 <FLASH_OB_PCROPConfig+0x1f0>)
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	628b      	str	r3, [r1, #40]	; 0x28
 80018c8:	e022      	b.n	8001910 <FLASH_OB_PCROPConfig+0x1a8>
      }
#if defined (FLASH_OPTR_DBANK)
      else if ((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_2)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f003 0303 	and.w	r3, r3, #3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d11d      	bne.n	8001910 <FLASH_OB_PCROPConfig+0x1a8>
      {
        reg_value = ((PCROPStartAddr - bank2_addr) >> 3);
 80018d4:	68ba      	ldr	r2, [r7, #8]
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	08db      	lsrs	r3, r3, #3
 80018dc:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2SR, FLASH_PCROP2SR_PCROP2_STRT, reg_value);
 80018de:	4b1e      	ldr	r3, [pc, #120]	; (8001958 <FLASH_OB_PCROPConfig+0x1f0>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80018e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80018ea:	491b      	ldr	r1, [pc, #108]	; (8001958 <FLASH_OB_PCROPConfig+0x1f0>)
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	644b      	str	r3, [r1, #68]	; 0x44

        reg_value = ((PCROPEndAddr - bank2_addr) >> 3);
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	08db      	lsrs	r3, r3, #3
 80018fa:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2ER, FLASH_PCROP2ER_PCROP2_END, reg_value);
 80018fc:	4b16      	ldr	r3, [pc, #88]	; (8001958 <FLASH_OB_PCROPConfig+0x1f0>)
 80018fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001900:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001904:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001908:	4913      	ldr	r1, [pc, #76]	; (8001958 <FLASH_OB_PCROPConfig+0x1f0>)
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	4313      	orrs	r3, r2
 800190e:	648b      	str	r3, [r1, #72]	; 0x48
      {
        /* Nothing to do */
      }
    }

    MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP_RDP, (PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
 8001910:	4b11      	ldr	r3, [pc, #68]	; (8001958 <FLASH_OB_PCROPConfig+0x1f0>)
 8001912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001914:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800191e:	490e      	ldr	r1, [pc, #56]	; (8001958 <FLASH_OB_PCROPConfig+0x1f0>)
 8001920:	4313      	orrs	r3, r2
 8001922:	628b      	str	r3, [r1, #40]	; 0x28

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8001924:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <FLASH_OB_PCROPConfig+0x1f0>)
 8001926:	695b      	ldr	r3, [r3, #20]
 8001928:	4a0b      	ldr	r2, [pc, #44]	; (8001958 <FLASH_OB_PCROPConfig+0x1f0>)
 800192a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800192e:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001930:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001934:	f7ff faa2 	bl	8000e7c <FLASH_WaitForLastOperation>
 8001938:	4603      	mov	r3, r0
 800193a:	77fb      	strb	r3, [r7, #31]
  }

  return status;
 800193c:	7ffb      	ldrb	r3, [r7, #31]
}
 800193e:	4618      	mov	r0, r3
 8001940:	3720      	adds	r7, #32
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40010000 	.word	0x40010000
 800194c:	1fff75e0 	.word	0x1fff75e0
 8001950:	01fffe00 	.word	0x01fffe00
 8001954:	08040000 	.word	0x08040000
 8001958:	40022000 	.word	0x40022000

0800195c <FLASH_OB_SecMemConfig>:
  *         starting from first page of the bank.
  *         This parameter can be page number between 0 and (max number of pages in the bank - 1)
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_SecMemConfig(uint32_t SecBank, uint32_t SecSize)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK_EXCLUSIVE(SecBank));
  assert_param(IS_OB_SECMEM_SIZE(SecSize));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001966:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800196a:	f7ff fa87 	bl	8000e7c <FLASH_WaitForLastOperation>
 800196e:	4603      	mov	r3, r0
 8001970:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001972:	7bfb      	ldrb	r3, [r7, #15]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d122      	bne.n	80019be <FLASH_OB_SecMemConfig+0x62>
  {
    /* Configure the write protected area */
    if (SecBank == FLASH_BANK_1)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d108      	bne.n	8001990 <FLASH_OB_SecMemConfig+0x34>
    {
      MODIFY_REG(FLASH->SEC1R, FLASH_SEC1R_SEC_SIZE1, SecSize);
 800197e:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <FLASH_OB_SecMemConfig+0x6c>)
 8001980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001982:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8001986:	4910      	ldr	r1, [pc, #64]	; (80019c8 <FLASH_OB_SecMemConfig+0x6c>)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	4313      	orrs	r3, r2
 800198c:	670b      	str	r3, [r1, #112]	; 0x70
 800198e:	e00a      	b.n	80019a6 <FLASH_OB_SecMemConfig+0x4a>
    }
#if defined (FLASH_OPTR_DBANK)
    else if (SecBank == FLASH_BANK_2)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2b02      	cmp	r3, #2
 8001994:	d107      	bne.n	80019a6 <FLASH_OB_SecMemConfig+0x4a>
    {
      MODIFY_REG(FLASH->SEC2R, FLASH_SEC2R_SEC_SIZE2, SecSize);
 8001996:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <FLASH_OB_SecMemConfig+0x6c>)
 8001998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800199a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800199e:	490a      	ldr	r1, [pc, #40]	; (80019c8 <FLASH_OB_SecMemConfig+0x6c>)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	674b      	str	r3, [r1, #116]	; 0x74
      /* Nothing to do */
    }
#endif

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 80019a6:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <FLASH_OB_SecMemConfig+0x6c>)
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	4a07      	ldr	r2, [pc, #28]	; (80019c8 <FLASH_OB_SecMemConfig+0x6c>)
 80019ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b0:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80019b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019b6:	f7ff fa61 	bl	8000e7c <FLASH_WaitForLastOperation>
 80019ba:	4603      	mov	r3, r0
 80019bc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80019be:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40022000 	.word	0x40022000

080019cc <FLASH_OB_BootLockConfig>:
  *            @arg OB_BOOT_LOCK_DISABLE: Disable Boot Lock
  *
  * @retval HAL_Status
  */
static HAL_StatusTypeDef FLASH_OB_BootLockConfig(uint32_t BootLockConfig)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OB_BOOT_LOCK(BootLockConfig));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80019d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019d8:	f7ff fa50 	bl	8000e7c <FLASH_WaitForLastOperation>
 80019dc:	4603      	mov	r3, r0
 80019de:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80019e0:	7bfb      	ldrb	r3, [r7, #15]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d113      	bne.n	8001a0e <FLASH_OB_BootLockConfig+0x42>
  {
    MODIFY_REG(FLASH->SEC1R, FLASH_SEC1R_BOOT_LOCK, BootLockConfig);
 80019e6:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <FLASH_OB_BootLockConfig+0x4c>)
 80019e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80019ee:	490a      	ldr	r1, [pc, #40]	; (8001a18 <FLASH_OB_BootLockConfig+0x4c>)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	670b      	str	r3, [r1, #112]	; 0x70

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 80019f6:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <FLASH_OB_BootLockConfig+0x4c>)
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	4a07      	ldr	r2, [pc, #28]	; (8001a18 <FLASH_OB_BootLockConfig+0x4c>)
 80019fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a00:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001a02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a06:	f7ff fa39 	bl	8000e7c <FLASH_WaitForLastOperation>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3710      	adds	r7, #16
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40022000 	.word	0x40022000

08001a1c <FLASH_OB_GetSecMem>:
  * @param[out]  SecSize specifies the number of pages used in the securable
                 memory area of the bank.
  * @retval None
  */
static void FLASH_OB_GetSecMem(uint32_t SecBank, uint32_t *SecSize)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  /* Get the configuration of the securable memory area */
  if (SecBank == FLASH_BANK_1)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d105      	bne.n	8001a38 <FLASH_OB_GetSecMem+0x1c>
  {
    *SecSize = READ_BIT(FLASH->SEC1R, FLASH_SEC1R_SEC_SIZE1);
 8001a2c:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <FLASH_OB_GetSecMem+0x38>)
 8001a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }
#endif
}
 8001a36:	e007      	b.n	8001a48 <FLASH_OB_GetSecMem+0x2c>
  else if (SecBank == FLASH_BANK_2)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d104      	bne.n	8001a48 <FLASH_OB_GetSecMem+0x2c>
    *SecSize = READ_BIT(FLASH->SEC2R, FLASH_SEC2R_SEC_SIZE2);
 8001a3e:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <FLASH_OB_GetSecMem+0x38>)
 8001a40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	601a      	str	r2, [r3, #0]
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	40022000 	.word	0x40022000

08001a58 <FLASH_OB_GetBootLock>:
  *         This return value can be one of the following values:
  *            @arg OB_BOOT_LOCK_ENABLE: Boot lock enabled
  *            @arg OB_BOOT_LOCK_DISABLE: Boot lock disabled
  */
static uint32_t FLASH_OB_GetBootLock(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  return (READ_REG(FLASH->SEC1R) & FLASH_SEC1R_BOOT_LOCK);
 8001a5c:	4b04      	ldr	r3, [pc, #16]	; (8001a70 <FLASH_OB_GetBootLock+0x18>)
 8001a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	40022000 	.word	0x40022000

08001a74 <FLASH_OB_GetWRP>:
  * @param[out]  WRDPEndOffset specifies the address where to copied the end page of
  *              the write protected area.
  * @retval None
  */
static void FLASH_OB_GetWRP(uint32_t WRPArea, uint32_t *WRPStartOffset, uint32_t *WRDPEndOffset)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
  /* Get the configuration of the write protected area */
  if (WRPArea == OB_WRPAREA_BANK1_AREAA)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10d      	bne.n	8001aa2 <FLASH_OB_GetWRP+0x2e>
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
 8001a86:	4b23      	ldr	r3, [pc, #140]	; (8001b14 <FLASH_OB_GetWRP+0xa0>)
 8001a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> FLASH_WRP1AR_WRP1A_END_Pos);
 8001a92:	4b20      	ldr	r3, [pc, #128]	; (8001b14 <FLASH_OB_GetWRP+0xa0>)
 8001a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a96:	0c1b      	lsrs	r3, r3, #16
 8001a98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	601a      	str	r2, [r3, #0]
#endif
  else
  {
    /* Nothing to do */
  }
}
 8001aa0:	e031      	b.n	8001b06 <FLASH_OB_GetWRP+0x92>
  else if (WRPArea == OB_WRPAREA_BANK1_AREAB)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d10d      	bne.n	8001ac4 <FLASH_OB_GetWRP+0x50>
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 8001aa8:	4b1a      	ldr	r3, [pc, #104]	; (8001b14 <FLASH_OB_GetWRP+0xa0>)
 8001aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> FLASH_WRP1BR_WRP1B_END_Pos);
 8001ab4:	4b17      	ldr	r3, [pc, #92]	; (8001b14 <FLASH_OB_GetWRP+0xa0>)
 8001ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab8:	0c1b      	lsrs	r3, r3, #16
 8001aba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	601a      	str	r2, [r3, #0]
}
 8001ac2:	e020      	b.n	8001b06 <FLASH_OB_GetWRP+0x92>
  else if (WRPArea == OB_WRPAREA_BANK2_AREAA)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d10d      	bne.n	8001ae6 <FLASH_OB_GetWRP+0x72>
    *WRPStartOffset = READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_STRT);
 8001aca:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <FLASH_OB_GetWRP+0xa0>)
 8001acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ace:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_END) >> FLASH_WRP2AR_WRP2A_END_Pos);
 8001ad6:	4b0f      	ldr	r3, [pc, #60]	; (8001b14 <FLASH_OB_GetWRP+0xa0>)
 8001ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ada:	0c1b      	lsrs	r3, r3, #16
 8001adc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	601a      	str	r2, [r3, #0]
}
 8001ae4:	e00f      	b.n	8001b06 <FLASH_OB_GetWRP+0x92>
  else if (WRPArea == OB_WRPAREA_BANK2_AREAB)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2b04      	cmp	r3, #4
 8001aea:	d10c      	bne.n	8001b06 <FLASH_OB_GetWRP+0x92>
    *WRPStartOffset = READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_STRT);
 8001aec:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <FLASH_OB_GetWRP+0xa0>)
 8001aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001af0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_END) >> FLASH_WRP2BR_WRP2B_END_Pos);
 8001af8:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <FLASH_OB_GetWRP+0xa0>)
 8001afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001afc:	0c1b      	lsrs	r3, r3, #16
 8001afe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	601a      	str	r2, [r3, #0]
}
 8001b06:	bf00      	nop
 8001b08:	3714      	adds	r7, #20
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	40022000 	.word	0x40022000

08001b18 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
  uint32_t rdp_level = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 8001b1e:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <FLASH_OB_GetRDP+0x2c>)
 8001b20:	6a1b      	ldr	r3, [r3, #32]
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	607b      	str	r3, [r7, #4]

  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2baa      	cmp	r3, #170	; 0xaa
 8001b2a:	d004      	beq.n	8001b36 <FLASH_OB_GetRDP+0x1e>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2bcc      	cmp	r3, #204	; 0xcc
 8001b30:	d001      	beq.n	8001b36 <FLASH_OB_GetRDP+0x1e>
  {
    return (OB_RDP_LEVEL_1);
 8001b32:	23bb      	movs	r3, #187	; 0xbb
 8001b34:	e000      	b.n	8001b38 <FLASH_OB_GetRDP+0x20>
  }
  else
  {
    return rdp_level;
 8001b36:	687b      	ldr	r3, [r7, #4]
  }
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	40022000 	.word	0x40022000

08001b48 <FLASH_OB_GetUser>:
  *         @ref FLASH_OB_USER_CCMSRAM_RST, @ref OB_USER_nSWBOOT0,@ref FLASH_OB_USER_nBOOT0,
  *         @ref FLASH_OB_USER_NRST_MODE, @ref FLASH_OB_USER_INTERNAL_RESET_HOLDER
  * @note  (*) availability depends on devices
  */
static uint32_t FLASH_OB_GetUser(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
  uint32_t user_config = READ_REG(FLASH->OPTR);
 8001b4e:	4b07      	ldr	r3, [pc, #28]	; (8001b6c <FLASH_OB_GetUser+0x24>)
 8001b50:	6a1b      	ldr	r3, [r3, #32]
 8001b52:	607b      	str	r3, [r7, #4]
  CLEAR_BIT(user_config, FLASH_OPTR_RDP);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b5a:	607b      	str	r3, [r7, #4]

  return user_config;
 8001b5c:	687b      	ldr	r3, [r7, #4]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	40022000 	.word	0x40022000

08001b70 <FLASH_OB_GetPCROP>:
  * @param[out] PCROPEndAddr specifies the address where to copied the end address of
  *        the Proprietary code readout protection.
  * @retval None
  */
static void FLASH_OB_GetPCROP(uint32_t *PCROPConfig, uint32_t *PCROPStartAddr, uint32_t *PCROPEndAddr)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b089      	sub	sp, #36	; 0x24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
  uint32_t bank1_addr;
#if defined (FLASH_OPTR_DBANK)
  uint32_t bank2_addr;

  /* Get the information about the bank swapping */
  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 8001b7c:	4b5b      	ldr	r3, [pc, #364]	; (8001cec <FLASH_OB_GetPCROP+0x17c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d114      	bne.n	8001bb2 <FLASH_OB_GetPCROP+0x42>
  {
    bank1_addr = FLASH_BASE;
 8001b88:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001b8c:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8001b8e:	4b58      	ldr	r3, [pc, #352]	; (8001cf0 <FLASH_OB_GetPCROP+0x180>)
 8001b90:	881b      	ldrh	r3, [r3, #0]
 8001b92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d008      	beq.n	8001bac <FLASH_OB_GetPCROP+0x3c>
 8001b9a:	4b55      	ldr	r3, [pc, #340]	; (8001cf0 <FLASH_OB_GetPCROP+0x180>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	029b      	lsls	r3, r3, #10
 8001ba0:	085a      	lsrs	r2, r3, #1
 8001ba2:	4b54      	ldr	r3, [pc, #336]	; (8001cf4 <FLASH_OB_GetPCROP+0x184>)
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001baa:	e000      	b.n	8001bae <FLASH_OB_GetPCROP+0x3e>
 8001bac:	4b52      	ldr	r3, [pc, #328]	; (8001cf8 <FLASH_OB_GetPCROP+0x188>)
 8001bae:	61bb      	str	r3, [r7, #24]
 8001bb0:	e013      	b.n	8001bda <FLASH_OB_GetPCROP+0x6a>
  }
  else
  {
    bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8001bb2:	4b4f      	ldr	r3, [pc, #316]	; (8001cf0 <FLASH_OB_GetPCROP+0x180>)
 8001bb4:	881b      	ldrh	r3, [r3, #0]
 8001bb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d008      	beq.n	8001bd0 <FLASH_OB_GetPCROP+0x60>
 8001bbe:	4b4c      	ldr	r3, [pc, #304]	; (8001cf0 <FLASH_OB_GetPCROP+0x180>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	029b      	lsls	r3, r3, #10
 8001bc4:	085a      	lsrs	r2, r3, #1
 8001bc6:	4b4b      	ldr	r3, [pc, #300]	; (8001cf4 <FLASH_OB_GetPCROP+0x184>)
 8001bc8:	4013      	ands	r3, r2
 8001bca:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001bce:	e000      	b.n	8001bd2 <FLASH_OB_GetPCROP+0x62>
 8001bd0:	4b49      	ldr	r3, [pc, #292]	; (8001cf8 <FLASH_OB_GetPCROP+0x188>)
 8001bd2:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE;
 8001bd4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001bd8:	61bb      	str	r3, [r7, #24]
#else
  bank1_addr = FLASH_BASE;
#endif

#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 8001bda:	4b48      	ldr	r3, [pc, #288]	; (8001cfc <FLASH_OB_GetPCROP+0x18c>)
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d139      	bne.n	8001c5a <FLASH_OB_GetPCROP+0xea>
  {
    if (((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_1)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0303 	and.w	r3, r3, #3
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d116      	bne.n	8001c20 <FLASH_OB_GetPCROP+0xb0>
    {
      reg_value       = (READ_REG(FLASH->PCROP1SR) & FLASH_PCROP1SR_PCROP1_STRT);
 8001bf2:	4b42      	ldr	r3, [pc, #264]	; (8001cfc <FLASH_OB_GetPCROP+0x18c>)
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001bfa:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 4) + FLASH_BASE;
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	011b      	lsls	r3, r3, #4
 8001c00:	f103 6200 	add.w	r2, r3, #134217728	; 0x8000000
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP1_END);
 8001c08:	4b3c      	ldr	r3, [pc, #240]	; (8001cfc <FLASH_OB_GetPCROP+0x18c>)
 8001c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001c10:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 4) + FLASH_BASE;
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	011b      	lsls	r3, r3, #4
 8001c16:	f103 6200 	add.w	r2, r3, #134217728	; 0x8000000
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	e055      	b.n	8001ccc <FLASH_OB_GetPCROP+0x15c>
    }
    else if (((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_2)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0303 	and.w	r3, r3, #3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d14f      	bne.n	8001ccc <FLASH_OB_GetPCROP+0x15c>
    {
      reg_value       = (READ_REG(FLASH->PCROP2SR) & FLASH_PCROP2SR_PCROP2_STRT);
 8001c2c:	4b33      	ldr	r3, [pc, #204]	; (8001cfc <FLASH_OB_GetPCROP+0x18c>)
 8001c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c30:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001c34:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 4) + FLASH_BASE;
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	011b      	lsls	r3, r3, #4
 8001c3a:	f103 6200 	add.w	r2, r3, #134217728	; 0x8000000
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP2ER) & FLASH_PCROP2ER_PCROP2_END);
 8001c42:	4b2e      	ldr	r3, [pc, #184]	; (8001cfc <FLASH_OB_GetPCROP+0x18c>)
 8001c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c46:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001c4a:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 4) + FLASH_BASE;
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	011b      	lsls	r3, r3, #4
 8001c50:	f103 6200 	add.w	r2, r3, #134217728	; 0x8000000
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	e038      	b.n	8001ccc <FLASH_OB_GetPCROP+0x15c>
    }
  }
  else
#endif
  {
    if (((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_1)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0303 	and.w	r3, r3, #3
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d116      	bne.n	8001c94 <FLASH_OB_GetPCROP+0x124>
    {
      reg_value       = (READ_REG(FLASH->PCROP1SR) & FLASH_PCROP1SR_PCROP1_STRT);
 8001c66:	4b25      	ldr	r3, [pc, #148]	; (8001cfc <FLASH_OB_GetPCROP+0x18c>)
 8001c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001c6e:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank1_addr;
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	00da      	lsls	r2, r3, #3
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	441a      	add	r2, r3
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP1_END);
 8001c7c:	4b1f      	ldr	r3, [pc, #124]	; (8001cfc <FLASH_OB_GetPCROP+0x18c>)
 8001c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c80:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001c84:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank1_addr;
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	00da      	lsls	r2, r3, #3
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	441a      	add	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	e01b      	b.n	8001ccc <FLASH_OB_GetPCROP+0x15c>
    }
#if defined (FLASH_OPTR_DBANK)
    else if (((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_2)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0303 	and.w	r3, r3, #3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d115      	bne.n	8001ccc <FLASH_OB_GetPCROP+0x15c>
    {
      reg_value       = (READ_REG(FLASH->PCROP2SR) & FLASH_PCROP2SR_PCROP2_STRT);
 8001ca0:	4b16      	ldr	r3, [pc, #88]	; (8001cfc <FLASH_OB_GetPCROP+0x18c>)
 8001ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001ca8:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank2_addr;
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	00da      	lsls	r2, r3, #3
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	441a      	add	r2, r3
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP2ER) & FLASH_PCROP2ER_PCROP2_END);
 8001cb6:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <FLASH_OB_GetPCROP+0x18c>)
 8001cb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cba:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001cbe:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank2_addr;
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	00da      	lsls	r2, r3, #3
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	441a      	add	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	601a      	str	r2, [r3, #0]
    {
      /* Nothing to do */
    }
  }

  *PCROPConfig |= (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP_RDP);
 8001ccc:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <FLASH_OB_GetPCROP+0x18c>)
 8001cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	431a      	orrs	r2, r3
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	601a      	str	r2, [r3, #0]
}
 8001cde:	bf00      	nop
 8001ce0:	3724      	adds	r7, #36	; 0x24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	40010000 	.word	0x40010000
 8001cf0:	1fff75e0 	.word	0x1fff75e0
 8001cf4:	01fffe00 	.word	0x01fffe00
 8001cf8:	08040000 	.word	0x08040000
 8001cfc:	40022000 	.word	0x40022000

08001d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b087      	sub	sp, #28
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001d0e:	e15a      	b.n	8001fc6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	2101      	movs	r1, #1
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f000 814c 	beq.w	8001fc0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d00b      	beq.n	8001d48 <HAL_GPIO_Init+0x48>
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d007      	beq.n	8001d48 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d3c:	2b11      	cmp	r3, #17
 8001d3e:	d003      	beq.n	8001d48 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2b12      	cmp	r3, #18
 8001d46:	d130      	bne.n	8001daa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	2203      	movs	r2, #3
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	68da      	ldr	r2, [r3, #12]
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d7e:	2201      	movs	r2, #1
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	43db      	mvns	r3, r3
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	091b      	lsrs	r3, r3, #4
 8001d94:	f003 0201 	and.w	r2, r3, #1
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	2203      	movs	r2, #3
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	689a      	ldr	r2, [r3, #8]
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d003      	beq.n	8001dea <HAL_GPIO_Init+0xea>
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	2b12      	cmp	r3, #18
 8001de8:	d123      	bne.n	8001e32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	08da      	lsrs	r2, r3, #3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	3208      	adds	r2, #8
 8001df2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	220f      	movs	r2, #15
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	43db      	mvns	r3, r3
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	691a      	ldr	r2, [r3, #16]
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	f003 0307 	and.w	r3, r3, #7
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	08da      	lsrs	r2, r3, #3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3208      	adds	r2, #8
 8001e2c:	6939      	ldr	r1, [r7, #16]
 8001e2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	2203      	movs	r2, #3
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	43db      	mvns	r3, r3
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	4013      	ands	r3, r2
 8001e48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f003 0203 	and.w	r2, r3, #3
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f000 80a6 	beq.w	8001fc0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e74:	4b5b      	ldr	r3, [pc, #364]	; (8001fe4 <HAL_GPIO_Init+0x2e4>)
 8001e76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e78:	4a5a      	ldr	r2, [pc, #360]	; (8001fe4 <HAL_GPIO_Init+0x2e4>)
 8001e7a:	f043 0301 	orr.w	r3, r3, #1
 8001e7e:	6613      	str	r3, [r2, #96]	; 0x60
 8001e80:	4b58      	ldr	r3, [pc, #352]	; (8001fe4 <HAL_GPIO_Init+0x2e4>)
 8001e82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	60bb      	str	r3, [r7, #8]
 8001e8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e8c:	4a56      	ldr	r2, [pc, #344]	; (8001fe8 <HAL_GPIO_Init+0x2e8>)
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	089b      	lsrs	r3, r3, #2
 8001e92:	3302      	adds	r3, #2
 8001e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	f003 0303 	and.w	r3, r3, #3
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	220f      	movs	r2, #15
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	4013      	ands	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001eb6:	d01f      	beq.n	8001ef8 <HAL_GPIO_Init+0x1f8>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a4c      	ldr	r2, [pc, #304]	; (8001fec <HAL_GPIO_Init+0x2ec>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d019      	beq.n	8001ef4 <HAL_GPIO_Init+0x1f4>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a4b      	ldr	r2, [pc, #300]	; (8001ff0 <HAL_GPIO_Init+0x2f0>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d013      	beq.n	8001ef0 <HAL_GPIO_Init+0x1f0>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a4a      	ldr	r2, [pc, #296]	; (8001ff4 <HAL_GPIO_Init+0x2f4>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d00d      	beq.n	8001eec <HAL_GPIO_Init+0x1ec>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a49      	ldr	r2, [pc, #292]	; (8001ff8 <HAL_GPIO_Init+0x2f8>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d007      	beq.n	8001ee8 <HAL_GPIO_Init+0x1e8>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a48      	ldr	r2, [pc, #288]	; (8001ffc <HAL_GPIO_Init+0x2fc>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d101      	bne.n	8001ee4 <HAL_GPIO_Init+0x1e4>
 8001ee0:	2305      	movs	r3, #5
 8001ee2:	e00a      	b.n	8001efa <HAL_GPIO_Init+0x1fa>
 8001ee4:	2306      	movs	r3, #6
 8001ee6:	e008      	b.n	8001efa <HAL_GPIO_Init+0x1fa>
 8001ee8:	2304      	movs	r3, #4
 8001eea:	e006      	b.n	8001efa <HAL_GPIO_Init+0x1fa>
 8001eec:	2303      	movs	r3, #3
 8001eee:	e004      	b.n	8001efa <HAL_GPIO_Init+0x1fa>
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	e002      	b.n	8001efa <HAL_GPIO_Init+0x1fa>
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e000      	b.n	8001efa <HAL_GPIO_Init+0x1fa>
 8001ef8:	2300      	movs	r3, #0
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	f002 0203 	and.w	r2, r2, #3
 8001f00:	0092      	lsls	r2, r2, #2
 8001f02:	4093      	lsls	r3, r2
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f0a:	4937      	ldr	r1, [pc, #220]	; (8001fe8 <HAL_GPIO_Init+0x2e8>)
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	089b      	lsrs	r3, r3, #2
 8001f10:	3302      	adds	r3, #2
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f18:	4b39      	ldr	r3, [pc, #228]	; (8002000 <HAL_GPIO_Init+0x300>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	43db      	mvns	r3, r3
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	4013      	ands	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f3c:	4a30      	ldr	r2, [pc, #192]	; (8002000 <HAL_GPIO_Init+0x300>)
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001f42:	4b2f      	ldr	r3, [pc, #188]	; (8002000 <HAL_GPIO_Init+0x300>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f66:	4a26      	ldr	r2, [pc, #152]	; (8002000 <HAL_GPIO_Init+0x300>)
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f6c:	4b24      	ldr	r3, [pc, #144]	; (8002000 <HAL_GPIO_Init+0x300>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	43db      	mvns	r3, r3
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d003      	beq.n	8001f90 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f90:	4a1b      	ldr	r2, [pc, #108]	; (8002000 <HAL_GPIO_Init+0x300>)
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f96:	4b1a      	ldr	r3, [pc, #104]	; (8002000 <HAL_GPIO_Init+0x300>)
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fba:	4a11      	ldr	r2, [pc, #68]	; (8002000 <HAL_GPIO_Init+0x300>)
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	f47f ae9d 	bne.w	8001d10 <HAL_GPIO_Init+0x10>
  }
}
 8001fd6:	bf00      	nop
 8001fd8:	371c      	adds	r7, #28
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	40010000 	.word	0x40010000
 8001fec:	48000400 	.word	0x48000400
 8001ff0:	48000800 	.word	0x48000800
 8001ff4:	48000c00 	.word	0x48000c00
 8001ff8:	48001000 	.word	0x48001000
 8001ffc:	48001400 	.word	0x48001400
 8002000:	40010400 	.word	0x40010400

08002004 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	460b      	mov	r3, r1
 800200e:	807b      	strh	r3, [r7, #2]
 8002010:	4613      	mov	r3, r2
 8002012:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002014:	787b      	ldrb	r3, [r7, #1]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800201a:	887a      	ldrh	r2, [r7, #2]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002020:	e002      	b.n	8002028 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002022:	887a      	ldrh	r2, [r7, #2]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	460b      	mov	r3, r1
 800203e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	695a      	ldr	r2, [r3, #20]
 8002044:	887b      	ldrh	r3, [r7, #2]
 8002046:	4013      	ands	r3, r2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d003      	beq.n	8002054 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800204c:	887a      	ldrh	r2, [r7, #2]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002052:	e002      	b.n	800205a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002054:	887a      	ldrh	r2, [r7, #2]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	619a      	str	r2, [r3, #24]
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
	...

08002068 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002072:	4b08      	ldr	r3, [pc, #32]	; (8002094 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002074:	695a      	ldr	r2, [r3, #20]
 8002076:	88fb      	ldrh	r3, [r7, #6]
 8002078:	4013      	ands	r3, r2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d006      	beq.n	800208c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800207e:	4a05      	ldr	r2, [pc, #20]	; (8002094 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002080:	88fb      	ldrh	r3, [r7, #6]
 8002082:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002084:	88fb      	ldrh	r3, [r7, #6]
 8002086:	4618      	mov	r0, r3
 8002088:	f7fe f8c6 	bl	8000218 <HAL_GPIO_EXTI_Callback>
  }
}
 800208c:	bf00      	nop
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40010400 	.word	0x40010400

08002098 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d141      	bne.n	800212a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80020a6:	4b4b      	ldr	r3, [pc, #300]	; (80021d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020b2:	d131      	bne.n	8002118 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020b4:	4b47      	ldr	r3, [pc, #284]	; (80021d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020ba:	4a46      	ldr	r2, [pc, #280]	; (80021d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020c4:	4b43      	ldr	r3, [pc, #268]	; (80021d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020cc:	4a41      	ldr	r2, [pc, #260]	; (80021d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020d4:	4b40      	ldr	r3, [pc, #256]	; (80021d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2232      	movs	r2, #50	; 0x32
 80020da:	fb02 f303 	mul.w	r3, r2, r3
 80020de:	4a3f      	ldr	r2, [pc, #252]	; (80021dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80020e0:	fba2 2303 	umull	r2, r3, r2, r3
 80020e4:	0c9b      	lsrs	r3, r3, #18
 80020e6:	3301      	adds	r3, #1
 80020e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020ea:	e002      	b.n	80020f2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020f2:	4b38      	ldr	r3, [pc, #224]	; (80021d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020fe:	d102      	bne.n	8002106 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f2      	bne.n	80020ec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002106:	4b33      	ldr	r3, [pc, #204]	; (80021d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800210e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002112:	d158      	bne.n	80021c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e057      	b.n	80021c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002118:	4b2e      	ldr	r3, [pc, #184]	; (80021d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800211a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800211e:	4a2d      	ldr	r2, [pc, #180]	; (80021d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002120:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002124:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002128:	e04d      	b.n	80021c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002130:	d141      	bne.n	80021b6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002132:	4b28      	ldr	r3, [pc, #160]	; (80021d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800213a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800213e:	d131      	bne.n	80021a4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002140:	4b24      	ldr	r3, [pc, #144]	; (80021d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002142:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002146:	4a23      	ldr	r2, [pc, #140]	; (80021d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800214c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002150:	4b20      	ldr	r3, [pc, #128]	; (80021d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002158:	4a1e      	ldr	r2, [pc, #120]	; (80021d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800215a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800215e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002160:	4b1d      	ldr	r3, [pc, #116]	; (80021d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2232      	movs	r2, #50	; 0x32
 8002166:	fb02 f303 	mul.w	r3, r2, r3
 800216a:	4a1c      	ldr	r2, [pc, #112]	; (80021dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800216c:	fba2 2303 	umull	r2, r3, r2, r3
 8002170:	0c9b      	lsrs	r3, r3, #18
 8002172:	3301      	adds	r3, #1
 8002174:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002176:	e002      	b.n	800217e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	3b01      	subs	r3, #1
 800217c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800217e:	4b15      	ldr	r3, [pc, #84]	; (80021d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002186:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800218a:	d102      	bne.n	8002192 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1f2      	bne.n	8002178 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002192:	4b10      	ldr	r3, [pc, #64]	; (80021d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800219a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800219e:	d112      	bne.n	80021c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e011      	b.n	80021c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021a4:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021aa:	4a0a      	ldr	r2, [pc, #40]	; (80021d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80021b4:	e007      	b.n	80021c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021b6:	4b07      	ldr	r3, [pc, #28]	; (80021d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021be:	4a05      	ldr	r2, [pc, #20]	; (80021d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021c4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3714      	adds	r7, #20
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	40007000 	.word	0x40007000
 80021d8:	20000000 	.word	0x20000000
 80021dc:	431bde83 	.word	0x431bde83

080021e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b088      	sub	sp, #32
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e308      	b.n	8002804 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d075      	beq.n	80022ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021fe:	4ba3      	ldr	r3, [pc, #652]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f003 030c 	and.w	r3, r3, #12
 8002206:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002208:	4ba0      	ldr	r3, [pc, #640]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	f003 0303 	and.w	r3, r3, #3
 8002210:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	2b0c      	cmp	r3, #12
 8002216:	d102      	bne.n	800221e <HAL_RCC_OscConfig+0x3e>
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	2b03      	cmp	r3, #3
 800221c:	d002      	beq.n	8002224 <HAL_RCC_OscConfig+0x44>
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	2b08      	cmp	r3, #8
 8002222:	d10b      	bne.n	800223c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002224:	4b99      	ldr	r3, [pc, #612]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d05b      	beq.n	80022e8 <HAL_RCC_OscConfig+0x108>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d157      	bne.n	80022e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e2e3      	b.n	8002804 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002244:	d106      	bne.n	8002254 <HAL_RCC_OscConfig+0x74>
 8002246:	4b91      	ldr	r3, [pc, #580]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a90      	ldr	r2, [pc, #576]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 800224c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	e01d      	b.n	8002290 <HAL_RCC_OscConfig+0xb0>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800225c:	d10c      	bne.n	8002278 <HAL_RCC_OscConfig+0x98>
 800225e:	4b8b      	ldr	r3, [pc, #556]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a8a      	ldr	r2, [pc, #552]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 8002264:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	4b88      	ldr	r3, [pc, #544]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a87      	ldr	r2, [pc, #540]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 8002270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	e00b      	b.n	8002290 <HAL_RCC_OscConfig+0xb0>
 8002278:	4b84      	ldr	r3, [pc, #528]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a83      	ldr	r2, [pc, #524]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 800227e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002282:	6013      	str	r3, [r2, #0]
 8002284:	4b81      	ldr	r3, [pc, #516]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a80      	ldr	r2, [pc, #512]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 800228a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800228e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d013      	beq.n	80022c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002298:	f7fe faf4 	bl	8000884 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a0:	f7fe faf0 	bl	8000884 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b64      	cmp	r3, #100	; 0x64
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e2a8      	b.n	8002804 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022b2:	4b76      	ldr	r3, [pc, #472]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0f0      	beq.n	80022a0 <HAL_RCC_OscConfig+0xc0>
 80022be:	e014      	b.n	80022ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c0:	f7fe fae0 	bl	8000884 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c8:	f7fe fadc 	bl	8000884 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b64      	cmp	r3, #100	; 0x64
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e294      	b.n	8002804 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022da:	4b6c      	ldr	r3, [pc, #432]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f0      	bne.n	80022c8 <HAL_RCC_OscConfig+0xe8>
 80022e6:	e000      	b.n	80022ea <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d075      	beq.n	80023e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022f6:	4b65      	ldr	r3, [pc, #404]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 030c 	and.w	r3, r3, #12
 80022fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002300:	4b62      	ldr	r3, [pc, #392]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	f003 0303 	and.w	r3, r3, #3
 8002308:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	2b0c      	cmp	r3, #12
 800230e:	d102      	bne.n	8002316 <HAL_RCC_OscConfig+0x136>
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	2b02      	cmp	r3, #2
 8002314:	d002      	beq.n	800231c <HAL_RCC_OscConfig+0x13c>
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	2b04      	cmp	r3, #4
 800231a:	d11f      	bne.n	800235c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800231c:	4b5b      	ldr	r3, [pc, #364]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002324:	2b00      	cmp	r3, #0
 8002326:	d005      	beq.n	8002334 <HAL_RCC_OscConfig+0x154>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d101      	bne.n	8002334 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e267      	b.n	8002804 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002334:	4b55      	ldr	r3, [pc, #340]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	061b      	lsls	r3, r3, #24
 8002342:	4952      	ldr	r1, [pc, #328]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 8002344:	4313      	orrs	r3, r2
 8002346:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002348:	4b51      	ldr	r3, [pc, #324]	; (8002490 <HAL_RCC_OscConfig+0x2b0>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4618      	mov	r0, r3
 800234e:	f7fe fa4d 	bl	80007ec <HAL_InitTick>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d043      	beq.n	80023e0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e253      	b.n	8002804 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d023      	beq.n	80023ac <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002364:	4b49      	ldr	r3, [pc, #292]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a48      	ldr	r2, [pc, #288]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 800236a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800236e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002370:	f7fe fa88 	bl	8000884 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002378:	f7fe fa84 	bl	8000884 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e23c      	b.n	8002804 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800238a:	4b40      	ldr	r3, [pc, #256]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002392:	2b00      	cmp	r3, #0
 8002394:	d0f0      	beq.n	8002378 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002396:	4b3d      	ldr	r3, [pc, #244]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	061b      	lsls	r3, r3, #24
 80023a4:	4939      	ldr	r1, [pc, #228]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	604b      	str	r3, [r1, #4]
 80023aa:	e01a      	b.n	80023e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ac:	4b37      	ldr	r3, [pc, #220]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a36      	ldr	r2, [pc, #216]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 80023b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b8:	f7fe fa64 	bl	8000884 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023c0:	f7fe fa60 	bl	8000884 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e218      	b.n	8002804 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023d2:	4b2e      	ldr	r3, [pc, #184]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f0      	bne.n	80023c0 <HAL_RCC_OscConfig+0x1e0>
 80023de:	e000      	b.n	80023e2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0308 	and.w	r3, r3, #8
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d03c      	beq.n	8002468 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d01c      	beq.n	8002430 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023f6:	4b25      	ldr	r3, [pc, #148]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 80023f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023fc:	4a23      	ldr	r2, [pc, #140]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 80023fe:	f043 0301 	orr.w	r3, r3, #1
 8002402:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002406:	f7fe fa3d 	bl	8000884 <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800240c:	e008      	b.n	8002420 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800240e:	f7fe fa39 	bl	8000884 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e1f1      	b.n	8002804 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002420:	4b1a      	ldr	r3, [pc, #104]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 8002422:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d0ef      	beq.n	800240e <HAL_RCC_OscConfig+0x22e>
 800242e:	e01b      	b.n	8002468 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002430:	4b16      	ldr	r3, [pc, #88]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 8002432:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002436:	4a15      	ldr	r2, [pc, #84]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 8002438:	f023 0301 	bic.w	r3, r3, #1
 800243c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002440:	f7fe fa20 	bl	8000884 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002448:	f7fe fa1c 	bl	8000884 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e1d4      	b.n	8002804 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800245a:	4b0c      	ldr	r3, [pc, #48]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 800245c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1ef      	bne.n	8002448 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 80ab 	beq.w	80025cc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002476:	2300      	movs	r3, #0
 8002478:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800247a:	4b04      	ldr	r3, [pc, #16]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 800247c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800247e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d106      	bne.n	8002494 <HAL_RCC_OscConfig+0x2b4>
 8002486:	2301      	movs	r3, #1
 8002488:	e005      	b.n	8002496 <HAL_RCC_OscConfig+0x2b6>
 800248a:	bf00      	nop
 800248c:	40021000 	.word	0x40021000
 8002490:	20000004 	.word	0x20000004
 8002494:	2300      	movs	r3, #0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00d      	beq.n	80024b6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800249a:	4baf      	ldr	r3, [pc, #700]	; (8002758 <HAL_RCC_OscConfig+0x578>)
 800249c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249e:	4aae      	ldr	r2, [pc, #696]	; (8002758 <HAL_RCC_OscConfig+0x578>)
 80024a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a4:	6593      	str	r3, [r2, #88]	; 0x58
 80024a6:	4bac      	ldr	r3, [pc, #688]	; (8002758 <HAL_RCC_OscConfig+0x578>)
 80024a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80024b2:	2301      	movs	r3, #1
 80024b4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024b6:	4ba9      	ldr	r3, [pc, #676]	; (800275c <HAL_RCC_OscConfig+0x57c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d118      	bne.n	80024f4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024c2:	4ba6      	ldr	r3, [pc, #664]	; (800275c <HAL_RCC_OscConfig+0x57c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4aa5      	ldr	r2, [pc, #660]	; (800275c <HAL_RCC_OscConfig+0x57c>)
 80024c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ce:	f7fe f9d9 	bl	8000884 <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d6:	f7fe f9d5 	bl	8000884 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e18d      	b.n	8002804 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024e8:	4b9c      	ldr	r3, [pc, #624]	; (800275c <HAL_RCC_OscConfig+0x57c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0f0      	beq.n	80024d6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d108      	bne.n	800250e <HAL_RCC_OscConfig+0x32e>
 80024fc:	4b96      	ldr	r3, [pc, #600]	; (8002758 <HAL_RCC_OscConfig+0x578>)
 80024fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002502:	4a95      	ldr	r2, [pc, #596]	; (8002758 <HAL_RCC_OscConfig+0x578>)
 8002504:	f043 0301 	orr.w	r3, r3, #1
 8002508:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800250c:	e024      	b.n	8002558 <HAL_RCC_OscConfig+0x378>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	2b05      	cmp	r3, #5
 8002514:	d110      	bne.n	8002538 <HAL_RCC_OscConfig+0x358>
 8002516:	4b90      	ldr	r3, [pc, #576]	; (8002758 <HAL_RCC_OscConfig+0x578>)
 8002518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251c:	4a8e      	ldr	r2, [pc, #568]	; (8002758 <HAL_RCC_OscConfig+0x578>)
 800251e:	f043 0304 	orr.w	r3, r3, #4
 8002522:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002526:	4b8c      	ldr	r3, [pc, #560]	; (8002758 <HAL_RCC_OscConfig+0x578>)
 8002528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252c:	4a8a      	ldr	r2, [pc, #552]	; (8002758 <HAL_RCC_OscConfig+0x578>)
 800252e:	f043 0301 	orr.w	r3, r3, #1
 8002532:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002536:	e00f      	b.n	8002558 <HAL_RCC_OscConfig+0x378>
 8002538:	4b87      	ldr	r3, [pc, #540]	; (8002758 <HAL_RCC_OscConfig+0x578>)
 800253a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800253e:	4a86      	ldr	r2, [pc, #536]	; (8002758 <HAL_RCC_OscConfig+0x578>)
 8002540:	f023 0301 	bic.w	r3, r3, #1
 8002544:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002548:	4b83      	ldr	r3, [pc, #524]	; (8002758 <HAL_RCC_OscConfig+0x578>)
 800254a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800254e:	4a82      	ldr	r2, [pc, #520]	; (8002758 <HAL_RCC_OscConfig+0x578>)
 8002550:	f023 0304 	bic.w	r3, r3, #4
 8002554:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d016      	beq.n	800258e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002560:	f7fe f990 	bl	8000884 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002566:	e00a      	b.n	800257e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002568:	f7fe f98c 	bl	8000884 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	f241 3288 	movw	r2, #5000	; 0x1388
 8002576:	4293      	cmp	r3, r2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e142      	b.n	8002804 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800257e:	4b76      	ldr	r3, [pc, #472]	; (8002758 <HAL_RCC_OscConfig+0x578>)
 8002580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0ed      	beq.n	8002568 <HAL_RCC_OscConfig+0x388>
 800258c:	e015      	b.n	80025ba <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800258e:	f7fe f979 	bl	8000884 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002594:	e00a      	b.n	80025ac <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002596:	f7fe f975 	bl	8000884 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e12b      	b.n	8002804 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025ac:	4b6a      	ldr	r3, [pc, #424]	; (8002758 <HAL_RCC_OscConfig+0x578>)
 80025ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1ed      	bne.n	8002596 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025ba:	7ffb      	ldrb	r3, [r7, #31]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d105      	bne.n	80025cc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025c0:	4b65      	ldr	r3, [pc, #404]	; (8002758 <HAL_RCC_OscConfig+0x578>)
 80025c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c4:	4a64      	ldr	r2, [pc, #400]	; (8002758 <HAL_RCC_OscConfig+0x578>)
 80025c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0320 	and.w	r3, r3, #32
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d03c      	beq.n	8002652 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d01c      	beq.n	800261a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025e0:	4b5d      	ldr	r3, [pc, #372]	; (8002758 <HAL_RCC_OscConfig+0x578>)
 80025e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025e6:	4a5c      	ldr	r2, [pc, #368]	; (8002758 <HAL_RCC_OscConfig+0x578>)
 80025e8:	f043 0301 	orr.w	r3, r3, #1
 80025ec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f0:	f7fe f948 	bl	8000884 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025f8:	f7fe f944 	bl	8000884 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e0fc      	b.n	8002804 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800260a:	4b53      	ldr	r3, [pc, #332]	; (8002758 <HAL_RCC_OscConfig+0x578>)
 800260c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0ef      	beq.n	80025f8 <HAL_RCC_OscConfig+0x418>
 8002618:	e01b      	b.n	8002652 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800261a:	4b4f      	ldr	r3, [pc, #316]	; (8002758 <HAL_RCC_OscConfig+0x578>)
 800261c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002620:	4a4d      	ldr	r2, [pc, #308]	; (8002758 <HAL_RCC_OscConfig+0x578>)
 8002622:	f023 0301 	bic.w	r3, r3, #1
 8002626:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262a:	f7fe f92b 	bl	8000884 <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002632:	f7fe f927 	bl	8000884 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e0df      	b.n	8002804 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002644:	4b44      	ldr	r3, [pc, #272]	; (8002758 <HAL_RCC_OscConfig+0x578>)
 8002646:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1ef      	bne.n	8002632 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	2b00      	cmp	r3, #0
 8002658:	f000 80d3 	beq.w	8002802 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800265c:	4b3e      	ldr	r3, [pc, #248]	; (8002758 <HAL_RCC_OscConfig+0x578>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f003 030c 	and.w	r3, r3, #12
 8002664:	2b0c      	cmp	r3, #12
 8002666:	f000 808d 	beq.w	8002784 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	2b02      	cmp	r3, #2
 8002670:	d15a      	bne.n	8002728 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002672:	4b39      	ldr	r3, [pc, #228]	; (8002758 <HAL_RCC_OscConfig+0x578>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a38      	ldr	r2, [pc, #224]	; (8002758 <HAL_RCC_OscConfig+0x578>)
 8002678:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800267c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267e:	f7fe f901 	bl	8000884 <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002684:	e008      	b.n	8002698 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002686:	f7fe f8fd 	bl	8000884 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e0b5      	b.n	8002804 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002698:	4b2f      	ldr	r3, [pc, #188]	; (8002758 <HAL_RCC_OscConfig+0x578>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1f0      	bne.n	8002686 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026a4:	4b2c      	ldr	r3, [pc, #176]	; (8002758 <HAL_RCC_OscConfig+0x578>)
 80026a6:	68da      	ldr	r2, [r3, #12]
 80026a8:	4b2d      	ldr	r3, [pc, #180]	; (8002760 <HAL_RCC_OscConfig+0x580>)
 80026aa:	4013      	ands	r3, r2
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	6a11      	ldr	r1, [r2, #32]
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026b4:	3a01      	subs	r2, #1
 80026b6:	0112      	lsls	r2, r2, #4
 80026b8:	4311      	orrs	r1, r2
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80026be:	0212      	lsls	r2, r2, #8
 80026c0:	4311      	orrs	r1, r2
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80026c6:	0852      	lsrs	r2, r2, #1
 80026c8:	3a01      	subs	r2, #1
 80026ca:	0552      	lsls	r2, r2, #21
 80026cc:	4311      	orrs	r1, r2
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80026d2:	0852      	lsrs	r2, r2, #1
 80026d4:	3a01      	subs	r2, #1
 80026d6:	0652      	lsls	r2, r2, #25
 80026d8:	4311      	orrs	r1, r2
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80026de:	06d2      	lsls	r2, r2, #27
 80026e0:	430a      	orrs	r2, r1
 80026e2:	491d      	ldr	r1, [pc, #116]	; (8002758 <HAL_RCC_OscConfig+0x578>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026e8:	4b1b      	ldr	r3, [pc, #108]	; (8002758 <HAL_RCC_OscConfig+0x578>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a1a      	ldr	r2, [pc, #104]	; (8002758 <HAL_RCC_OscConfig+0x578>)
 80026ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026f2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026f4:	4b18      	ldr	r3, [pc, #96]	; (8002758 <HAL_RCC_OscConfig+0x578>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	4a17      	ldr	r2, [pc, #92]	; (8002758 <HAL_RCC_OscConfig+0x578>)
 80026fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026fe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002700:	f7fe f8c0 	bl	8000884 <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002708:	f7fe f8bc 	bl	8000884 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e074      	b.n	8002804 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800271a:	4b0f      	ldr	r3, [pc, #60]	; (8002758 <HAL_RCC_OscConfig+0x578>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0f0      	beq.n	8002708 <HAL_RCC_OscConfig+0x528>
 8002726:	e06c      	b.n	8002802 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002728:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <HAL_RCC_OscConfig+0x578>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a0a      	ldr	r2, [pc, #40]	; (8002758 <HAL_RCC_OscConfig+0x578>)
 800272e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002732:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002734:	4b08      	ldr	r3, [pc, #32]	; (8002758 <HAL_RCC_OscConfig+0x578>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	4a07      	ldr	r2, [pc, #28]	; (8002758 <HAL_RCC_OscConfig+0x578>)
 800273a:	f023 0303 	bic.w	r3, r3, #3
 800273e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002740:	4b05      	ldr	r3, [pc, #20]	; (8002758 <HAL_RCC_OscConfig+0x578>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	4a04      	ldr	r2, [pc, #16]	; (8002758 <HAL_RCC_OscConfig+0x578>)
 8002746:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800274a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800274e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002750:	f7fe f898 	bl	8000884 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002756:	e00e      	b.n	8002776 <HAL_RCC_OscConfig+0x596>
 8002758:	40021000 	.word	0x40021000
 800275c:	40007000 	.word	0x40007000
 8002760:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002764:	f7fe f88e 	bl	8000884 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e046      	b.n	8002804 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002776:	4b25      	ldr	r3, [pc, #148]	; (800280c <HAL_RCC_OscConfig+0x62c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1f0      	bne.n	8002764 <HAL_RCC_OscConfig+0x584>
 8002782:	e03e      	b.n	8002802 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	69db      	ldr	r3, [r3, #28]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d101      	bne.n	8002790 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e039      	b.n	8002804 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002790:	4b1e      	ldr	r3, [pc, #120]	; (800280c <HAL_RCC_OscConfig+0x62c>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	f003 0203 	and.w	r2, r3, #3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a1b      	ldr	r3, [r3, #32]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d12c      	bne.n	80027fe <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ae:	3b01      	subs	r3, #1
 80027b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d123      	bne.n	80027fe <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d11b      	bne.n	80027fe <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d113      	bne.n	80027fe <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e0:	085b      	lsrs	r3, r3, #1
 80027e2:	3b01      	subs	r3, #1
 80027e4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d109      	bne.n	80027fe <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f4:	085b      	lsrs	r3, r3, #1
 80027f6:	3b01      	subs	r3, #1
 80027f8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d001      	beq.n	8002802 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e000      	b.n	8002804 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3720      	adds	r7, #32
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40021000 	.word	0x40021000

08002810 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800281a:	2300      	movs	r3, #0
 800281c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e11e      	b.n	8002a66 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002828:	4b91      	ldr	r3, [pc, #580]	; (8002a70 <HAL_RCC_ClockConfig+0x260>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 030f 	and.w	r3, r3, #15
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	429a      	cmp	r2, r3
 8002834:	d910      	bls.n	8002858 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002836:	4b8e      	ldr	r3, [pc, #568]	; (8002a70 <HAL_RCC_ClockConfig+0x260>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f023 020f 	bic.w	r2, r3, #15
 800283e:	498c      	ldr	r1, [pc, #560]	; (8002a70 <HAL_RCC_ClockConfig+0x260>)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	4313      	orrs	r3, r2
 8002844:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002846:	4b8a      	ldr	r3, [pc, #552]	; (8002a70 <HAL_RCC_ClockConfig+0x260>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	429a      	cmp	r2, r3
 8002852:	d001      	beq.n	8002858 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e106      	b.n	8002a66 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	2b00      	cmp	r3, #0
 8002862:	d073      	beq.n	800294c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b03      	cmp	r3, #3
 800286a:	d129      	bne.n	80028c0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800286c:	4b81      	ldr	r3, [pc, #516]	; (8002a74 <HAL_RCC_ClockConfig+0x264>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e0f4      	b.n	8002a66 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800287c:	f000 f966 	bl	8002b4c <RCC_GetSysClockFreqFromPLLSource>
 8002880:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	4a7c      	ldr	r2, [pc, #496]	; (8002a78 <HAL_RCC_ClockConfig+0x268>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d93f      	bls.n	800290a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800288a:	4b7a      	ldr	r3, [pc, #488]	; (8002a74 <HAL_RCC_ClockConfig+0x264>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d009      	beq.n	80028aa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d033      	beq.n	800290a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d12f      	bne.n	800290a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80028aa:	4b72      	ldr	r3, [pc, #456]	; (8002a74 <HAL_RCC_ClockConfig+0x264>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028b2:	4a70      	ldr	r2, [pc, #448]	; (8002a74 <HAL_RCC_ClockConfig+0x264>)
 80028b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028b8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80028ba:	2380      	movs	r3, #128	; 0x80
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	e024      	b.n	800290a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d107      	bne.n	80028d8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028c8:	4b6a      	ldr	r3, [pc, #424]	; (8002a74 <HAL_RCC_ClockConfig+0x264>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d109      	bne.n	80028e8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e0c6      	b.n	8002a66 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028d8:	4b66      	ldr	r3, [pc, #408]	; (8002a74 <HAL_RCC_ClockConfig+0x264>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e0be      	b.n	8002a66 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80028e8:	f000 f8ce 	bl	8002a88 <HAL_RCC_GetSysClockFreq>
 80028ec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	4a61      	ldr	r2, [pc, #388]	; (8002a78 <HAL_RCC_ClockConfig+0x268>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d909      	bls.n	800290a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80028f6:	4b5f      	ldr	r3, [pc, #380]	; (8002a74 <HAL_RCC_ClockConfig+0x264>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028fe:	4a5d      	ldr	r2, [pc, #372]	; (8002a74 <HAL_RCC_ClockConfig+0x264>)
 8002900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002904:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002906:	2380      	movs	r3, #128	; 0x80
 8002908:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800290a:	4b5a      	ldr	r3, [pc, #360]	; (8002a74 <HAL_RCC_ClockConfig+0x264>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f023 0203 	bic.w	r2, r3, #3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	4957      	ldr	r1, [pc, #348]	; (8002a74 <HAL_RCC_ClockConfig+0x264>)
 8002918:	4313      	orrs	r3, r2
 800291a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800291c:	f7fd ffb2 	bl	8000884 <HAL_GetTick>
 8002920:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002922:	e00a      	b.n	800293a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002924:	f7fd ffae 	bl	8000884 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002932:	4293      	cmp	r3, r2
 8002934:	d901      	bls.n	800293a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e095      	b.n	8002a66 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800293a:	4b4e      	ldr	r3, [pc, #312]	; (8002a74 <HAL_RCC_ClockConfig+0x264>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 020c 	and.w	r2, r3, #12
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	429a      	cmp	r2, r3
 800294a:	d1eb      	bne.n	8002924 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d023      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	2b00      	cmp	r3, #0
 8002962:	d005      	beq.n	8002970 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002964:	4b43      	ldr	r3, [pc, #268]	; (8002a74 <HAL_RCC_ClockConfig+0x264>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	4a42      	ldr	r2, [pc, #264]	; (8002a74 <HAL_RCC_ClockConfig+0x264>)
 800296a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800296e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0308 	and.w	r3, r3, #8
 8002978:	2b00      	cmp	r3, #0
 800297a:	d007      	beq.n	800298c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800297c:	4b3d      	ldr	r3, [pc, #244]	; (8002a74 <HAL_RCC_ClockConfig+0x264>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002984:	4a3b      	ldr	r2, [pc, #236]	; (8002a74 <HAL_RCC_ClockConfig+0x264>)
 8002986:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800298a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800298c:	4b39      	ldr	r3, [pc, #228]	; (8002a74 <HAL_RCC_ClockConfig+0x264>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	4936      	ldr	r1, [pc, #216]	; (8002a74 <HAL_RCC_ClockConfig+0x264>)
 800299a:	4313      	orrs	r3, r2
 800299c:	608b      	str	r3, [r1, #8]
 800299e:	e008      	b.n	80029b2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	2b80      	cmp	r3, #128	; 0x80
 80029a4:	d105      	bne.n	80029b2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80029a6:	4b33      	ldr	r3, [pc, #204]	; (8002a74 <HAL_RCC_ClockConfig+0x264>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	4a32      	ldr	r2, [pc, #200]	; (8002a74 <HAL_RCC_ClockConfig+0x264>)
 80029ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029b0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029b2:	4b2f      	ldr	r3, [pc, #188]	; (8002a70 <HAL_RCC_ClockConfig+0x260>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 030f 	and.w	r3, r3, #15
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d21d      	bcs.n	80029fc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029c0:	4b2b      	ldr	r3, [pc, #172]	; (8002a70 <HAL_RCC_ClockConfig+0x260>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f023 020f 	bic.w	r2, r3, #15
 80029c8:	4929      	ldr	r1, [pc, #164]	; (8002a70 <HAL_RCC_ClockConfig+0x260>)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80029d0:	f7fd ff58 	bl	8000884 <HAL_GetTick>
 80029d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029d6:	e00a      	b.n	80029ee <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d8:	f7fd ff54 	bl	8000884 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e03b      	b.n	8002a66 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ee:	4b20      	ldr	r3, [pc, #128]	; (8002a70 <HAL_RCC_ClockConfig+0x260>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 030f 	and.w	r3, r3, #15
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d1ed      	bne.n	80029d8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d008      	beq.n	8002a1a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a08:	4b1a      	ldr	r3, [pc, #104]	; (8002a74 <HAL_RCC_ClockConfig+0x264>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	4917      	ldr	r1, [pc, #92]	; (8002a74 <HAL_RCC_ClockConfig+0x264>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0308 	and.w	r3, r3, #8
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d009      	beq.n	8002a3a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a26:	4b13      	ldr	r3, [pc, #76]	; (8002a74 <HAL_RCC_ClockConfig+0x264>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	490f      	ldr	r1, [pc, #60]	; (8002a74 <HAL_RCC_ClockConfig+0x264>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a3a:	f000 f825 	bl	8002a88 <HAL_RCC_GetSysClockFreq>
 8002a3e:	4601      	mov	r1, r0
 8002a40:	4b0c      	ldr	r3, [pc, #48]	; (8002a74 <HAL_RCC_ClockConfig+0x264>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	091b      	lsrs	r3, r3, #4
 8002a46:	f003 030f 	and.w	r3, r3, #15
 8002a4a:	4a0c      	ldr	r2, [pc, #48]	; (8002a7c <HAL_RCC_ClockConfig+0x26c>)
 8002a4c:	5cd3      	ldrb	r3, [r2, r3]
 8002a4e:	f003 031f 	and.w	r3, r3, #31
 8002a52:	fa21 f303 	lsr.w	r3, r1, r3
 8002a56:	4a0a      	ldr	r2, [pc, #40]	; (8002a80 <HAL_RCC_ClockConfig+0x270>)
 8002a58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002a5a:	4b0a      	ldr	r3, [pc, #40]	; (8002a84 <HAL_RCC_ClockConfig+0x274>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7fd fec4 	bl	80007ec <HAL_InitTick>
 8002a64:	4603      	mov	r3, r0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3718      	adds	r7, #24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40022000 	.word	0x40022000
 8002a74:	40021000 	.word	0x40021000
 8002a78:	04c4b400 	.word	0x04c4b400
 8002a7c:	08002c48 	.word	0x08002c48
 8002a80:	20000000 	.word	0x20000000
 8002a84:	20000004 	.word	0x20000004

08002a88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b087      	sub	sp, #28
 8002a8c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002a8e:	4b2c      	ldr	r3, [pc, #176]	; (8002b40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 030c 	and.w	r3, r3, #12
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	d102      	bne.n	8002aa0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a9a:	4b2a      	ldr	r3, [pc, #168]	; (8002b44 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a9c:	613b      	str	r3, [r7, #16]
 8002a9e:	e047      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002aa0:	4b27      	ldr	r3, [pc, #156]	; (8002b40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f003 030c 	and.w	r3, r3, #12
 8002aa8:	2b08      	cmp	r3, #8
 8002aaa:	d102      	bne.n	8002ab2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002aac:	4b26      	ldr	r3, [pc, #152]	; (8002b48 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002aae:	613b      	str	r3, [r7, #16]
 8002ab0:	e03e      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002ab2:	4b23      	ldr	r3, [pc, #140]	; (8002b40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 030c 	and.w	r3, r3, #12
 8002aba:	2b0c      	cmp	r3, #12
 8002abc:	d136      	bne.n	8002b2c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002abe:	4b20      	ldr	r3, [pc, #128]	; (8002b40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	f003 0303 	and.w	r3, r3, #3
 8002ac6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ac8:	4b1d      	ldr	r3, [pc, #116]	; (8002b40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	091b      	lsrs	r3, r3, #4
 8002ace:	f003 030f 	and.w	r3, r3, #15
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2b03      	cmp	r3, #3
 8002ada:	d10c      	bne.n	8002af6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002adc:	4a1a      	ldr	r2, [pc, #104]	; (8002b48 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae4:	4a16      	ldr	r2, [pc, #88]	; (8002b40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ae6:	68d2      	ldr	r2, [r2, #12]
 8002ae8:	0a12      	lsrs	r2, r2, #8
 8002aea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002aee:	fb02 f303 	mul.w	r3, r2, r3
 8002af2:	617b      	str	r3, [r7, #20]
      break;
 8002af4:	e00c      	b.n	8002b10 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002af6:	4a13      	ldr	r2, [pc, #76]	; (8002b44 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002afe:	4a10      	ldr	r2, [pc, #64]	; (8002b40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b00:	68d2      	ldr	r2, [r2, #12]
 8002b02:	0a12      	lsrs	r2, r2, #8
 8002b04:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b08:	fb02 f303 	mul.w	r3, r2, r3
 8002b0c:	617b      	str	r3, [r7, #20]
      break;
 8002b0e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b10:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	0e5b      	lsrs	r3, r3, #25
 8002b16:	f003 0303 	and.w	r3, r3, #3
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b28:	613b      	str	r3, [r7, #16]
 8002b2a:	e001      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002b30:	693b      	ldr	r3, [r7, #16]
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	371c      	adds	r7, #28
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	40021000 	.word	0x40021000
 8002b44:	00f42400 	.word	0x00f42400
 8002b48:	016e3600 	.word	0x016e3600

08002b4c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b087      	sub	sp, #28
 8002b50:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b52:	4b1e      	ldr	r3, [pc, #120]	; (8002bcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	f003 0303 	and.w	r3, r3, #3
 8002b5a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b5c:	4b1b      	ldr	r3, [pc, #108]	; (8002bcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	091b      	lsrs	r3, r3, #4
 8002b62:	f003 030f 	and.w	r3, r3, #15
 8002b66:	3301      	adds	r3, #1
 8002b68:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	2b03      	cmp	r3, #3
 8002b6e:	d10c      	bne.n	8002b8a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b70:	4a17      	ldr	r2, [pc, #92]	; (8002bd0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b78:	4a14      	ldr	r2, [pc, #80]	; (8002bcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b7a:	68d2      	ldr	r2, [r2, #12]
 8002b7c:	0a12      	lsrs	r2, r2, #8
 8002b7e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b82:	fb02 f303 	mul.w	r3, r2, r3
 8002b86:	617b      	str	r3, [r7, #20]
    break;
 8002b88:	e00c      	b.n	8002ba4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b8a:	4a12      	ldr	r2, [pc, #72]	; (8002bd4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b92:	4a0e      	ldr	r2, [pc, #56]	; (8002bcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b94:	68d2      	ldr	r2, [r2, #12]
 8002b96:	0a12      	lsrs	r2, r2, #8
 8002b98:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b9c:	fb02 f303 	mul.w	r3, r2, r3
 8002ba0:	617b      	str	r3, [r7, #20]
    break;
 8002ba2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ba4:	4b09      	ldr	r3, [pc, #36]	; (8002bcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	0e5b      	lsrs	r3, r3, #25
 8002baa:	f003 0303 	and.w	r3, r3, #3
 8002bae:	3301      	adds	r3, #1
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bbc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002bbe:	687b      	ldr	r3, [r7, #4]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	371c      	adds	r7, #28
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	016e3600 	.word	0x016e3600
 8002bd4:	00f42400 	.word	0x00f42400

08002bd8 <__libc_init_array>:
 8002bd8:	b570      	push	{r4, r5, r6, lr}
 8002bda:	4e0d      	ldr	r6, [pc, #52]	; (8002c10 <__libc_init_array+0x38>)
 8002bdc:	4c0d      	ldr	r4, [pc, #52]	; (8002c14 <__libc_init_array+0x3c>)
 8002bde:	1ba4      	subs	r4, r4, r6
 8002be0:	10a4      	asrs	r4, r4, #2
 8002be2:	2500      	movs	r5, #0
 8002be4:	42a5      	cmp	r5, r4
 8002be6:	d109      	bne.n	8002bfc <__libc_init_array+0x24>
 8002be8:	4e0b      	ldr	r6, [pc, #44]	; (8002c18 <__libc_init_array+0x40>)
 8002bea:	4c0c      	ldr	r4, [pc, #48]	; (8002c1c <__libc_init_array+0x44>)
 8002bec:	f000 f820 	bl	8002c30 <_init>
 8002bf0:	1ba4      	subs	r4, r4, r6
 8002bf2:	10a4      	asrs	r4, r4, #2
 8002bf4:	2500      	movs	r5, #0
 8002bf6:	42a5      	cmp	r5, r4
 8002bf8:	d105      	bne.n	8002c06 <__libc_init_array+0x2e>
 8002bfa:	bd70      	pop	{r4, r5, r6, pc}
 8002bfc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c00:	4798      	blx	r3
 8002c02:	3501      	adds	r5, #1
 8002c04:	e7ee      	b.n	8002be4 <__libc_init_array+0xc>
 8002c06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c0a:	4798      	blx	r3
 8002c0c:	3501      	adds	r5, #1
 8002c0e:	e7f2      	b.n	8002bf6 <__libc_init_array+0x1e>
 8002c10:	08002c58 	.word	0x08002c58
 8002c14:	08002c58 	.word	0x08002c58
 8002c18:	08002c58 	.word	0x08002c58
 8002c1c:	08002c5c 	.word	0x08002c5c

08002c20 <memset>:
 8002c20:	4402      	add	r2, r0
 8002c22:	4603      	mov	r3, r0
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d100      	bne.n	8002c2a <memset+0xa>
 8002c28:	4770      	bx	lr
 8002c2a:	f803 1b01 	strb.w	r1, [r3], #1
 8002c2e:	e7f9      	b.n	8002c24 <memset+0x4>

08002c30 <_init>:
 8002c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c32:	bf00      	nop
 8002c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c36:	bc08      	pop	{r3}
 8002c38:	469e      	mov	lr, r3
 8002c3a:	4770      	bx	lr

08002c3c <_fini>:
 8002c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c3e:	bf00      	nop
 8002c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c42:	bc08      	pop	{r3}
 8002c44:	469e      	mov	lr, r3
 8002c46:	4770      	bx	lr
